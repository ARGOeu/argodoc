{:	data{SI"/guides/api-partial/:ET{:default{	:	lastI"⁄<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>API | Part Identifiers</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h1 id="api---part-identifiers">API - Part Identifiers</h1>
<p>Part identifiers compute an unlimited number of handles on the fly, by registering just one. A single template handle can be created as a base that will allow any number of extensions to that base to be resolved as full handles, according to a pattern, without each such handle being individually registered.  In the handle system the part - fragment identifier is enabled with a template. The template is a syntax that defines a delimiter and an extension (extension is the option to add any kind of string behind the delimiter). </p>

<p>The template is not actually part of the PID. Syntax of the PIDs as well as the resolution mechanism accept the usage of part - fragment identifiers.</p>

<p>The part - fragment identifier is enabled for a specific prefix. So everyone using the prefix must agree on a common pattern based on the community context and specific use cases.The resolution mechanism needs to pass through the fragment specification. The repository service hosting the data has to understand the fragment parameter the resolver just passed through.</p>

<p>As previously mentioned,  the template feature can be configured per handle prefix with a specific delimiter. So for prefix 11239 in  EPIC service the delimiter is set to ‚Äú@‚Äù, but <strong>no template is enabled at the moment.</strong> </p>

<h2 id="how-to-use-it">How to use it?</h2>
<p>use a single handle</p>
<ul>
<li>to reference a part of a dictionary</li>
<li>to reference an unlimited number of ranges within a video</li>
<li>to reference a part of a collection of items</li>
</ul>

<p><strong>Please note</strong>  that when your system offers PIDs with part identifiers, it is responsible of maintaining the part identification fragment as well. Remember that users will use it to link to your system resources and that the resulting end point should always be available.</p>

<h2 id="example">Example</h2>
<p>In our example we have a main handle 11239/1234576. </p>

<p>So suppose that 11239/1234576 resolves to http://grnet.gr </p>

<p>suppose that a template  is enabled with the expression</p>

<p>the part identifier behavior is enabled with the expression 
  <i>prefix/suffix@a=x&amp;b=y</i>
then 
 11239/1234576@a=c&amp;b=d  will be resolved to http://grnet.gr?a=c&amp;b=d</p>



 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/glossary/">Glossary</a></h3></li>
          <li><h3><a href="#">API</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/api/">Getting Started</a></h3></li>
                <li><h3><a href="/guides/api-auth/">Authenticate</a></h3></li>
                <li><h3><a href="/guides/api-generation/">PID Generation</a></h3></li>
                <li><h3><a href="/guides/api-get/">Get a PID</a></h3></li>
                <li><h3><a href="/guides/api-list/">List all PID</a></h3></li>
                <li><h3><a href="/guides/api-search/">Search</a></h3></li>
                <li><h3><a href="/guides/api-create/">Create a PID</a></h3></li>
                <li><h3><a href="/guides/api-update/">Update a PID</a></h3></li>
                <li><h3><a href="/guides/api-delete/">Delete a PID</a></h3></li>
                <li><h3><a href="/guides/api-partial/">Part Identifiers</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:contact@pidconsortium.eu" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:contact@argodoc.eu" class="site-link" target='_blank'>ARGO Consurtium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T:rawI"|
# API - Part Identifiers
Part identifiers compute an unlimited number of handles on the fly, by registering just one. A single template handle can be created as a base that will allow any number of extensions to that base to be resolved as full handles, according to a pattern, without each such handle being individually registered.  In the handle system the part - fragment identifier is enabled with a template. The template is a syntax that defines a delimiter and an extension (extension is the option to add any kind of string behind the delimiter). 

The template is not actually part of the PID. Syntax of the PIDs as well as the resolution mechanism accept the usage of part - fragment identifiers.

The part - fragment identifier is enabled for a specific prefix. So everyone using the prefix must agree on a common pattern based on the community context and specific use cases.The resolution mechanism needs to pass through the fragment specification. The repository service hosting the data has to understand the fragment parameter the resolver just passed through.

As previously mentioned,  the template feature can be configured per handle prefix with a specific delimiter. So for prefix 11239 in  EPIC service the delimiter is set to "@", but <strong>no template is enabled at the moment.</strong> 

## How to use it?
use a single handle
<ul>
<li>to reference a part of a dictionary</li>
<li>to reference an unlimited number of ranges within a video</li>
<li>to reference a part of a collection of items</li>
</ul>

<strong>Please note</strong>  that when your system offers PIDs with part identifiers, it is responsible of maintaining the part identification fragment as well. Remember that users will use it to link to your system resources and that the resulting end point should always be available.

## Example
In our example we have a main handle 11239/1234576. 

So suppose that 11239/1234576 resolves to http://grnet.gr 

suppose that a template  is enabled with the expression

the part identifier behavior is enabled with the expression 
  <i>prefix/suffix@a=x&b=y</i>
then 
 11239/1234576@a=c&b=d  will be resolved to http://grnet.gr?a=c&b=d


;T:preI" 	
<h1 id="api---part-identifiers">API - Part Identifiers</h1>
<p>Part identifiers compute an unlimited number of handles on the fly, by registering just one. A single template handle can be created as a base that will allow any number of extensions to that base to be resolved as full handles, according to a pattern, without each such handle being individually registered.  In the handle system the part - fragment identifier is enabled with a template. The template is a syntax that defines a delimiter and an extension (extension is the option to add any kind of string behind the delimiter). </p>

<p>The template is not actually part of the PID. Syntax of the PIDs as well as the resolution mechanism accept the usage of part - fragment identifiers.</p>

<p>The part - fragment identifier is enabled for a specific prefix. So everyone using the prefix must agree on a common pattern based on the community context and specific use cases.The resolution mechanism needs to pass through the fragment specification. The repository service hosting the data has to understand the fragment parameter the resolver just passed through.</p>

<p>As previously mentioned,  the template feature can be configured per handle prefix with a specific delimiter. So for prefix 11239 in  EPIC service the delimiter is set to ‚Äú@‚Äù, but <strong>no template is enabled at the moment.</strong> </p>

<h2 id="how-to-use-it">How to use it?</h2>
<p>use a single handle</p>
<ul>
<li>to reference a part of a dictionary</li>
<li>to reference an unlimited number of ranges within a video</li>
<li>to reference a part of a collection of items</li>
</ul>

<p><strong>Please note</strong>  that when your system offers PIDs with part identifiers, it is responsible of maintaining the part identification fragment as well. Remember that users will use it to link to your system resources and that the resulting end point should always be available.</p>

<h2 id="example">Example</h2>
<p>In our example we have a main handle 11239/1234576. </p>

<p>So suppose that 11239/1234576 resolves to http://grnet.gr </p>

<p>suppose that a template  is enabled with the expression</p>

<p>the part identifier behavior is enabled with the expression 
  <i>prefix/suffix@a=x&amp;b=y</i>
then 
 11239/1234576@a=c&amp;b=d  will be resolved to http://grnet.gr?a=c&amp;b=d</p>

;T:	post@
I"/guides/api-update/;T{;{	;I"å<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>API | Update a PID</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h1 id="api---update-an-existing-pid">API - Update an existing PID</h1>

<p>You may want to update the values of an existing PID. This action is similar to the Create action. </p>

<p>The basic parameters are the same as in CREATE a PID</p>

<h2 id="update-a-pid---description">Update a PID - Description</h2>

<p>You may want to update the values of an existing PID. This action is similar to the Create action. </p>

<table>
  <tbody>
    <tr>
      <td><strong>Description</strong></td>
      <td>Update an existing PID</td>
    </tr>
    <tr>
      <td><strong>URL</strong></td>
      <td>The  API Service URL with the PID</td>
    </tr>
    <tr>
      <td><strong>HTTP Method</strong></td>
      <td>PUT</td>
    </tr>
    <tr>
      <td><strong>Security</strong></td>
      <td>Requires ownership of the PID. So you must authenticate before actually updating the PID</td>
    </tr>
  </tbody>
</table>

<h2 id="example">Example</h2>

<p>You may use the  create examples</p>



 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/glossary/">Glossary</a></h3></li>
          <li><h3><a href="#">API</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/api/">Getting Started</a></h3></li>
                <li><h3><a href="/guides/api-auth/">Authenticate</a></h3></li>
                <li><h3><a href="/guides/api-generation/">PID Generation</a></h3></li>
                <li><h3><a href="/guides/api-get/">Get a PID</a></h3></li>
                <li><h3><a href="/guides/api-list/">List all PID</a></h3></li>
                <li><h3><a href="/guides/api-search/">Search</a></h3></li>
                <li><h3><a href="/guides/api-create/">Create a PID</a></h3></li>
                <li><h3><a href="/guides/api-update/">Update a PID</a></h3></li>
                <li><h3><a href="/guides/api-delete/">Delete a PID</a></h3></li>
                <li><h3><a href="/guides/api-partial/">Part Identifiers</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:contact@pidconsortium.eu" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:contact@argodoc.eu" class="site-link" target='_blank'>ARGO Consurtium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I"^
# API - Update an existing PID

You may want to update the values of an existing PID. This action is similar to the Create action. 

The basic parameters are the same as in CREATE a PID

## Update a PID - Description

You may want to update the values of an existing PID. This action is similar to the Create action. 

| **Description** | Update an existing PID |
| **URL**         | The  API Service URL with the PID   |
| **HTTP Method** | PUT |
| **Security**    | Requires ownership of the PID. So you must authenticate before actually updating the PID|

## Example

You may use the  create examples

;T;
I"÷
<h1 id="api---update-an-existing-pid">API - Update an existing PID</h1>

<p>You may want to update the values of an existing PID. This action is similar to the Create action. </p>

<p>The basic parameters are the same as in CREATE a PID</p>

<h2 id="update-a-pid---description">Update a PID - Description</h2>

<p>You may want to update the values of an existing PID. This action is similar to the Create action. </p>

<table>
  <tbody>
    <tr>
      <td><strong>Description</strong></td>
      <td>Update an existing PID</td>
    </tr>
    <tr>
      <td><strong>URL</strong></td>
      <td>The  API Service URL with the PID</td>
    </tr>
    <tr>
      <td><strong>HTTP Method</strong></td>
      <td>PUT</td>
    </tr>
    <tr>
      <td><strong>Security</strong></td>
      <td>Requires ownership of the PID. So you must authenticate before actually updating the PID</td>
    </tr>
  </tbody>
</table>

<h2 id="example">Example</h2>

<p>You may use the  create examples</p>

;T;@I"/guides/api/;T{;{	;I"’<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>API documentation | ARGO</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h1 id="api">API</h1>

<p>This document describes the API service, using the HTTP application protocol. </p>

<p>This API uses XML as the primary exchange format.</p>



 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/installation">Installation</a></h3></li>
          <li><h3><a href="#">Components</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/sync/">Sync Components</a></h3></li>
                <li><h3><a href="/guides/consumer/">Consumer</a></h3></li>
                <li><h3><a href="/guides/compute/">Compute Engine</a></h3></li>
                <li><h3><a href="/guides/api/">API</a></h3></li>
                <li><h3><a href="/guides/webui/">Web UI</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<!--
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
-->
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:argo-ggus-support@grnet.gr" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:argo-ggus-support@grnet.gr" class="site-link" target='_blank'>ARGO Consortium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I"ã
# API

This document describes the API service, using the HTTP application protocol. 

This API uses XML as the primary exchange format.

;T;
I"©
<h1 id="api">API</h1>

<p>This document describes the API service, using the HTTP application protocol. </p>

<p>This API uses XML as the primary exchange format.</p>

;T;@I"/guides/examples/authcurl/;T{;{;I"¥<p>The request in curl</p>

<pre><code>
    curl -D- -u "YOURUSERNAME:YOURPASSWORD" -X GET -H "Content-Type: application/json" https://epic.grnet.gr/api/v2/handles/
</code></pre>

;T;	I"≠The request in curl

<pre><code>
    curl -D- -u "YOURUSERNAME:YOURPASSWORD" -X GET -H "Content-Type: application/json" https://epic.grnet.gr/api/v2/handles/
</code></pre>

;T;
@I"/guides/examples/authphp/;T{;{;I"Ö
<p>The request in php </p>

<pre><code class="language-php5"><span class="nv">$PIDSERVICE_URL</span><span class="o">=</span><span class="s2">"THE_SERVICE_URL_WITH_PREFIX"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_USER</span><span class="o">=</span><span class="s2">"YOURUSERNAME"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s2">"YOURPASSWORD"</span><span class="p">;</span>
<span class="c1">// Get cURL resource</span>
<span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>

<span class="c1">// Set the url to authenticate</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span><span class="nx">CURLOPT_URL</span><span class="p">,</span><span class="nv">$PIDSERVICE_URL</span><span class="p">);</span>
<span class="c1">// Set the authentication options</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_USERPWD</span><span class="p">,</span> <span class="nv">$PIDSERVICE_USER</span><span class="o">.</span><span class="s2">":"</span><span class="o">.</span><span class="nv">$PIDSERVICE_PASSWD</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPAUTH</span><span class="p">,</span> <span class="nx">CURLAUTH_BASIC</span><span class="p">);</span>

<span class="c1">// Include header in result? (0 = yes, 1 = no)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="c1">// Should cURL return or print out the data? (true = return, false = print)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">// Download the given URL, and return output</span>
<span class="nv">$output</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
<span class="nv">$finalData</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>

<span class="nv">$info</span> <span class="o">=</span> <span class="nb">curl_getinfo</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">200</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Authorization ok"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">401</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Authorization failed: Either your login or your password is wrong."</span><span class="p">;</span>

<span class="c1">// Close the cURL resource, and free system resources</span>
<span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span></code></pre>

;T;	I"/
The request in php 

<pre><code class="language-php5">
$PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX";
$PIDSERVICE_USER="YOURUSERNAME";
$PIDSERVICE_PASSWD="YOURPASSWORD";
// Get cURL resource
$curl = curl_init();

// Set the url to authenticate
curl_setopt($curl,CURLOPT_URL,$PIDSERVICE_URL);
// Set the authentication options
curl_setopt($curl, CURLOPT_USERPWD, $PIDSERVICE_USER.":".$PIDSERVICE_PASSWD);
curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);

// Include header in result? (0 = yes, 1 = no)
curl_setopt($curl, CURLOPT_HEADER, 0);
// Should cURL return or print out the data? (true = return, false = print)
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

// Download the given URL, and return output
$output = curl_exec($curl);
$finalData = json_decode($output);

$info = curl_getinfo($curl);
if( $info['http_code']==200) echo "Authorization ok<br/>";
if( $info['http_code']==401) echo "Authorization failed: Either your login or your password is wrong.<br/>";

// Close the cURL resource, and free system resources
curl_close($curl);

</code></pre>



;T;
@!I"!/guides/examples/authpython/;T{;{;I".
<p>The request in python</p>

<pre><code class="language-python"><span class="kn">import</span> <span class="nn">urllib2</span>

<span class="n">PIDSERVICE_URL</span><span class="o">=</span><span class="s">"THE_SERVICE_URL_WITH_PREFIX"</span>
<span class="n">PIDSERVICE_USER</span><span class="o">=</span><span class="s">"YOURUSERNAME"</span>
<span class="n">PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s">"YOURPASSWORD"</span>
<span class="n">DATAURL</span><span class="o">=</span><span class="s">''</span>
<span class="n">URL_TO_OPEN</span><span class="o">=</span><span class="n">PIDSERVICE_URL</span>

<span class="c"># create a password manager</span>
<span class="n">password_mgr</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPPasswordMgrWithDefaultRealm</span><span class="p">()</span>

<span class="c"># Add the username and password.</span>
<span class="n">password_mgr</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">PIDSERVICE_URL</span><span class="p">,</span> <span class="n">PIDSERVICE_USER</span><span class="p">,</span> <span class="n">PIDSERVICE_PASSWD</span><span class="p">)</span>

<span class="n">handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">(</span><span class="n">password_mgr</span><span class="p">)</span>

<span class="c"># create "opener" (OpenerDirector instance)</span>
<span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>

<span class="c"># use the opener to fetch a URL</span>
<span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">PIDSERVICE_URL</span><span class="p">)</span>

<span class="c"># Install the opener.</span>
<span class="c"># Now all calls to urllib2.urlopen use the created opener.</span>
<span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>

<span class="n">REQUESTDATA</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">URL_TO_OPEN</span><span class="p">)</span>
<span class="k">try</span><span class="p">:</span>
    <span class="n">DATAURL</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">REQUESTDATA</span><span class="p">)</span>
<span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">401</span><span class="p">:</span>
         <span class="k">print</span> <span class="s">"401-Authentication failed"</span>

<span class="k">if</span> <span class="n">DATAURL</span><span class="p">:</span>
    <span class="c"># Getting the code</span>
    <span class="k">print</span> <span class="s">"This gets the code: "</span><span class="p">,</span> <span class="n">DATAURL</span><span class="o">.</span><span class="n">code</span></code></pre>

;T;	I"
The request in python

<pre><code class="language-python">
import urllib2

PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX"
PIDSERVICE_USER="YOURUSERNAME"
PIDSERVICE_PASSWD="YOURPASSWORD"
DATAURL=''
URL_TO_OPEN=PIDSERVICE_URL

# create a password manager
password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()

# Add the username and password.
password_mgr.add_password(None, PIDSERVICE_URL, PIDSERVICE_USER, PIDSERVICE_PASSWD)

handler = urllib2.HTTPBasicAuthHandler(password_mgr)

# create "opener" (OpenerDirector instance)
opener = urllib2.build_opener(handler)

# use the opener to fetch a URL
opener.open(PIDSERVICE_URL)

# Install the opener.
# Now all calls to urllib2.urlopen use the created opener.
urllib2.install_opener(opener)

REQUESTDATA = urllib2.Request(URL_TO_OPEN)
try:
    DATAURL = urllib2.urlopen(REQUESTDATA)
except urllib2.URLError, e:
    if e.code == 401:
         print "401-Authentication failed"

if DATAURL:
    # Getting the code
    print "This gets the code: ", DATAURL.code

</code></pre>
 

;T;
@&I"/guides/examples/authres/;T{;{;I"´
<h3 id="the-response">The response:</h3>

<ul>
  <li>HTTP/1.1 200 OK: (Success)</li>
  <li>HTTP/1.1 401 Unauthorized: Your username or your password is wrong</li>
</ul>

;T;	I"|
### The response:

- HTTP/1.1 200 OK: (Success)
- HTTP/1.1 401 Unauthorized: Your username or your password is wrong

;T;
@+I"!/guides/examples/createcurl/;T{;{;I";<p>The request in curl</p>

<pre><code>
#!/bin/bash    

SUFFIX=`uuidgen`
curl -v -u "YOURUSERNAME:YOURPASSWORD" -H "Accept:application/json" -H "Content-Type:application/json" -X PUT --data '[{"type":"URL","parsed_data":"http://www.grnet.gr/"}]' https://epic.grnet.gr/api/v2/handles/11239/$SUFFIX 

</code></pre>

;T;	I"4The request in curl

<pre><code>
#!/bin/bash    

SUFFIX=`uuidgen`
curl -v -u "YOURUSERNAME:YOURPASSWORD" -H "Accept:application/json" -H "Content-Type:application/json" -X PUT --data '[{"type":"URL","parsed_data":"http://www.grnet.gr/"}]' https://epic.grnet.gr/api/v2/handles/11239/$SUFFIX 

</code></pre>

;T;
@0I"!/guides/examples/createperl/;T{;{;I"y∫
<p>The request in perl</p>

<pre><code class="language-perl"><span class="c1">#!/usr/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Getopt::</span><span class="n">Long</span><span class="p">;</span>
<span class="k">use</span> <span class="n">Switch</span> <span class="s">'Perl5'</span><span class="p">,</span> <span class="s">'Perl6'</span><span class="p">;</span>
<span class="k">use</span> <span class="n">JSON</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$fullargv0</span> <span class="o">=</span> <span class="nv">$0</span><span class="p">;</span>
<span class="k">my</span> <span class="p">(</span><span class="nv">$argv0</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$fullargv0</span> <span class="o">=~</span><span class="sr"> /([^\/\\]+)$/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">%settings</span> <span class="o">=</span> <span class="p">(</span>
<span class="s">'debug'</span> <span class="o">=&gt;</span> <span class="s">'False'</span><span class="p">,</span>
<span class="s">'handle'</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="s">'action'</span> <span class="o">=&gt;</span><span class="s">'put'</span><span class="p">,</span>
	<span class="s">'credentials'</span> 	<span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'username'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'password'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'baseuri'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'data'</span>	<span class="o">=&gt;</span><span class="p">{</span>
		<span class="s">'get'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
		<span class="s">'putpost'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'format'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'headerextra'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="s">'type'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'url'</span><span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'pid'</span><span class="o">=&gt;</span> <span class="s">'ADD A PID'</span><span class="p">,</span>
	<span class="p">},</span>
<span class="p">},</span>
<span class="p">);</span>

<span class="c1"># Main subroutine</span>
<span class="k">sub </span><span class="nf">main</span> <span class="p">{</span>

	<span class="c1">#Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Get the script arguments</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">)</span> <span class="o">=</span> <span class="n">get_arguments</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span>

	<span class="k">if</span><span class="p">(</span> <span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> 
		 <span class="n">performPut</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span>

	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>
<span class="p">}</span>
 
<span class="c1"># Subroutine to perform a PUT action</span>
<span class="k">sub </span><span class="nf">performPut</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1">#construct url and headers</span>
	<span class="k">my</span> <span class="nv">$url</span><span class="o">=</span><span class="s">"$settings_ref-&gt;{handle}-&gt;{credentials}-&gt;{baseuri}$settings_ref-&gt;{handle}-&gt;{url}-&gt;{pid}"</span><span class="p">;</span>
	<span class="nb">printf</span><span class="p">(</span><span class="s">"The constructed url is        : %s\n"</span><span class="p">,</span><span class="nv">$url</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="k">my</span> <span class="nv">@httpHeaders</span> <span class="o">=</span> <span class="p">(</span> <span class="s">'Content-Type: application/json'</span> <span class="p">);</span>
	<span class="c1"># add extra header info. f.i. "If-Match: *" or "If-None-Match: *"</span>
	<span class="nb">push</span><span class="p">(</span><span class="nv">@httpHeaders</span><span class="p">,</span> <span class="s">"$settings_ref-&gt;{handle}-&gt;{headerextra}"</span> <span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="p">;</span>

	<span class="c1">#construct data</span>
	<span class="k">my</span> <span class="nv">$data</span><span class="o">=</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">};</span>
	<span class="nb">printf</span><span class="p">(</span><span class="s">"The data is                   : %s\n"</span><span class="p">,</span><span class="nv">$data</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="c1"># perform action</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_content_type</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_body</span> <span class="p">)</span> <span class="o">=</span> <span class="n">httpPut</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">,</span> <span class="nv">$url</span><span class="p">,</span> <span class="o">\</span><span class="nv">@httpHeaders</span><span class="p">,</span> <span class="nv">$data</span> <span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">);</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'An error happened\n'</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1"># reader helper calback function</span>
<span class="k">sub </span><span class="nf">read_callback</span> <span class="p">{</span>
	<span class="k">my</span> <span class="p">(</span><span class="nv">$maxlength</span><span class="p">,</span><span class="nv">$pointer</span><span class="p">)</span><span class="o">=</span><span class="nv">@_</span><span class="p">;</span>
	<span class="c1"># printf("The MAXLENGTH is     : \n", $maxlength);</span>
	<span class="c1"># printf("The POINTER is       : \n", $$pointer) ;</span>
	<span class="k">my</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$$pointer</span><span class="p">;</span>
	<span class="nv">$$pointer</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1"># Subroutine to post data via a http PUT</span>
<span class="k">sub </span><span class="nf">httpPut</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$httpHeaders_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="k">print</span><span class="p">(</span><span class="s">'Entering httpPut              :\n'</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

	<span class="c1"># local varables</span>
	<span class="k">my</span> <span class="nv">$length</span> <span class="o">=</span> <span class="nb">length</span> <span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
	<span class="k">my</span> <span class="nv">$body</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_body</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_code</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_content_type</span><span class="p">;</span>

	<span class="k">my</span> <span class="nv">$curl</span> <span class="o">=</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>

	<span class="c1"># set options for the curl http request</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="nv">$httpHeaders_ref</span> <span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_READFUNCTION</span><span class="p">,</span> <span class="o">\&amp;</span><span class="n">read_callback</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_UPLOAD</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_INFILE</span><span class="p">,</span> <span class="o">\</span><span class="nv">$data</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_INFILESIZE</span><span class="p">,</span> <span class="nb">length</span><span class="p">(</span><span class="nv">$data</span><span class="p">));</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_USERNAME</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">});</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_PASSWORD</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">});</span>

	<span class="c1">#debugging</span>
	<span class="c1">#$curl-&gt;setopt (CURLOPT_VERBOSE, 1);</span>

	<span class="c1"># A filehandle, reference to a scalar or reference to a typeglob can be used here.</span>
	<span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">'&gt;'</span><span class="p">,</span> <span class="o">\</span><span class="nv">$response_body</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">"$!"</span><span class="p">;</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_WRITEDATA</span><span class="p">,</span> <span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Do the actual curl http request</span>
	<span class="k">my</span> <span class="nv">$returncode</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">perform</span><span class="p">;</span>

	<span class="c1"># close file handle</span>
	<span class="nb">close</span><span class="p">(</span><span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="nv">$response_code</span>         <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_HTTP_CODE</span><span class="p">);</span>
		<span class="nv">$response_content_type</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_CONTENT_TYPE</span><span class="p">);</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response code        : $response_code\n"</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response content type: $response_content_type\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_body\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="c1"># Error code, type of error, error message</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"An error happened: $returncode "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">strerror</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">)</span><span class="o">.</span><span class="s">" "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">errbuf</span><span class="o">.</span><span class="s">"\n"</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">,</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="nv">$response_content_type</span><span class="p">,</span> <span class="nv">$response_body</span> <span class="p">);</span>
<span class="p">}</span>
<span class="c1"># Subroutine to get and check all script arguments</span>
<span class="k">sub </span><span class="nf">get_arguments</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Define local variables</span>
	<span class="k">my</span> <span class="nv">%arguments</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$username</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$password</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$baseUri</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$pidUrl</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$credentials</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$handleData</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$type</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$returncode</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$message</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">@sources</span><span class="p">;</span>

	<span class="n">GetOptions</span><span class="p">(</span> <span class="s">'h|help'</span>    <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">},</span>
		<span class="s">'user=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$username</span><span class="p">,</span>
		<span class="s">'passwd=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$password</span><span class="p">,</span>
		<span class="s">'base=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$baseUri</span><span class="p">,</span>
		<span class="s">'pid=s'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$pidUrl</span><span class="p">,</span>
		<span class="s">'cred=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$credentials</span><span class="p">,</span>
		<span class="s">'data=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$handleData</span><span class="p">,</span>
		<span class="s">'type=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$type</span><span class="p">,</span>
		<span class="s">'header=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$header</span><span class="p">,</span>
		<span class="s">'get'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">},</span>
		<span class="s">'put'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">},</span>
		<span class="s">'delete'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">},</span>
		<span class="s">'post'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">},</span>
		<span class="s">'pretty'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">},</span>
		<span class="s">'d|debug'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">},</span>
	<span class="p">);</span>

	<span class="c1"># Check the help flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># Set the returncode</span>
		<span class="nv">$returncode</span><span class="o">=</span><span class="mi">255</span><span class="p">;</span>

		<span class="nv">$message</span> <span class="o">=</span> <span class="n">print_help</span><span class="p">();</span>
	<span class="p">}</span>
	
	<span class="c1"># Check the debug flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=</span> <span class="s">'True'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'debug is                      : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the pretty flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=</span> <span class="s">'pretty'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'pretty format printing is     : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the action flag's (get,put,delete,post,search,nagios)</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'get'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'put'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'delete'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'post'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the username</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$username</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$username</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the password</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$password</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$password</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the base uri</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$baseUri</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$baseUri</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the pid url</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$pidUrl</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$pidUrl</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The pid is                    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the handle data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$handleData</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$handleData</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The data is                   : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the type data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$type</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$type</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The type(s) to show is/are    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>
	
	<span class="c1"># check the header data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$header</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$header</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The extra header info is      : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the credentials data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$credentials</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># read the credentials from the file</span>
		<span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$credentials</span><span class="p">;</span>
		<span class="k">my</span> <span class="nv">$json_text</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span>
			<span class="nb">open</span><span class="p">(</span><span class="k">my</span> <span class="nv">$json_fh</span><span class="p">,</span> <span class="s">"&lt;:encoding(UTF-8)"</span><span class="p">,</span> <span class="nv">$filename</span><span class="p">)</span>  <span class="ow">or</span> <span class="nb">die</span><span class="p">(</span><span class="s">"Can't open $filename: $!\n"</span><span class="p">);</span>
			<span class="nb">local</span> <span class="vg">$/</span><span class="p">;</span>
			<span class="sr">&lt;$json_fh&gt;</span>
		<span class="p">};</span>

		<span class="c1"># convert from json and put in correct place </span>
		<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$json_text</span><span class="p">);</span>

		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="p">}</span>

	<span class="c1"># Print the message</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$message</span> <span class="p">)</span> <span class="p">{</span>

		<span class="k">print</span> <span class="s">"$message\n"</span><span class="p">;</span>
	<span class="p">};</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>

<span class="p">};</span></code></pre>

;T;	I"Í%
The request in perl

<pre><code class="language-perl">

#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;
use Switch 'Perl5', 'Perl6';
use JSON;
use WWW::Curl::Easy;

my $fullargv0 = $0;
my ($argv0) = $fullargv0 =~ /([^\/\\]+)$/;

my %settings = (
'debug' => 'False',
'handle' => {
	'action' =>'put',
	'credentials' 	=>	{
		'username'	=> 'empty',
		'password'	=> 'empty',
		'baseuri'	=> 'empty',
	},
	'data'	=>{
		'get'	=> '',
		'putpost'=> '',
	},
	'format' => 'none',
	'headerextra'	=> '',
	'type' => 'none',
	'url'=>	{
		'pid'=> 'ADD A PID',
	},
},
);

# Main subroutine
sub main {

	#Get the subroutine arguments
	my $settings_ref = shift;

	# Get the script arguments
	(my $returncode) = get_arguments($settings_ref);

	if( $returncode == 0 ) 
		 performPut($settings_ref);

	return($returncode);
}
 
# Subroutine to perform a PUT action
sub performPut {

	# Get the subroutine arguments
	my $settings_ref = shift;

	#construct url and headers
	my $url="$settings_ref->{handle}->{credentials}->{baseuri}$settings_ref->{handle}->{url}->{pid}";
	printf("The constructed url is        : %s\n",$url) if $settings_ref->{debug} =~ /True/ ;
	my @httpHeaders = ( 'Content-Type: application/json' );
	# add extra header info. f.i. "If-Match: *" or "If-None-Match: *"
	push(@httpHeaders, "$settings_ref->{handle}->{headerextra}" ) if $settings_ref->{handle}->{headerextra} ;

	#construct data
	my $data=$settings_ref->{handle}->{data}->{putpost};
	printf("The data is                   : %s\n",$data) if $settings_ref->{debug} =~ /True/ ;

	# perform action
	(my $returncode, my $response_code, my $response_content_type, my $response_body ) = httpPut($settings_ref, $url, \@httpHeaders, $data );

	# Looking at the results of the curl request
	if ($returncode == 0) {
		print('Transfer went ok\n') if $settings_ref->{debug} =~ /True/ ;

		# judge result and next action based on $response_code
		if ($response_code >= 200 && $response_code < 300 ) {
			print('The request went ok\n') if $settings_ref->{debug} =~ /True/ ;
		} else {
			print('The request went NOT ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_code\n");
		} 

	} else {
		print('An error happened\n');
	}
}

# reader helper calback function
sub read_callback {
	my ($maxlength,$pointer)=@_;
	# printf("The MAXLENGTH is     : \n", $maxlength);
	# printf("The POINTER is       : \n", $$pointer) ;
	my $data = $$pointer;
	$$pointer = "";
	return $data;
}

# Subroutine to post data via a http PUT
sub httpPut {

	# Get the subroutine arguments
	my $settings_ref = shift;
	my $url = shift;
	my $httpHeaders_ref = shift;
	my $data = shift;

	print('Entering httpPut              :\n')         if $settings_ref->{debug} =~ /True/;

	# local varables
	my $length = length ($data);
	my $body = "";
	my $header = "";
	my $response_body;
	my $response_code;
	my $response_content_type;

	my $curl = WWW::Curl::Easy->new;

	# set options for the curl http request
	$curl->setopt(CURLOPT_HEADER, 0);
	$curl->setopt(CURLOPT_HTTPHEADER, $httpHeaders_ref );
	$curl->setopt(CURLOPT_READFUNCTION, \&read_callback);
	$curl->setopt(CURLOPT_UPLOAD, 1);
	$curl->setopt(CURLOPT_INFILE, \$data);
	$curl->setopt(CURLOPT_INFILESIZE, length($data));
	$curl->setopt(CURLOPT_URL, $url);
	$curl->setopt(CURLOPT_USERNAME, $settings_ref->{handle}->{credentials}->{username});
	$curl->setopt(CURLOPT_PASSWORD, $settings_ref->{handle}->{credentials}->{password});

	#debugging
	#$curl->setopt (CURLOPT_VERBOSE, 1);

	# A filehandle, reference to a scalar or reference to a typeglob can be used here.
	open my $fh, '>', \$response_body or die "$!";
	$curl->setopt(CURLOPT_WRITEDATA, $fh);

	# Do the actual curl http request
	my $returncode = $curl->perform;

	# close file handle
	close($fh);

	# Looking at the results of the curl request
	if ($returncode == 0) {
		print('Transfer went ok\n') if $settings_ref->{debug} =~ /True/ ;

		$response_code         = $curl->getinfo(CURLINFO_HTTP_CODE);
		$response_content_type = $curl->getinfo(CURLINFO_CONTENT_TYPE);
		print("Received response code        : $response_code\n")         if $settings_ref->{debug} =~ /True/;
		print("Received response content type: $response_content_type\n") if $settings_ref->{debug} =~ /True/;

		# judge result and next action based on $response_code
		if ($response_code >= 200 && $response_code < 300 ) {
			print('The request went ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_body\n") if $settings_ref->{debug} =~ /True/ ;
		} else {
			print('The request went NOT ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_code\n") if $settings_ref->{debug} =~ /True/;
		} 

	} else {
		# Error code, type of error, error message
		print("An error happened: $returncode ".$curl->strerror($returncode)." ".$curl->errbuf."\n");
	}

	# Return the results
	return($returncode, $response_code, $response_content_type, $response_body );
}
# Subroutine to get and check all script arguments
sub get_arguments {

	# Get the subroutine arguments
	my $settings_ref = shift;

	# Define local variables
	my %arguments;
	my $username;
	my $password;
	my $baseUri;
	my $pidUrl;
	my $credentials;
	my $handleData;
	my $type;
	my $header;
	my $returncode=0;
	my $message;
	my @sources;

	GetOptions( 'h|help'    => \$arguments{help},
		'user=s'		=> \$username,
		'passwd=s'		=> \$password,
		'base=s'		=> \$baseUri,
		'pid=s'			=> \$pidUrl,
		'cred=s'		=> \$credentials,
		'data=s'		=> \$handleData,
		'type=s'		=> \$type,
		'header=s'		=> \$header,
		'get'			=> \$arguments{get},
		'put'			=> \$arguments{put},
		'delete'		=> \$arguments{delete},
		'post'			=> \$arguments{post},
		'pretty'		=> \$arguments{pretty},
		'd|debug'		=> \$arguments{debug},
	);

	# Check the help flag
	if( $arguments{help} ) {

		# Set the returncode
		$returncode=255;

		$message = print_help();
	}
	
	# Check the debug flag
	if( $arguments{debug} ) {

		$settings_ref->{debug} = 'True';
		printf('debug is                      : on\n') if $settings_ref->{debug} =~ /True/ ;

	}

	# Check the pretty flag
	if( $arguments{pretty} ) {

		$settings_ref->{handle}->{format} = 'pretty';
		printf('pretty format printing is     : on\n') if $settings_ref->{debug} =~ /True/ ;

	}

	# Check the action flag's (get,put,delete,post,search,nagios)
	if( $arguments{get} ) {

		$settings_ref->{handle}->{action} = 'get';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{put} ) {

		$settings_ref->{handle}->{action} = 'put';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{delete} ) {

		$settings_ref->{handle}->{action} = 'delete';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{post} ) {

		$settings_ref->{handle}->{action} = 'post';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the username
	if( $username ) {

		$settings_ref->{handle}->{credentials}->{username} = $username;
		printf("The username is               : %s\n",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the password
	if( $password ) {

		$settings_ref->{handle}->{credentials}->{password} = $password;
		printf("The password is               : %s\n",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the base uri
	if( $baseUri ) {

		$settings_ref->{handle}->{credentials}->{baseuri} = $baseUri;
		printf("The base uri is               : %s\n",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the pid url
	if( $pidUrl ) {

		$settings_ref->{handle}->{url}->{pid} = $pidUrl;
		printf("The pid is                    : %s\n",$settings_ref->{handle}->{url}->{pid}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the handle data
	if( $handleData ) {

		$settings_ref->{handle}->{data}->{putpost} = $handleData;
		printf("The data is                   : %s\n",$settings_ref->{handle}->{data}->{putpost}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the type data
	if( $type ) {

		$settings_ref->{handle}->{type} = $type;
		printf("The type(s) to show is/are    : %s\n",$settings_ref->{handle}->{type}) if $settings_ref->{debug} =~ /True/ ;

	}
	
	# check the header data
	if( $header ) {

		$settings_ref->{handle}->{headerextra} = $header;
		printf("The extra header info is      : %s\n",$settings_ref->{handle}->{headerextra}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the credentials data
	if( $credentials ) {

		# read the credentials from the file
		my $filename = $credentials;
		my $json_text = do {
			open(my $json_fh, "<:encoding(UTF-8)", $filename)  or die("Can't open $filename: $!\n");
			local $/;
			<$json_fh>
		};

		# convert from json and put in correct place 
		my $json = JSON->new;
		$settings_ref->{handle}->{credentials} = $json->decode($json_text);

		printf("The username is               : %s\n",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;
		printf("The password is               : %s\n",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;
		printf("The base uri is               : %s\n",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;
	}

	# Print the message
	if( $message ) {

		print "$message\n";
	};

	# Return the results
	return($returncode);

};

</code></pre>

;T;
@5I" /guides/examples/createphp/;T{;{;I"o 
<p>The request in php </p>

<pre><code class="language-php5"><span class="nv">$PIDSERVICE_URL</span><span class="o">=</span><span class="s2">"THE_SERVICE_URL_WITH_PREFIX"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_USER</span><span class="o">=</span><span class="s2">"YOURUSERNAME"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s2">"YOURPASSWORD"</span><span class="p">;</span>
<span class="nv">$UUID</span> <span class="o">=</span> <span class="nx">gen_uuid</span><span class="p">();</span> <span class="c1">//a function to generate a uuid</span>
<span class="nv">$URL_TO_OPEN</span> <span class="o">=</span> <span class="nv">$PIDSERVICE_URL</span><span class="o">.</span><span class="nv">$UUID</span><span class="p">;</span>
<span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="s1">'URL'</span><span class="p">,</span><span class="s1">'parsed_data'</span><span class="o">=&gt;</span><span class="s1">'http://www.grnet.gr/'</span><span class="p">));</span>
<span class="nv">$update_json</span><span class="o">=</span><span class="nb">json_encode</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>

<span class="c1">// Get cURL resource</span>
<span class="nv">$ch</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>

<span class="c1">//Set the headers to complete the request</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">'Content-Type: application/json'</span><span class="p">,</span><span class="s1">'Content-Length: '</span> <span class="o">.</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$update_json</span><span class="p">)));</span>

<span class="c1">//set the PUT Action</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_CUSTOMREQUEST</span><span class="p">,</span> <span class="s2">"PUT"</span><span class="p">);</span>

<span class="c1">//SET the postfield data</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_POSTFIELDS</span><span class="p">,</span><span class="nv">$update_json</span><span class="p">);</span>

<span class="c1">// Should cURL return or print out the data? (true = return, false = print)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">//Set the url with the new name of the PID </span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$URL_TO_OPEN</span><span class="p">);</span>

<span class="c1">// Set the authentication options</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_USERPWD</span><span class="p">,</span> <span class="nv">$PIDSERVICE_USER</span><span class="o">.</span><span class="s2">":"</span><span class="o">.</span><span class="nv">$PIDSERVICE_PASSWD</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPAUTH</span><span class="p">,</span> <span class="nx">CURLAUTH_BASIC</span><span class="p">);</span>

<span class="nv">$output</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>
<span class="nv">$info</span> <span class="o">=</span> <span class="nb">curl_getinfo</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>

<span class="c1">// Download the given URL, and return output </span>

<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">200</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"HANDLE EXISTS"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">201</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"PID CREATED"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">204</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"PID UPDATED"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">404</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"HANDLE DOESNT EXIST"</span><span class="p">;</span>

<span class="nb">curl_close</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>

<span class="k">function</span> <span class="nf">gen_uuid</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">sprintf</span><span class="p">(</span> <span class="s1">'%04x%04x-%04x-%04x-%04x-%04x%04x%04x'</span><span class="p">,</span>
            <span class="c1">// 32 bits for "time_low"</span>
            <span class="nb">mt_rand</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0xffff</span> <span class="p">),</span> <span class="nb">mt_rand</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0xffff</span> <span class="p">),</span>

            <span class="c1">// 16 bits for "time_mid"</span>
            <span class="nb">mt_rand</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0xffff</span> <span class="p">),</span>

            <span class="c1">// 16 bits for "time_hi_and_version",</span>
            <span class="c1">// four most significant bits holds version number 4</span>
            <span class="nb">mt_rand</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x0fff</span> <span class="p">)</span> <span class="o">|</span> <span class="mh">0x4000</span><span class="p">,</span>

            <span class="c1">// 16 bits, 8 bits for "clk_seq_hi_res",</span>
            <span class="c1">// 8 bits for "clk_seq_low",</span>
            <span class="c1">// two most significant bits holds zero and one for variant DCE1.1</span>
            <span class="nb">mt_rand</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x3fff</span> <span class="p">)</span> <span class="o">|</span> <span class="mh">0x8000</span><span class="p">,</span>

            <span class="c1">// 48 bits for "node"</span>
            <span class="nb">mt_rand</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0xffff</span> <span class="p">),</span> <span class="nb">mt_rand</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0xffff</span> <span class="p">),</span> <span class="nb">mt_rand</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0xffff</span> <span class="p">)</span>
    <span class="p">);</span>
<span class="p">}</span></code></pre>

;T;	I"§
The request in php 

<pre><code class="language-php5">
$PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX";
$PIDSERVICE_USER="YOURUSERNAME";
$PIDSERVICE_PASSWD="YOURPASSWORD";
$UUID = gen_uuid(); //a function to generate a uuid
$URL_TO_OPEN = $PIDSERVICE_URL.$UUID;
$data = array(array('type' => 'URL','parsed_data'=>'http://www.grnet.gr/'));
$update_json=json_encode($data);

// Get cURL resource
$ch = curl_init();

//Set the headers to complete the request
curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json','Content-Length: ' . strlen($update_json)));

//set the PUT Action
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");

//SET the postfield data
curl_setopt($ch, CURLOPT_POSTFIELDS,$update_json);

// Should cURL return or print out the data? (true = return, false = print)
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

//Set the url with the new name of the PID 
curl_setopt($ch, CURLOPT_URL, $URL_TO_OPEN);

// Set the authentication options
curl_setopt($ch, CURLOPT_USERPWD, $PIDSERVICE_USER.":".$PIDSERVICE_PASSWD);
curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);

$output = curl_exec($ch);
$info = curl_getinfo($ch);

// Download the given URL, and return output 

if( $info['http_code']==200) echo "HANDLE EXISTS<br/>";
if( $info['http_code']==201) echo "PID CREATED<br/>";
if( $info['http_code']==204) echo "PID UPDATED<br/>";
if( $info['http_code']==404) echo "HANDLE DOESNT EXIST<br/>";

curl_close($ch);

function gen_uuid() {
    return sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
            // 32 bits for "time_low"
            mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),

            // 16 bits for "time_mid"
            mt_rand( 0, 0xffff ),

            // 16 bits for "time_hi_and_version",
            // four most significant bits holds version number 4
            mt_rand( 0, 0x0fff ) | 0x4000,

            // 16 bits, 8 bits for "clk_seq_hi_res",
            // 8 bits for "clk_seq_low",
            // two most significant bits holds zero and one for variant DCE1.1
            mt_rand( 0, 0x3fff ) | 0x8000,

            // 48 bits for "node"
            mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )
    );
}

</code></pre>



;T;
@:I"#/guides/examples/createpython/;T{;{;I")
<p>The request in python</p>

<pre><code class="language-python"><span class="kn">import</span> <span class="nn">urllib2</span>
<span class="kn">import</span> <span class="nn">uuid</span>
<span class="kn">import</span> <span class="nn">json</span>

<span class="n">PIDSERVICE_URL</span><span class="o">=</span><span class="s">"THE_SERVICE_URL_WITH_PREFIX"</span>
<span class="n">PIDSERVICE_USER</span><span class="o">=</span><span class="s">"YOURUSERNAME"</span>
<span class="n">PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s">"YOURPASSWORD"</span>
<span class="n">SUFFIX</span> <span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">());</span>
<span class="n">URL_TO_OPEN</span><span class="o">=</span><span class="n">PIDSERVICE_URL</span><span class="o">+</span><span class="n">SUFFIX</span>
<span class="n">DATAURL</span><span class="o">=</span><span class="s">''</span>

<span class="c"># create a password manager</span>
<span class="n">password_mgr</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPPasswordMgrWithDefaultRealm</span><span class="p">()</span>

<span class="c"># Add the username and password.</span>
<span class="n">password_mgr</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">PIDSERVICE_URL</span><span class="p">,</span> <span class="n">PIDSERVICE_USER</span><span class="p">,</span> <span class="n">PIDSERVICE_PASSWD</span><span class="p">)</span>

<span class="n">handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">(</span><span class="n">password_mgr</span><span class="p">)</span>

<span class="c"># create "opener" (OpenerDirector instance)</span>
<span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>

<span class="c"># use the opener to fetch a URL</span>
<span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">PIDSERVICE_URL</span><span class="p">)</span>

<span class="c"># Install the opener.</span>
<span class="c"># Now all calls to urllib2.urlopen use the created opener.</span>
<span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>

<span class="c">#create the json data</span>
<span class="n">JSONDATA</span> <span class="o">=</span> <span class="p">[{</span><span class="s">'type'</span><span class="p">:</span><span class="s">'URL'</span><span class="p">,</span><span class="s">'parsed_data'</span><span class="p">:</span><span class="s">'http://www.grnet.gr'</span><span class="p">}]</span>
<span class="n">JSONDATATOSEND</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">JSONDATA</span><span class="p">);</span>

<span class="n">REQUESTDATA</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">URL_TO_OPEN</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">JSONDATATOSEND</span><span class="p">)</span>

<span class="c">#create the headers</span>
<span class="n">REQUESTDATA</span><span class="o">.</span><span class="n">add_header</span><span class="p">(</span><span class="s">'Content-Type'</span><span class="p">,</span><span class="s">'application/json'</span><span class="p">)</span>
<span class="n">REQUESTDATA</span><span class="o">.</span><span class="n">add_header</span><span class="p">(</span><span class="s">'Content-Length'</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">JSONDATATOSEND</span><span class="p">))</span>

<span class="c"># creates the PUT method</span>
<span class="n">REQUESTDATA</span><span class="o">.</span><span class="n">get_method</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="s">'PUT'</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">DATAURL</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">REQUESTDATA</span><span class="p">)</span>
    
<span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">e</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"404-Not found"</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">401</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"401-Authentication failed"</span>    
        <span class="c">#get http code of the request</span>

<span class="k">if</span> <span class="n">DATAURL</span><span class="p">:</span>
    <span class="c"># Getting the code</span>
    <span class="k">print</span> <span class="s">"This gets the code: "</span><span class="p">,</span> <span class="n">DATAURL</span><span class="o">.</span><span class="n">code</span></code></pre>

;T;	I"
The request in python

<pre><code class="language-python">
import urllib2
import uuid
import json

PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX"
PIDSERVICE_USER="YOURUSERNAME"
PIDSERVICE_PASSWD="YOURPASSWORD"
SUFFIX =str(uuid.uuid1());
URL_TO_OPEN=PIDSERVICE_URL+SUFFIX
DATAURL=''

# create a password manager
password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()

# Add the username and password.
password_mgr.add_password(None, PIDSERVICE_URL, PIDSERVICE_USER, PIDSERVICE_PASSWD)

handler = urllib2.HTTPBasicAuthHandler(password_mgr)

# create "opener" (OpenerDirector instance)
opener = urllib2.build_opener(handler)

# use the opener to fetch a URL
opener.open(PIDSERVICE_URL)

# Install the opener.
# Now all calls to urllib2.urlopen use the created opener.
urllib2.install_opener(opener)

#create the json data
JSONDATA = [{'type':'URL','parsed_data':'http://www.grnet.gr'}]
JSONDATATOSEND = json.dumps(JSONDATA);

REQUESTDATA = urllib2.Request(URL_TO_OPEN, data=JSONDATATOSEND)

#create the headers
REQUESTDATA.add_header('Content-Type','application/json')
REQUESTDATA.add_header('Content-Length',len(JSONDATATOSEND))

# creates the PUT method
REQUESTDATA.get_method = lambda: 'PUT'

try:
    DATAURL = urllib2.urlopen(REQUESTDATA)
    
except urllib2.URLError, e:
    print e
    if e.code == 404:
        print "404-Not found"
    if e.code == 401:
        print "401-Authentication failed"    
        #get http code of the request

if DATAURL:
    # Getting the code
    print "This gets the code: ", DATAURL.code

</code></pre>

;T;
@?I" /guides/examples/createres/;T{;{;I"<h3 id="the-response">The response:</h3>

<ul>
  <li>HTTP/1.1 201 Created: (Success) </li>
  <li>HTTP/1.1 204 No-Content: The local name already exists , and instead of creating a new one you‚Äôve just updated the values of an existing one.  </li>
  <li>HTTP/1.1 401 Unauthorized: Your username or your password is wrong</li>
  <li>HTTP/1.1 405 Method Not Allowed: 
    <ol>
      <li>You are trying to create a new handle in the main url of the server either (https://epic.grnet.gr/handles/11239/) or (https://epic.grnet.gr/handles). You have not specified a unique name for your handle. (or)</li>
      <li>You are trying to create a new handle with manual generation of suffix name via POST instead of PUT. POST supports automatic generation of suffix name.</li>
    </ol>
  </li>
  <li>HTTP/1.1 412 Precondition failed: You have used the precondition (HTTP‚Äôs If-Match: * or If-None-Match:*) in the request-header fields. The precondition given, evaluated to false when it was tested on the server and prevented the requested method from being applied.</li>
  <li>HTTP/1.1 415 Unsupported Media Type: You haven‚Äôt specify the correct headers for your request. The service supports Json representation so you must define the content-type of the request.</li>
</ul>

<pre><code>
HTTP/1.1 201 Created
Date: Mon, 25 Nov 2013 10:18:18 GMT
Content-Length: 2211
Location: https://epic.grnet.gr/api/v2/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5
ETag: "1B2M2Y8AsgTpgAmY7PhCfg"
Last-Modified: Thu, 01 Jan 1970 00:00:00 GMT
</code></pre>

;T;	I"É### The response:

- HTTP/1.1 201 Created: (Success) 
- HTTP/1.1 204 No-Content: The local name already exists , and instead of creating a new one you‚Äôve just updated the values of an existing one.  
- HTTP/1.1 401 Unauthorized: Your username or your password is wrong
- HTTP/1.1 405 Method Not Allowed: 
  1. You are trying to create a new handle in the main url of the server either (https://epic.grnet.gr/handles/11239/) or (https://epic.grnet.gr/handles). You have not specified a unique name for your handle. (or)
  2. You are trying to create a new handle with manual generation of suffix name via POST instead of PUT. POST supports automatic generation of suffix name.
- HTTP/1.1 412 Precondition failed: You have used the precondition (HTTP‚Äôs If-Match: * or If-None-Match:*) in the request-header fields. The precondition given, evaluated to false when it was tested on the server and prevented the requested method from being applied.
- HTTP/1.1 415 Unsupported Media Type: You haven't specify the correct headers for your request. The service supports Json representation so you must define the content-type of the request.


<pre><code>
HTTP/1.1 201 Created
Date: Mon, 25 Nov 2013 10:18:18 GMT
Content-Length: 2211
Location: https://epic.grnet.gr/api/v2/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5
ETag: "1B2M2Y8AsgTpgAmY7PhCfg"
Last-Modified: Thu, 01 Jan 1970 00:00:00 GMT
</code></pre>

;T;
@DI"!/guides/examples/deletecurl/;T{;{;I"¯<p>The request in curl</p>

<pre><code>
curl -v -u "YOURUSERNAME:YOURPASSWORD" -H "Accept:application/json" -H "Content-Type:application/json" -X DELETE https://epic.grnet.gr/api/v2/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5
</code></pre>

;T;	I"ÒThe request in curl

<pre><code>
curl -v -u "YOURUSERNAME:YOURPASSWORD" -H "Accept:application/json" -H "Content-Type:application/json" -X DELETE https://epic.grnet.gr/api/v2/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5
</code></pre>

;T;
@II"!/guides/examples/deleteperl/;T{;{;I"à®
<p>The request in perl</p>

<pre><code class="language-perl"><span class="c1">#!/usr/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Getopt::</span><span class="n">Long</span><span class="p">;</span>
<span class="k">use</span> <span class="n">Switch</span> <span class="s">'Perl5'</span><span class="p">,</span> <span class="s">'Perl6'</span><span class="p">;</span>
<span class="k">use</span> <span class="n">JSON</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$fullargv0</span> <span class="o">=</span> <span class="nv">$0</span><span class="p">;</span>
<span class="k">my</span> <span class="p">(</span><span class="nv">$argv0</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$fullargv0</span> <span class="o">=~</span><span class="sr"> /([^\/\\]+)$/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">%settings</span> <span class="o">=</span> <span class="p">(</span>
<span class="s">'debug'</span> <span class="o">=&gt;</span> <span class="s">'False'</span><span class="p">,</span>
<span class="s">'handle'</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="s">'action'</span> <span class="o">=&gt;</span><span class="s">'delete'</span><span class="p">,</span>
	<span class="s">'credentials'</span> 	<span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'username'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'password'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'baseuri'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'data'</span>	<span class="o">=&gt;</span><span class="p">{</span>
		<span class="s">'get'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
		<span class="s">'putpost'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'format'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'headerextra'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="s">'type'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'url'</span><span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'pid'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
<span class="p">},</span>
<span class="p">);</span>

<span class="c1"># Main subroutine</span>
<span class="k">sub </span><span class="nf">main</span> <span class="p">{</span>

	<span class="c1">#Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Get the script arguments</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">)</span> <span class="o">=</span> <span class="n">get_arguments</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span>

	<span class="k">if</span><span class="p">(</span> <span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> 
		<span class="n">performDelete</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span> 

	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>
<span class="p">}</span>
 
<span class="c1"># Subroutine to perform a DELETE action</span>
<span class="k">sub </span><span class="nf">performDelete</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1">#construct url</span>
	<span class="k">my</span> <span class="nv">$url</span><span class="o">=</span><span class="s">"$settings_ref-&gt;{handle}-&gt;{credentials}-&gt;{baseuri}$settings_ref-&gt;{handle}-&gt;{url}-&gt;{pid}"</span><span class="p">;</span>
	<span class="nb">printf</span><span class="p">(</span><span class="s">"The constructed url is        : %s\n"</span><span class="p">,</span><span class="nv">$url</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="c1"># perform action</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_content_type</span> <span class="p">)</span> <span class="o">=</span> <span class="n">httpDelete</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">,</span> <span class="nv">$url</span> <span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">);</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'An error happened\n'</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="c1"># reader helper calback function</span>
<span class="k">sub </span><span class="nf">read_callback</span> <span class="p">{</span>
	<span class="k">my</span> <span class="p">(</span><span class="nv">$maxlength</span><span class="p">,</span><span class="nv">$pointer</span><span class="p">)</span><span class="o">=</span><span class="nv">@_</span><span class="p">;</span>
	<span class="c1"># printf("The MAXLENGTH is     : \n", $maxlength);</span>
	<span class="c1"># printf("The POINTER is       : \n", $$pointer) ;</span>
	<span class="k">my</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$$pointer</span><span class="p">;</span>
	<span class="nv">$$pointer</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1"># Subroutine delete via a http DELETE</span>
<span class="k">sub </span><span class="nf">httpDelete</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="k">print</span><span class="p">(</span><span class="s">'Entering httpDelete           :\n'</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

	<span class="c1"># local varables</span>
	<span class="k">my</span> <span class="nv">$body</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_code</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_content_type</span><span class="p">;</span>

	<span class="k">my</span> <span class="nv">$curl</span> <span class="o">=</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>

	<span class="c1"># set options for the curl http request</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_NOBODY</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_CUSTOMREQUEST</span><span class="p">,</span> <span class="s">'DELETE'</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_USERNAME</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">});</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_PASSWORD</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">});</span>

	<span class="c1">#debugging</span>
	<span class="c1">#$curl-&gt;setopt (CURLOPT_VERBOSE, 1);</span>

	<span class="c1"># Do the actual curl http request</span>
	<span class="k">my</span> <span class="nv">$returncode</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">perform</span><span class="p">;</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="nv">$response_code</span>         <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_HTTP_CODE</span><span class="p">);</span>
		<span class="nv">$response_content_type</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_CONTENT_TYPE</span><span class="p">);</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response code        : $response_code\n"</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response content type: $response_content_type\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="c1"># Error code, type of error, error message</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"An error happened: $returncode "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">strerror</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">)</span><span class="o">.</span><span class="s">" "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">errbuf</span><span class="o">.</span><span class="s">"\n"</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">,</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="nv">$response_content_type</span> <span class="p">);</span>
<span class="p">}</span>
<span class="c1"># Subroutine to get and check all script arguments</span>
<span class="k">sub </span><span class="nf">get_arguments</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Define local variables</span>
	<span class="k">my</span> <span class="nv">%arguments</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$username</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$password</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$baseUri</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$pidUrl</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$credentials</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$handleData</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$type</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$returncode</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$message</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">@sources</span><span class="p">;</span>

	<span class="n">GetOptions</span><span class="p">(</span> <span class="s">'h|help'</span>    <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">},</span>
		<span class="s">'user=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$username</span><span class="p">,</span>
		<span class="s">'passwd=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$password</span><span class="p">,</span>
		<span class="s">'base=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$baseUri</span><span class="p">,</span>
		<span class="s">'pid=s'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$pidUrl</span><span class="p">,</span>
		<span class="s">'cred=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$credentials</span><span class="p">,</span>
		<span class="s">'data=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$handleData</span><span class="p">,</span>
		<span class="s">'type=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$type</span><span class="p">,</span>
		<span class="s">'header=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$header</span><span class="p">,</span>
		<span class="s">'get'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">},</span>
		<span class="s">'put'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">},</span>
		<span class="s">'delete'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">},</span>
		<span class="s">'post'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">},</span>
		<span class="s">'pretty'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">},</span>
		<span class="s">'d|debug'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">},</span>
	<span class="p">);</span>

	<span class="c1"># Check the help flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># Set the returncode</span>
		<span class="nv">$returncode</span><span class="o">=</span><span class="mi">255</span><span class="p">;</span>

		<span class="nv">$message</span> <span class="o">=</span> <span class="n">print_help</span><span class="p">();</span>
	<span class="p">}</span>
	
	<span class="c1"># Check the debug flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=</span> <span class="s">'True'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'debug is                      : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the pretty flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=</span> <span class="s">'pretty'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'pretty format printing is     : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the action flag's (get,put,delete,post,search,nagios)</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'get'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'put'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'delete'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'post'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the username</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$username</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$username</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the password</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$password</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$password</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the base uri</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$baseUri</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$baseUri</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the pid url</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$pidUrl</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$pidUrl</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The pid is                    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the handle data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$handleData</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$handleData</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The data is                   : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the type data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$type</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$type</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The type(s) to show is/are    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>
	
	<span class="c1"># check the header data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$header</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$header</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The extra header info is      : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the credentials data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$credentials</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># read the credentials from the file</span>
		<span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$credentials</span><span class="p">;</span>
		<span class="k">my</span> <span class="nv">$json_text</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span>
			<span class="nb">open</span><span class="p">(</span><span class="k">my</span> <span class="nv">$json_fh</span><span class="p">,</span> <span class="s">"&lt;:encoding(UTF-8)"</span><span class="p">,</span> <span class="nv">$filename</span><span class="p">)</span>  <span class="ow">or</span> <span class="nb">die</span><span class="p">(</span><span class="s">"Can't open $filename: $!\n"</span><span class="p">);</span>
			<span class="nb">local</span> <span class="vg">$/</span><span class="p">;</span>
			<span class="sr">&lt;$json_fh&gt;</span>
		<span class="p">};</span>

		<span class="c1"># convert from json and put in correct place </span>
		<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$json_text</span><span class="p">);</span>

		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="p">}</span>

	<span class="c1"># Print the message</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$message</span> <span class="p">)</span> <span class="p">{</span>

		<span class="k">print</span> <span class="s">"$message\n"</span><span class="p">;</span>
	<span class="p">};</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>

<span class="p">};</span></code></pre>

;T;	I""
The request in perl

<pre><code class="language-perl">

#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;
use Switch 'Perl5', 'Perl6';
use JSON;
use WWW::Curl::Easy;

my $fullargv0 = $0;
my ($argv0) = $fullargv0 =~ /([^\/\\]+)$/;

my %settings = (
'debug' => 'False',
'handle' => {
	'action' =>'delete',
	'credentials' 	=>	{
		'username'	=> 'empty',
		'password'	=> 'empty',
		'baseuri'	=> 'empty',
	},
	'data'	=>{
		'get'	=> '',
		'putpost'=> '',
	},
	'format' => 'none',
	'headerextra'	=> '',
	'type' => 'none',
	'url'=>	{
		'pid'=> '',
	},
},
);

# Main subroutine
sub main {

	#Get the subroutine arguments
	my $settings_ref = shift;

	# Get the script arguments
	(my $returncode) = get_arguments($settings_ref);

	if( $returncode == 0 ) 
		performDelete($settings_ref); 

	return($returncode);
}
 
# Subroutine to perform a DELETE action
sub performDelete {

	# Get the subroutine arguments
	my $settings_ref = shift;

	#construct url
	my $url="$settings_ref->{handle}->{credentials}->{baseuri}$settings_ref->{handle}->{url}->{pid}";
	printf("The constructed url is        : %s\n",$url) if $settings_ref->{debug} =~ /True/ ;

	# perform action
	(my $returncode, my $response_code, my $response_content_type ) = httpDelete($settings_ref, $url );

	# Looking at the results of the curl request
	if ($returncode == 0) {
		print('Transfer went ok\n') if $settings_ref->{debug} =~ /True/ ;

		# judge result and next action based on $response_code
		if ($response_code >= 200 && $response_code < 300 ) {
			print('The request went ok\n') if $settings_ref->{debug} =~ /True/ ;
		} else {
			print('The request went NOT ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_code\n");
		} 

	} else {
		print('An error happened\n');
	}
}
# reader helper calback function
sub read_callback {
	my ($maxlength,$pointer)=@_;
	# printf("The MAXLENGTH is     : \n", $maxlength);
	# printf("The POINTER is       : \n", $$pointer) ;
	my $data = $$pointer;
	$$pointer = "";
	return $data;
}

# Subroutine delete via a http DELETE
sub httpDelete {

	# Get the subroutine arguments
	my $settings_ref = shift;
	my $url = shift;

	print('Entering httpDelete           :\n')         if $settings_ref->{debug} =~ /True/;

	# local varables
	my $body = "";
	my $header = "";
	my $response_code;
	my $response_content_type;

	my $curl = WWW::Curl::Easy->new;

	# set options for the curl http request
	$curl->setopt(CURLOPT_HEADER, 0);
	$curl->setopt(CURLOPT_NOBODY, 1);
	$curl->setopt(CURLOPT_CUSTOMREQUEST, 'DELETE');
	$curl->setopt(CURLOPT_URL, $url);
	$curl->setopt(CURLOPT_USERNAME, $settings_ref->{handle}->{credentials}->{username});
	$curl->setopt(CURLOPT_PASSWORD, $settings_ref->{handle}->{credentials}->{password});

	#debugging
	#$curl->setopt (CURLOPT_VERBOSE, 1);

	# Do the actual curl http request
	my $returncode = $curl->perform;

	# Looking at the results of the curl request
	if ($returncode == 0) {
		print('Transfer went ok\n') if $settings_ref->{debug} =~ /True/ ;

		$response_code         = $curl->getinfo(CURLINFO_HTTP_CODE);
		$response_content_type = $curl->getinfo(CURLINFO_CONTENT_TYPE);
		print("Received response code        : $response_code\n")         if $settings_ref->{debug} =~ /True/;
		print("Received response content type: $response_content_type\n") if $settings_ref->{debug} =~ /True/;

		# judge result and next action based on $response_code
		if ($response_code >= 200 && $response_code < 300 ) {
			print('The request went ok\n') if $settings_ref->{debug} =~ /True/ ;
		} else {
			print('The request went NOT ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_code\n") if $settings_ref->{debug} =~ /True/ ;
		} 

	} else {
		# Error code, type of error, error message
		print("An error happened: $returncode ".$curl->strerror($returncode)." ".$curl->errbuf."\n");
	}

	# Return the results
	return($returncode, $response_code, $response_content_type );
}
# Subroutine to get and check all script arguments
sub get_arguments {

	# Get the subroutine arguments
	my $settings_ref = shift;

	# Define local variables
	my %arguments;
	my $username;
	my $password;
	my $baseUri;
	my $pidUrl;
	my $credentials;
	my $handleData;
	my $type;
	my $header;
	my $returncode=0;
	my $message;
	my @sources;

	GetOptions( 'h|help'    => \$arguments{help},
		'user=s'		=> \$username,
		'passwd=s'		=> \$password,
		'base=s'		=> \$baseUri,
		'pid=s'			=> \$pidUrl,
		'cred=s'		=> \$credentials,
		'data=s'		=> \$handleData,
		'type=s'		=> \$type,
		'header=s'		=> \$header,
		'get'			=> \$arguments{get},
		'put'			=> \$arguments{put},
		'delete'		=> \$arguments{delete},
		'post'			=> \$arguments{post},
		'pretty'		=> \$arguments{pretty},
		'd|debug'		=> \$arguments{debug},
	);

	# Check the help flag
	if( $arguments{help} ) {

		# Set the returncode
		$returncode=255;

		$message = print_help();
	}
	
	# Check the debug flag
	if( $arguments{debug} ) {

		$settings_ref->{debug} = 'True';
		printf('debug is                      : on\n') if $settings_ref->{debug} =~ /True/ ;

	}

	# Check the pretty flag
	if( $arguments{pretty} ) {

		$settings_ref->{handle}->{format} = 'pretty';
		printf('pretty format printing is     : on\n') if $settings_ref->{debug} =~ /True/ ;

	}

	# Check the action flag's (get,put,delete,post,search,nagios)
	if( $arguments{get} ) {

		$settings_ref->{handle}->{action} = 'get';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{put} ) {

		$settings_ref->{handle}->{action} = 'put';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{delete} ) {

		$settings_ref->{handle}->{action} = 'delete';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{post} ) {

		$settings_ref->{handle}->{action} = 'post';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the username
	if( $username ) {

		$settings_ref->{handle}->{credentials}->{username} = $username;
		printf("The username is               : %s\n",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the password
	if( $password ) {

		$settings_ref->{handle}->{credentials}->{password} = $password;
		printf("The password is               : %s\n",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the base uri
	if( $baseUri ) {

		$settings_ref->{handle}->{credentials}->{baseuri} = $baseUri;
		printf("The base uri is               : %s\n",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the pid url
	if( $pidUrl ) {

		$settings_ref->{handle}->{url}->{pid} = $pidUrl;
		printf("The pid is                    : %s\n",$settings_ref->{handle}->{url}->{pid}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the handle data
	if( $handleData ) {

		$settings_ref->{handle}->{data}->{putpost} = $handleData;
		printf("The data is                   : %s\n",$settings_ref->{handle}->{data}->{putpost}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the type data
	if( $type ) {

		$settings_ref->{handle}->{type} = $type;
		printf("The type(s) to show is/are    : %s\n",$settings_ref->{handle}->{type}) if $settings_ref->{debug} =~ /True/ ;

	}
	
	# check the header data
	if( $header ) {

		$settings_ref->{handle}->{headerextra} = $header;
		printf("The extra header info is      : %s\n",$settings_ref->{handle}->{headerextra}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the credentials data
	if( $credentials ) {

		# read the credentials from the file
		my $filename = $credentials;
		my $json_text = do {
			open(my $json_fh, "<:encoding(UTF-8)", $filename)  or die("Can't open $filename: $!\n");
			local $/;
			<$json_fh>
		};

		# convert from json and put in correct place 
		my $json = JSON->new;
		$settings_ref->{handle}->{credentials} = $json->decode($json_text);

		printf("The username is               : %s\n",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;
		printf("The password is               : %s\n",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;
		printf("The base uri is               : %s\n",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;
	}

	# Print the message
	if( $message ) {

		print "$message\n";
	};

	# Return the results
	return($returncode);

};

</code></pre>

;T;
@NI" /guides/examples/deletephp/;T{;{;I"D
<p>The request in php </p>

<pre><code class="language-php5"><span class="nv">$PIDSERVICE_URL</span><span class="o">=</span><span class="s2">"THE_SERVICE_URL_WITH_PREFIX"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_USER</span><span class="o">=</span><span class="s2">"YOURUSERNAME"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s2">"YOURPASSWORD"</span><span class="p">;</span>
<span class="nv">$HANDLENAME</span><span class="o">=</span><span class="s2">"05C3DB56-5692-11E3-AF8F-1C6F65A666B5"</span><span class="p">;</span>
<span class="nv">$PIDTODELETE</span><span class="o">=</span> <span class="nv">$PIDSERVICE_URL</span><span class="o">.</span><span class="nv">$HANDLENAME</span><span class="p">;</span>
<span class="c1">// Get cURL resource</span>
<span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>

<span class="c1">// Set the url to authenticate</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span><span class="nx">CURLOPT_URL</span><span class="p">,</span><span class="nv">$PIDTODELETE</span><span class="p">);</span>
<span class="c1">// Set the authentication options</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_USERPWD</span><span class="p">,</span> <span class="nv">$PIDSERVICE_USER</span><span class="o">.</span><span class="s2">":"</span><span class="o">.</span><span class="nv">$PIDSERVICE_PASSWD</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPAUTH</span><span class="p">,</span> <span class="nx">CURLAUTH_BASIC</span><span class="p">);</span>

<span class="c1">//set the DELETE action</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_CUSTOMREQUEST</span><span class="p">,</span> <span class="s2">"DELETE"</span><span class="p">);</span>

<span class="c1">// Include header in result? (0 = yes, 1 = no)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="c1">// Should cURL return or print out the data? (true = return, false = print)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">// Download the given URL, and return output</span>
<span class="nv">$output</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
<span class="nv">$info</span> <span class="o">=</span> <span class="nb">curl_getinfo</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">204</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"The PID was successfully deleted"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">401</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Authorization failed: Either your login or your password is wrong."</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">403</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"HTTP/1.1 403 Forbidden: The operation is not permitted."</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">405</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"HTTP/1.1 405 Method Not Allowed: The submitted url with PID is wrong"</span><span class="p">;</span>

<span class="c1">// Close the cURL resource, and free system resources</span>
<span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span></code></pre>

;T;	I"ã
The request in php 

<pre><code class="language-php5">
$PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX";
$PIDSERVICE_USER="YOURUSERNAME";
$PIDSERVICE_PASSWD="YOURPASSWORD";
$HANDLENAME="05C3DB56-5692-11E3-AF8F-1C6F65A666B5";
$PIDTODELETE= $PIDSERVICE_URL.$HANDLENAME;
// Get cURL resource
$curl = curl_init();

// Set the url to authenticate
curl_setopt($curl,CURLOPT_URL,$PIDTODELETE);
// Set the authentication options
curl_setopt($curl, CURLOPT_USERPWD, $PIDSERVICE_USER.":".$PIDSERVICE_PASSWD);
curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);

//set the DELETE action
curl_setopt($curl, CURLOPT_CUSTOMREQUEST, "DELETE");

// Include header in result? (0 = yes, 1 = no)
curl_setopt($curl, CURLOPT_HEADER, 0);
// Should cURL return or print out the data? (true = return, false = print)
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

// Download the given URL, and return output
$output = curl_exec($curl);
$info = curl_getinfo($curl);
if( $info['http_code']==204) echo "The PID was successfully deleted";
if( $info['http_code']==401) echo "Authorization failed: Either your login or your password is wrong.";
if( $info['http_code']==403) echo "HTTP/1.1 403 Forbidden: The operation is not permitted.<br/>";
if( $info['http_code']==405) echo "HTTP/1.1 405 Method Not Allowed: The submitted url with PID is wrong<br/>";

// Close the cURL resource, and free system resources
curl_close($curl);
</code></pre>



;T;
@SI"#/guides/examples/deletepython/;T{;{;I"1
<p>The request in python</p>

<pre><code class="language-python"><span class="kn">import</span> <span class="nn">urllib2</span>

<span class="n">PIDSERVICE_URL</span><span class="o">=</span><span class="s">"THE_SERVICE_URL_WITH_PREFIX"</span>
<span class="n">PIDSERVICE_USER</span><span class="o">=</span><span class="s">"YOURUSERNAME"</span>
<span class="n">PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s">"YOURPASSWORD"</span>
<span class="n">HANDLENAME</span><span class="o">=</span><span class="s">"05C3DB56-5692-11E3-AF8F-1C6F65A666B5"</span>
<span class="n">URL_TO_OPEN</span><span class="o">=</span><span class="n">PIDSERVICE_URL</span><span class="o">+</span><span class="n">HANDLENAME</span>
<span class="n">DATAURL</span><span class="o">=</span><span class="s">""</span>

<span class="c"># create a password manager</span>
<span class="n">password_mgr</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPPasswordMgrWithDefaultRealm</span><span class="p">()</span>

<span class="c"># Add the username and password.</span>
<span class="n">password_mgr</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">PIDSERVICE_URL</span><span class="p">,</span> <span class="n">PIDSERVICE_USER</span><span class="p">,</span> <span class="n">PIDSERVICE_PASSWD</span><span class="p">)</span>

<span class="n">handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">(</span><span class="n">password_mgr</span><span class="p">)</span>

<span class="c"># create "opener" (OpenerDirector instance)</span>
<span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>

<span class="c"># use the opener to fetch a URL</span>
<span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">URL_TO_OPEN</span><span class="p">)</span>

<span class="c"># Install the opener.</span>
<span class="c"># Now all calls to urllib2.urlopen use our opener.</span>
<span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>

<span class="c">#http://stackoverflow.com/questions/2407126/python-urllib2-basic-auth-problem</span>
<span class="n">REQUESTDATA</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">URL_TO_OPEN</span><span class="p">)</span>
<span class="c"># creates the delete method</span>
<span class="n">REQUESTDATA</span><span class="o">.</span><span class="n">get_method</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="s">'DELETE'</span>

<span class="k">try</span><span class="p">:</span>
        <span class="n">DATAURL</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">REQUESTDATA</span><span class="p">)</span>
<span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">"404-Not found"</span>
        <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">401</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">"401-Authentication failed"</span>
        <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">403</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">"403-Not permitted"</span></code></pre>

;T;	I"
The request in python

<pre><code class="language-python">
import urllib2

PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX"
PIDSERVICE_USER="YOURUSERNAME"
PIDSERVICE_PASSWD="YOURPASSWORD"
HANDLENAME="05C3DB56-5692-11E3-AF8F-1C6F65A666B5"
URL_TO_OPEN=PIDSERVICE_URL+HANDLENAME
DATAURL=""

# create a password manager
password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()

# Add the username and password.
password_mgr.add_password(None, PIDSERVICE_URL, PIDSERVICE_USER, PIDSERVICE_PASSWD)

handler = urllib2.HTTPBasicAuthHandler(password_mgr)

# create "opener" (OpenerDirector instance)
opener = urllib2.build_opener(handler)

# use the opener to fetch a URL
opener.open(URL_TO_OPEN)

# Install the opener.
# Now all calls to urllib2.urlopen use our opener.
urllib2.install_opener(opener)

#http://stackoverflow.com/questions/2407126/python-urllib2-basic-auth-problem
REQUESTDATA = urllib2.Request(URL_TO_OPEN)
# creates the delete method
REQUESTDATA.get_method = lambda: 'DELETE'

try:
        DATAURL = urllib2.urlopen(REQUESTDATA)
except urllib2.URLError, e:
        if e.code == 404:
                print "404-Not found"
        if e.code == 401:
                print "401-Authentication failed"
        if e.code == 403:
                print "403-Not permitted"

</code></pre>

;T;
@XI" /guides/examples/deleteres/;T{;{;I"P<h3 id="the-response">The response:</h3>
<ul>
  <li>HTTP/1.1 204 No Content: (Success)</li>
  <li>HTTP/1.1 401 Unauthorized: Your username or your password is wrong</li>
  <li>HTTP/1.1 404 Not found: The resource doesn‚Äôt exist</li>
  <li>HTTP/1.1 403 Forbidden: The operation is not permitted</li>
  <li>HTTP/1.1 405 Method Not Allowed: The submitted url with PID is wrong</li>
</ul>

<pre><code>
&gt; DELETE /handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5 HTTP/1.1
&gt; Authorization: Basic Y2xhcmluLWVsOjUxMjdkZWIxZTJjNg==
&gt; User-Agent: curl/7.22.0 (i686-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3
&gt; Host: epic.grnet.gr
&gt; Accept:application/json
&gt; Content-Type:application/json
&gt;
&lt; HTTP/1.1 204 No Content
&lt; Date: Fri, 22 Nov 2013 13:05:14 GMT
&lt; Content-Length: 0
</code></pre>

;T;	I"‚### The response:
- HTTP/1.1 204 No Content: (Success)
- HTTP/1.1 401 Unauthorized: Your username or your password is wrong
- HTTP/1.1 404 Not found: The resource doesn't exist
- HTTP/1.1 403 Forbidden: The operation is not permitted
- HTTP/1.1 405 Method Not Allowed: The submitted url with PID is wrong

<pre><code>
> DELETE /handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5 HTTP/1.1
> Authorization: Basic Y2xhcmluLWVsOjUxMjdkZWIxZTJjNg==
> User-Agent: curl/7.22.0 (i686-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3
> Host: epic.grnet.gr
> Accept:application/json
> Content-Type:application/json
>
< HTTP/1.1 204 No Content
< Date: Fri, 22 Nov 2013 13:05:14 GMT
< Content-Length: 0
</code></pre>


;T;
@]I"#/guides/examples/generatecurl/;T{;{;I"1<p>The request in curl</p>

<pre><code>
curl -v -u "YOURUSERNAME:YOURPASSWORD" -H "Accept:application/json" -H "Content-Type:application/json" -X POST --data '[{"type":"URL","parsed_data":"http://www.grnet.gr/"}]' https://epic.grnet.gr/api/v2/handles/11239/\?prefix=GRNET\&amp;suffix=TEST

</code></pre>

;T;	I"&The request in curl

<pre><code>
curl -v -u "YOURUSERNAME:YOURPASSWORD" -H "Accept:application/json" -H "Content-Type:application/json" -X POST --data '[{"type":"URL","parsed_data":"http://www.grnet.gr/"}]' https://epic.grnet.gr/api/v2/handles/11239/\?prefix=GRNET\&suffix=TEST

</code></pre>

;T;
@bI"#/guides/examples/generateperl/;T{;{;I"ø
<p>The request in perl</p>

<pre><code class="language-perl"><span class="c1">#!/usr/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Getopt::</span><span class="n">Long</span><span class="p">;</span>
<span class="k">use</span> <span class="n">Switch</span> <span class="s">'Perl5'</span><span class="p">,</span> <span class="s">'Perl6'</span><span class="p">;</span>
<span class="k">use</span> <span class="n">JSON</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$fullargv0</span> <span class="o">=</span> <span class="nv">$0</span><span class="p">;</span>
<span class="k">my</span> <span class="p">(</span><span class="nv">$argv0</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$fullargv0</span> <span class="o">=~</span><span class="sr"> /([^\/\\]+)$/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">%settings</span> <span class="o">=</span> <span class="p">(</span>
<span class="s">'debug'</span> <span class="o">=&gt;</span> <span class="s">'False'</span><span class="p">,</span>
<span class="s">'handle'</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="s">'action'</span> <span class="o">=&gt;</span><span class="s">'put'</span><span class="p">,</span>
	<span class="s">'credentials'</span> 	<span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'username'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'password'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'baseuri'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'data'</span>	<span class="o">=&gt;</span><span class="p">{</span>
		<span class="s">'get'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
		<span class="s">'putpost'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'format'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'headerextra'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="s">'type'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'url'</span><span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'pid'</span><span class="o">=&gt;</span> <span class="s">'prefix=GRNET&amp;suffix=TEST'</span><span class="p">,</span>
	<span class="p">},</span>
<span class="p">},</span>
<span class="p">);</span>

<span class="c1"># Main subroutine</span>
<span class="k">sub </span><span class="nf">main</span> <span class="p">{</span>

	<span class="c1">#Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Get the script arguments</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">)</span> <span class="o">=</span> <span class="n">get_arguments</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span>

	<span class="k">if</span><span class="p">(</span> <span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> 
	 <span class="n">performPost</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span>

	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>
<span class="p">}</span>
 
<span class="c1"># Subroutine to perform a POST action</span>
<span class="k">sub </span><span class="nf">performPost</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1">#construct url and headers</span>
	<span class="k">my</span> <span class="nv">$url</span><span class="o">=</span><span class="s">"$settings_ref-&gt;{handle}-&gt;{credentials}-&gt;{baseuri}$settings_ref-&gt;{handle}-&gt;{url}-&gt;{pid}"</span><span class="p">;</span>
	<span class="nb">printf</span><span class="p">(</span><span class="s">"The constructed url is        : %s\n"</span><span class="p">,</span><span class="nv">$url</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="k">my</span> <span class="nv">@httpHeaders</span> <span class="o">=</span> <span class="p">(</span> <span class="s">'Content-Type: application/json'</span> <span class="p">);</span>

	<span class="c1">#construct data</span>
	<span class="k">my</span> <span class="nv">$data</span><span class="o">=</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">};</span>
	<span class="nb">printf</span><span class="p">(</span><span class="s">"The data is                   : %s\n"</span><span class="p">,</span><span class="nv">$data</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="c1"># perform action</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_content_type</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_url</span> <span class="p">)</span> <span class="o">=</span> <span class="n">httpPost</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">,</span> <span class="nv">$url</span><span class="p">,</span> <span class="o">\</span><span class="nv">@httpHeaders</span><span class="p">,</span> <span class="nv">$data</span> <span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_url\n"</span><span class="p">);</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">);</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'An error happened\n'</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1"># reader helper calback function</span>
<span class="k">sub </span><span class="nf">read_callback</span> <span class="p">{</span>
	<span class="k">my</span> <span class="p">(</span><span class="nv">$maxlength</span><span class="p">,</span><span class="nv">$pointer</span><span class="p">)</span><span class="o">=</span><span class="nv">@_</span><span class="p">;</span>
	<span class="c1"># printf("The MAXLENGTH is     : \n", $maxlength);</span>
	<span class="c1"># printf("The POINTER is       : \n", $$pointer) ;</span>
	<span class="k">my</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$$pointer</span><span class="p">;</span>
	<span class="nv">$$pointer</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1"># Subroutine to post data via a http POST</span>
<span class="k">sub </span><span class="nf">httpPost</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$httpHeaders_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="k">print</span><span class="p">(</span><span class="s">'Entering httpPost             :\n'</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

	<span class="c1"># local varables</span>
	<span class="k">my</span> <span class="nv">$body</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_body</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_code</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_content_type</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_url</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>

	<span class="k">my</span> <span class="nv">$curl</span> <span class="o">=</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>

	<span class="c1"># set options for the curl http request</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="nv">$httpHeaders_ref</span> <span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_POST</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_POSTFIELDS</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_POSTFIELDSIZE</span><span class="p">,</span> <span class="nb">length</span><span class="p">(</span><span class="nv">$data</span><span class="p">))</span> <span class="p">;</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_USERNAME</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">});</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_PASSWORD</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">});</span>

	<span class="c1">#debugging</span>
	<span class="c1">#$curl-&gt;setopt (CURLOPT_VERBOSE, 1);</span>

	<span class="c1"># A filehandle, reference to a scalar or reference to a typeglob can be used here.</span>
	<span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">'&gt;:encoding(UTF-8)'</span><span class="p">,</span> <span class="o">\</span><span class="nv">$response_body</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">"$!"</span><span class="p">;</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_WRITEDATA</span><span class="p">,</span> <span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Do the actual curl http request</span>
	<span class="k">my</span> <span class="nv">$returncode</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">perform</span><span class="p">;</span>

	<span class="c1"># close file handle</span>
	<span class="nb">close</span><span class="p">(</span><span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nv">$response_code</span>         <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_HTTP_CODE</span><span class="p">);</span>
		<span class="nv">$response_content_type</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_CONTENT_TYPE</span><span class="p">);</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response code        : $response_code\n"</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response content type: $response_content_type\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_body\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
			<span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">'&lt;:encoding(UTF-8)'</span><span class="p">,</span> <span class="o">\</span><span class="nv">$response_body</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">"$!"</span><span class="p">;</span>
			<span class="k">while</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$row</span> <span class="o">=</span> <span class="sr">&lt;$fh&gt;</span><span class="p">)</span> <span class="p">{</span>
				<span class="nb">chomp</span> <span class="nv">$row</span><span class="p">;</span>
				<span class="k">print</span> <span class="s">"row: $row\n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
				<span class="k">if</span> <span class="p">(</span> <span class="nv">$row</span> <span class="o">=~</span><span class="sr"> /^Location/</span> <span class="p">)</span> <span class="p">{</span>
					<span class="nv">$response_url</span> <span class="o">=</span> <span class="nv">$row</span><span class="p">;</span>
					<span class="nv">$response_url</span> <span class="o">=~</span> <span class="sr">s/^Location: //</span> <span class="p">;</span>
					<span class="k">print</span><span class="p">(</span><span class="s">"Received response url         : $response_url\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
					<span class="k">last</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>

		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="c1"># Error code, type of error, error message</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"An error happened: $returncode "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">strerror</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">)</span><span class="o">.</span><span class="s">" "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">errbuf</span><span class="o">.</span><span class="s">"\n"</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">,</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="nv">$response_content_type</span><span class="p">,</span> <span class="nv">$response_url</span> <span class="p">);</span>
<span class="p">}</span>

<span class="c1"># Subroutine to get and check all script arguments</span>
<span class="k">sub </span><span class="nf">get_arguments</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Define local variables</span>
	<span class="k">my</span> <span class="nv">%arguments</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$username</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$password</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$baseUri</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$pidUrl</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$credentials</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$handleData</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$type</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$returncode</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$message</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">@sources</span><span class="p">;</span>

	<span class="n">GetOptions</span><span class="p">(</span> <span class="s">'h|help'</span>    <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">},</span>
		<span class="s">'user=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$username</span><span class="p">,</span>
		<span class="s">'passwd=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$password</span><span class="p">,</span>
		<span class="s">'base=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$baseUri</span><span class="p">,</span>
		<span class="s">'pid=s'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$pidUrl</span><span class="p">,</span>
		<span class="s">'cred=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$credentials</span><span class="p">,</span>
		<span class="s">'data=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$handleData</span><span class="p">,</span>
		<span class="s">'type=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$type</span><span class="p">,</span>
		<span class="s">'header=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$header</span><span class="p">,</span>
		<span class="s">'get'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">},</span>
		<span class="s">'put'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">},</span>
		<span class="s">'delete'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">},</span>
		<span class="s">'post'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">},</span>
		<span class="s">'pretty'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">},</span>
		<span class="s">'d|debug'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">},</span>
	<span class="p">);</span>

	<span class="c1"># Check the help flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># Set the returncode</span>
		<span class="nv">$returncode</span><span class="o">=</span><span class="mi">255</span><span class="p">;</span>

		<span class="nv">$message</span> <span class="o">=</span> <span class="n">print_help</span><span class="p">();</span>
	<span class="p">}</span>
	
	<span class="c1"># Check the debug flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=</span> <span class="s">'True'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'debug is                      : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the pretty flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=</span> <span class="s">'pretty'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'pretty format printing is     : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the action flag's (get,put,delete,post,search,nagios)</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'get'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'put'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'delete'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'post'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the username</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$username</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$username</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the password</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$password</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$password</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the base uri</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$baseUri</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$baseUri</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the pid url</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$pidUrl</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$pidUrl</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The pid is                    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the handle data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$handleData</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$handleData</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The data is                   : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the type data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$type</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$type</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The type(s) to show is/are    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>
	
	<span class="c1"># check the header data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$header</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$header</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The extra header info is      : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the credentials data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$credentials</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># read the credentials from the file</span>
		<span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$credentials</span><span class="p">;</span>
		<span class="k">my</span> <span class="nv">$json_text</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span>
			<span class="nb">open</span><span class="p">(</span><span class="k">my</span> <span class="nv">$json_fh</span><span class="p">,</span> <span class="s">"&lt;:encoding(UTF-8)"</span><span class="p">,</span> <span class="nv">$filename</span><span class="p">)</span>  <span class="ow">or</span> <span class="nb">die</span><span class="p">(</span><span class="s">"Can't open $filename: $!\n"</span><span class="p">);</span>
			<span class="nb">local</span> <span class="vg">$/</span><span class="p">;</span>
			<span class="sr">&lt;$json_fh&gt;</span>
		<span class="p">};</span>

		<span class="c1"># convert from json and put in correct place </span>
		<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$json_text</span><span class="p">);</span>

		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="p">}</span>

	<span class="c1"># Print the message</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$message</span> <span class="p">)</span> <span class="p">{</span>

		<span class="k">print</span> <span class="s">"$message\n"</span><span class="p">;</span>
	<span class="p">};</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>

<span class="p">};</span></code></pre>

;T;	I"Ã&
The request in perl

<pre><code class="language-perl">

#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;
use Switch 'Perl5', 'Perl6';
use JSON;
use WWW::Curl::Easy;

my $fullargv0 = $0;
my ($argv0) = $fullargv0 =~ /([^\/\\]+)$/;

my %settings = (
'debug' => 'False',
'handle' => {
	'action' =>'put',
	'credentials' 	=>	{
		'username'	=> 'empty',
		'password'	=> 'empty',
		'baseuri'	=> 'empty',
	},
	'data'	=>{
		'get'	=> '',
		'putpost'=> '',
	},
	'format' => 'none',
	'headerextra'	=> '',
	'type' => 'none',
	'url'=>	{
		'pid'=> 'prefix=GRNET&suffix=TEST',
	},
},
);

# Main subroutine
sub main {

	#Get the subroutine arguments
	my $settings_ref = shift;

	# Get the script arguments
	(my $returncode) = get_arguments($settings_ref);

	if( $returncode == 0 ) 
	 performPost($settings_ref);

	return($returncode);
}
 
# Subroutine to perform a POST action
sub performPost {

	# Get the subroutine arguments
	my $settings_ref = shift;

	#construct url and headers
	my $url="$settings_ref->{handle}->{credentials}->{baseuri}$settings_ref->{handle}->{url}->{pid}";
	printf("The constructed url is        : %s\n",$url) if $settings_ref->{debug} =~ /True/ ;
	my @httpHeaders = ( 'Content-Type: application/json' );

	#construct data
	my $data=$settings_ref->{handle}->{data}->{putpost};
	printf("The data is                   : %s\n",$data) if $settings_ref->{debug} =~ /True/ ;

	# perform action
	(my $returncode, my $response_code, my $response_content_type, my $response_url ) = httpPost($settings_ref, $url, \@httpHeaders, $data );

	# Looking at the results of the curl request
	if ($returncode == 0) {
		print('Transfer went ok\n') if $settings_ref->{debug} =~ /True/ ;

		# judge result and next action based on $response_code
		if ($response_code >= 200 && $response_code < 300 ) {
			print('The request went ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_url\n");
		} else {
			print('The request went NOT ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_code\n");
		} 

	} else {
		print('An error happened\n');
	}
}

# reader helper calback function
sub read_callback {
	my ($maxlength,$pointer)=@_;
	# printf("The MAXLENGTH is     : \n", $maxlength);
	# printf("The POINTER is       : \n", $$pointer) ;
	my $data = $$pointer;
	$$pointer = "";
	return $data;
}

# Subroutine to post data via a http POST
sub httpPost {

	# Get the subroutine arguments
	my $settings_ref = shift;
	my $url = shift;
	my $httpHeaders_ref = shift;
	my $data = shift;

	print('Entering httpPost             :\n')         if $settings_ref->{debug} =~ /True/;

	# local varables
	my $body = "";
	my $header = "";
	my $response_body;
	my $response_code;
	my $response_content_type;
	my $response_url = "";

	my $curl = WWW::Curl::Easy->new;

	# set options for the curl http request
	$curl->setopt(CURLOPT_HEADER, 1);
	$curl->setopt(CURLOPT_HTTPHEADER, $httpHeaders_ref );
	$curl->setopt(CURLOPT_POST, 1);
	$curl->setopt(CURLOPT_POSTFIELDS, $data);
	$curl->setopt(CURLOPT_POSTFIELDSIZE, length($data)) ;
	$curl->setopt(CURLOPT_URL, $url);
	$curl->setopt(CURLOPT_USERNAME, $settings_ref->{handle}->{credentials}->{username});
	$curl->setopt(CURLOPT_PASSWORD, $settings_ref->{handle}->{credentials}->{password});

	#debugging
	#$curl->setopt (CURLOPT_VERBOSE, 1);

	# A filehandle, reference to a scalar or reference to a typeglob can be used here.
	open my $fh, '>:encoding(UTF-8)', \$response_body or die "$!";
	$curl->setopt(CURLOPT_WRITEDATA, $fh);

	# Do the actual curl http request
	my $returncode = $curl->perform;

	# close file handle
	close($fh);

	# Looking at the results of the curl request
	if ($returncode == 0) {
		print('Transfer went ok\n') if $settings_ref->{debug} =~ /True/ ;
		$response_code         = $curl->getinfo(CURLINFO_HTTP_CODE);
		$response_content_type = $curl->getinfo(CURLINFO_CONTENT_TYPE);
		print("Received response code        : $response_code\n")         if $settings_ref->{debug} =~ /True/;
		print("Received response content type: $response_content_type\n") if $settings_ref->{debug} =~ /True/;

		# judge result and next action based on $response_code
		if ($response_code >= 200 && $response_code < 300 ) {
			print('The request went ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_body\n") if $settings_ref->{debug} =~ /True/;
			open my $fh, '<:encoding(UTF-8)', \$response_body or die "$!";
			while (my $row = <$fh>) {
				chomp $row;
				print "row: $row\n" if $settings_ref->{debug} =~ /True/;
				if ( $row =~ /^Location/ ) {
					$response_url = $row;
					$response_url =~ s/^Location: // ;
					print("Received response url         : $response_url\n") if $settings_ref->{debug} =~ /True/;
					last;
				}
			}

		} else {
			print('The request went NOT ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_code\n") if $settings_ref->{debug} =~ /True/;
		} 

	} else {
		# Error code, type of error, error message
		print("An error happened: $returncode ".$curl->strerror($returncode)." ".$curl->errbuf."\n");
	}

	# Return the results
	return($returncode, $response_code, $response_content_type, $response_url );
}

# Subroutine to get and check all script arguments
sub get_arguments {

	# Get the subroutine arguments
	my $settings_ref = shift;

	# Define local variables
	my %arguments;
	my $username;
	my $password;
	my $baseUri;
	my $pidUrl;
	my $credentials;
	my $handleData;
	my $type;
	my $header;
	my $returncode=0;
	my $message;
	my @sources;

	GetOptions( 'h|help'    => \$arguments{help},
		'user=s'		=> \$username,
		'passwd=s'		=> \$password,
		'base=s'		=> \$baseUri,
		'pid=s'			=> \$pidUrl,
		'cred=s'		=> \$credentials,
		'data=s'		=> \$handleData,
		'type=s'		=> \$type,
		'header=s'		=> \$header,
		'get'			=> \$arguments{get},
		'put'			=> \$arguments{put},
		'delete'		=> \$arguments{delete},
		'post'			=> \$arguments{post},
		'pretty'		=> \$arguments{pretty},
		'd|debug'		=> \$arguments{debug},
	);

	# Check the help flag
	if( $arguments{help} ) {

		# Set the returncode
		$returncode=255;

		$message = print_help();
	}
	
	# Check the debug flag
	if( $arguments{debug} ) {

		$settings_ref->{debug} = 'True';
		printf('debug is                      : on\n') if $settings_ref->{debug} =~ /True/ ;

	}

	# Check the pretty flag
	if( $arguments{pretty} ) {

		$settings_ref->{handle}->{format} = 'pretty';
		printf('pretty format printing is     : on\n') if $settings_ref->{debug} =~ /True/ ;

	}

	# Check the action flag's (get,put,delete,post,search,nagios)
	if( $arguments{get} ) {

		$settings_ref->{handle}->{action} = 'get';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{put} ) {

		$settings_ref->{handle}->{action} = 'put';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{delete} ) {

		$settings_ref->{handle}->{action} = 'delete';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{post} ) {

		$settings_ref->{handle}->{action} = 'post';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the username
	if( $username ) {

		$settings_ref->{handle}->{credentials}->{username} = $username;
		printf("The username is               : %s\n",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the password
	if( $password ) {

		$settings_ref->{handle}->{credentials}->{password} = $password;
		printf("The password is               : %s\n",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the base uri
	if( $baseUri ) {

		$settings_ref->{handle}->{credentials}->{baseuri} = $baseUri;
		printf("The base uri is               : %s\n",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the pid url
	if( $pidUrl ) {

		$settings_ref->{handle}->{url}->{pid} = $pidUrl;
		printf("The pid is                    : %s\n",$settings_ref->{handle}->{url}->{pid}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the handle data
	if( $handleData ) {

		$settings_ref->{handle}->{data}->{putpost} = $handleData;
		printf("The data is                   : %s\n",$settings_ref->{handle}->{data}->{putpost}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the type data
	if( $type ) {

		$settings_ref->{handle}->{type} = $type;
		printf("The type(s) to show is/are    : %s\n",$settings_ref->{handle}->{type}) if $settings_ref->{debug} =~ /True/ ;

	}
	
	# check the header data
	if( $header ) {

		$settings_ref->{handle}->{headerextra} = $header;
		printf("The extra header info is      : %s\n",$settings_ref->{handle}->{headerextra}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the credentials data
	if( $credentials ) {

		# read the credentials from the file
		my $filename = $credentials;
		my $json_text = do {
			open(my $json_fh, "<:encoding(UTF-8)", $filename)  or die("Can't open $filename: $!\n");
			local $/;
			<$json_fh>
		};

		# convert from json and put in correct place 
		my $json = JSON->new;
		$settings_ref->{handle}->{credentials} = $json->decode($json_text);

		printf("The username is               : %s\n",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;
		printf("The password is               : %s\n",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;
		printf("The base uri is               : %s\n",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;
	}

	# Print the message
	if( $message ) {

		print "$message\n";
	};

	# Return the results
	return($returncode);

};

</code></pre>

;T;
@gI""/guides/examples/generatephp/;T{;{;I"Ø
<p>The request in php </p>

<pre><code class="language-php5"><span class="nv">$PIDSERVICE_URL</span><span class="o">=</span><span class="s2">"THE_SERVICE_URL_WITH_PREFIX"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_USER</span><span class="o">=</span><span class="s2">"YOURUSERNAME"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s2">"YOURPASSWORD"</span><span class="p">;</span>
<span class="nv">$UUID</span> <span class="o">=</span> <span class="s2">"?prefix=GRNET&amp;suffix=TEST"</span><span class="p">;</span>
<span class="nv">$URL_TO_OPEN</span> <span class="o">=</span> <span class="nv">$PIDSERVICE_URL</span><span class="o">.</span><span class="nv">$UUID</span><span class="p">;</span>
<span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="s1">'URL'</span><span class="p">,</span><span class="s1">'parsed_data'</span><span class="o">=&gt;</span><span class="s1">'http://www.grnet.gr/'</span><span class="p">));</span>
<span class="nv">$update_json</span><span class="o">=</span><span class="nb">json_encode</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>

<span class="c1">// Get cURL resource</span>
<span class="nv">$ch</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>

<span class="c1">//Set the headers to complete the request</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">'Content-Type: application/json'</span><span class="p">,</span><span class="s1">'Content-Length: '</span> <span class="o">.</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$update_json</span><span class="p">)));</span>

<span class="c1">//set the POST Action</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_CUSTOMREQUEST</span><span class="p">,</span> <span class="s2">"POST"</span><span class="p">);</span>

<span class="c1">//SET the postfield data</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_POSTFIELDS</span><span class="p">,</span><span class="nv">$update_json</span><span class="p">);</span>

<span class="c1">// Should cURL return or print out the data? (true = return, false = print)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">//Set the url with the new name of the PID </span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$URL_TO_OPEN</span><span class="p">);</span>

<span class="c1">// Set the authentication options</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_USERPWD</span><span class="p">,</span> <span class="nv">$PIDSERVICE_USER</span><span class="o">.</span><span class="s2">":"</span><span class="o">.</span><span class="nv">$PIDSERVICE_PASSWD</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPAUTH</span><span class="p">,</span> <span class="nx">CURLAUTH_BASIC</span><span class="p">);</span>

<span class="nv">$output</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>
<span class="nv">$info</span> <span class="o">=</span> <span class="nb">curl_getinfo</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>

<span class="c1">// Download the given URL, and return output </span>

<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">200</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"HANDLE EXISTS"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">201</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"PID CREATED"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">204</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"PID UPDATED"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">404</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"HANDLE DOESNT EXIST"</span><span class="p">;</span>

<span class="nb">curl_close</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span></code></pre>

;T;	I"¨
The request in php 

<pre><code class="language-php5">
$PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX";
$PIDSERVICE_USER="YOURUSERNAME";
$PIDSERVICE_PASSWD="YOURPASSWORD";
$UUID = "?prefix=GRNET&suffix=TEST";
$URL_TO_OPEN = $PIDSERVICE_URL.$UUID;
$data = array(array('type' => 'URL','parsed_data'=>'http://www.grnet.gr/'));
$update_json=json_encode($data);

// Get cURL resource
$ch = curl_init();

//Set the headers to complete the request
curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json','Content-Length: ' . strlen($update_json)));

//set the POST Action
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");

//SET the postfield data
curl_setopt($ch, CURLOPT_POSTFIELDS,$update_json);

// Should cURL return or print out the data? (true = return, false = print)
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

//Set the url with the new name of the PID 
curl_setopt($ch, CURLOPT_URL, $URL_TO_OPEN);

// Set the authentication options
curl_setopt($ch, CURLOPT_USERPWD, $PIDSERVICE_USER.":".$PIDSERVICE_PASSWD);
curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);

$output = curl_exec($ch);
$info = curl_getinfo($ch);

// Download the given URL, and return output 

if( $info['http_code']==200) echo "HANDLE EXISTS<br/>";
if( $info['http_code']==201) echo "PID CREATED<br/>";
if( $info['http_code']==204) echo "PID UPDATED<br/>";
if( $info['http_code']==404) echo "HANDLE DOESNT EXIST<br/>";

curl_close($ch);

</code></pre>



;T;
@lI"%/guides/examples/generatepython/;T{;{;I"
<p>The request in python. 
The main difference is that you have to do a POST request.</p>

<pre><code class="language-python"><span class="kn">import</span> <span class="nn">urllib2</span>
<span class="kn">import</span> <span class="nn">uuid</span>
<span class="kn">import</span> <span class="nn">json</span>

<span class="n">PIDSERVICE_URL</span><span class="o">=</span><span class="s">"THE_SERVICE_URL_WITH_PREFIX"</span>
<span class="n">PIDSERVICE_USER</span><span class="o">=</span><span class="s">"YOURUSERNAME"</span>
<span class="n">PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s">"YOURPASSWORD"</span>
<span class="n">SUFFIX</span> <span class="o">=</span><span class="s">"?prefix=GRNET&amp;suffix=test"</span>
<span class="n">URL_TO_OPEN</span><span class="o">=</span><span class="n">PIDSERVICE_URL</span><span class="o">+</span><span class="n">SUFFIX</span>
<span class="n">DATAURL</span><span class="o">=</span><span class="s">''</span>

<span class="c"># create a password manager</span>
<span class="n">password_mgr</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPPasswordMgrWithDefaultRealm</span><span class="p">()</span>

<span class="c"># Add the username and password.</span>
<span class="n">password_mgr</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">PIDSERVICE_URL</span><span class="p">,</span> <span class="n">PIDSERVICE_USER</span><span class="p">,</span> <span class="n">PIDSERVICE_PASSWD</span><span class="p">)</span>

<span class="n">handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">(</span><span class="n">password_mgr</span><span class="p">)</span>

<span class="c"># create "opener" (OpenerDirector instance)</span>
<span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>

<span class="c"># use the opener to fetch a URL</span>
<span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">PIDSERVICE_URL</span><span class="p">)</span>

<span class="c"># Install the opener.</span>
<span class="c"># Now all calls to urllib2.urlopen use the created opener.</span>
<span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>

<span class="c">#create the json data</span>
<span class="n">JSONDATA</span> <span class="o">=</span> <span class="p">[{</span><span class="s">'type'</span><span class="p">:</span><span class="s">'URL'</span><span class="p">,</span><span class="s">'parsed_data'</span><span class="p">:</span><span class="s">'http://www.grnet.gr'</span><span class="p">}]</span>
<span class="n">JSONDATATOSEND</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">JSONDATA</span><span class="p">);</span>

<span class="n">REQUESTDATA</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">URL_TO_OPEN</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">JSONDATATOSEND</span><span class="p">)</span>

<span class="c">#create the headers</span>
<span class="n">REQUESTDATA</span><span class="o">.</span><span class="n">add_header</span><span class="p">(</span><span class="s">'Content-Type'</span><span class="p">,</span><span class="s">'application/json'</span><span class="p">)</span>
<span class="n">REQUESTDATA</span><span class="o">.</span><span class="n">add_header</span><span class="p">(</span><span class="s">'Content-Length'</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">JSONDATATOSEND</span><span class="p">))</span>

<span class="c"># creates the POST method</span>
<span class="n">REQUESTDATA</span><span class="o">.</span><span class="n">get_method</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="s">'POST'</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">DATAURL</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">REQUESTDATA</span><span class="p">)</span>
    
<span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">e</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"404-Not found"</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">401</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"401-Authentication failed"</span>    
        <span class="c">#get http code of the request</span>

<span class="k">if</span> <span class="n">DATAURL</span><span class="p">:</span>
    <span class="c"># Getting the code</span>
    <span class="k">print</span> <span class="s">"This gets the code: "</span><span class="p">,</span> <span class="n">DATAURL</span><span class="o">.</span><span class="n">code</span></code></pre>

;T;	I"P
The request in python. 
The main difference is that you have to do a POST request.

<pre><code class="language-python">
import urllib2
import uuid
import json

PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX"
PIDSERVICE_USER="YOURUSERNAME"
PIDSERVICE_PASSWD="YOURPASSWORD"
SUFFIX ="?prefix=GRNET&suffix=test"
URL_TO_OPEN=PIDSERVICE_URL+SUFFIX
DATAURL=''

# create a password manager
password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()

# Add the username and password.
password_mgr.add_password(None, PIDSERVICE_URL, PIDSERVICE_USER, PIDSERVICE_PASSWD)

handler = urllib2.HTTPBasicAuthHandler(password_mgr)

# create "opener" (OpenerDirector instance)
opener = urllib2.build_opener(handler)

# use the opener to fetch a URL
opener.open(PIDSERVICE_URL)

# Install the opener.
# Now all calls to urllib2.urlopen use the created opener.
urllib2.install_opener(opener)

#create the json data
JSONDATA = [{'type':'URL','parsed_data':'http://www.grnet.gr'}]
JSONDATATOSEND = json.dumps(JSONDATA);

REQUESTDATA = urllib2.Request(URL_TO_OPEN, data=JSONDATATOSEND)

#create the headers
REQUESTDATA.add_header('Content-Type','application/json')
REQUESTDATA.add_header('Content-Length',len(JSONDATATOSEND))

# creates the POST method
REQUESTDATA.get_method = lambda: 'POST'

try:
    DATAURL = urllib2.urlopen(REQUESTDATA)
    
except urllib2.URLError, e:
    print e
    if e.code == 404:
        print "404-Not found"
    if e.code == 401:
        print "401-Authentication failed"    
        #get http code of the request

if DATAURL:
    # Getting the code
    print "This gets the code: ", DATAURL.code

</code></pre>

;T;
@qI""/guides/examples/generateres/;T{;{;I"Ù
<h4 id="the-result">The Result</h4>

<p>The result of the automatic generation</p>

<p><span class="txtcenter"><strong>GRNET-0000-0000-000A-5-TEST </strong></span></p>

<h2 id="manual-generation-of-suffix">Manual generation of SUFFIX</h2>

<p>Its up to the user to decide the names of the PIDs. You may use</p>

<ul>
  <li>a number</li>
  <li>a string</li>
  <li>a UUID </li>
  <li>a pattern based on the community context</li>
</ul>

<p>In all examples in this manual we use a UUID generator.</p>

;T;	I"p

#### The Result

The result of the automatic generation

<span class="txtcenter"><strong>GRNET-0000-0000-000A-5-TEST </strong></span>

## Manual generation of SUFFIX

Its up to the user to decide the names of the PIDs. You may use

- a number
- a string
- a UUID 
- a pattern based on the community context


In all examples in this manual we use a UUID generator.

;T;
@vI"/guides/examples/getcurl/;T{;{;I"⁄<p>The request in curl</p>

<pre><code>
curl -D- -u "YOURUSERNAME:YOURPASSWORD" -X GET -H "Content-Type: application/json" https://epic.grnet.gr/api/v2/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5
</code></pre>

;T;	I"”The request in curl

<pre><code>
curl -D- -u "YOURUSERNAME:YOURPASSWORD" -X GET -H "Content-Type: application/json" https://epic.grnet.gr/api/v2/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5
</code></pre>

;T;
@{I"/guides/examples/getperl/;T{;{;I"˜·
<p>The request in perl</p>

<pre><code class="language-perl"><span class="c1">#!/usr/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Getopt::</span><span class="n">Long</span><span class="p">;</span>
<span class="k">use</span> <span class="n">Switch</span> <span class="s">'Perl5'</span><span class="p">,</span> <span class="s">'Perl6'</span><span class="p">;</span>
<span class="k">use</span> <span class="n">JSON</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$fullargv0</span> <span class="o">=</span> <span class="nv">$0</span><span class="p">;</span>
<span class="k">my</span> <span class="p">(</span><span class="nv">$argv0</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$fullargv0</span> <span class="o">=~</span><span class="sr"> /([^\/\\]+)$/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">%settings</span> <span class="o">=</span> <span class="p">(</span>
<span class="s">'debug'</span> <span class="o">=&gt;</span> <span class="s">'False'</span><span class="p">,</span>
<span class="s">'handle'</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="s">'action'</span> <span class="o">=&gt;</span><span class="s">'get'</span><span class="p">,</span>
	<span class="s">'credentials'</span> 	<span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'username'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'password'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'baseuri'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'data'</span>	<span class="o">=&gt;</span><span class="p">{</span>
		<span class="s">'get'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
		<span class="s">'putpost'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'format'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'headerextra'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="s">'type'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'url'</span><span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'pid'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
<span class="p">},</span>
<span class="p">);</span>

<span class="c1"># Main subroutine</span>
<span class="k">sub </span><span class="nf">main</span> <span class="p">{</span>

	<span class="c1">#Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Get the script arguments</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">)</span> <span class="o">=</span> <span class="n">get_arguments</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span>

	<span class="k">if</span><span class="p">(</span> <span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> 
		<span class="n">performGet</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span> 

	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>
<span class="p">}</span>
 
<span class="c1"># Subroutine to perform a GET action</span>
<span class="k">sub </span><span class="nf">performGet</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1">#construct url and headers</span>
	<span class="k">my</span> <span class="nv">$url</span><span class="o">=</span><span class="s">"$settings_ref-&gt;{handle}-&gt;{credentials}-&gt;{baseuri}$settings_ref-&gt;{handle}-&gt;{url}-&gt;{pid}"</span><span class="p">;</span>
	<span class="nb">printf</span><span class="p">(</span><span class="s">"The constructed url is        : %s\n"</span><span class="p">,</span><span class="nv">$url</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="k">my</span> <span class="nv">@httpHeaders</span> <span class="o">=</span> <span class="p">(</span><span class="s">'Accept: application/json'</span> <span class="p">)</span> <span class="p">;</span>
	<span class="nb">push</span><span class="p">(</span><span class="nv">@httpHeaders</span><span class="p">,</span> <span class="s">"$settings_ref-&gt;{handle}-&gt;{headerextra}"</span> <span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="p">;</span>

	<span class="c1"># perform action</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_content_type</span> <span class="p">)</span> <span class="o">=</span> <span class="n">httpGet</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">,</span> <span class="nv">$url</span><span class="p">,</span> <span class="o">\</span><span class="nv">@httpHeaders</span><span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

			<span class="c1"># show only types we want to show. implicit is that we than only show type and parsed_data</span>
			<span class="k">unless</span> <span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /none/</span> <span class="p">)</span> <span class="p">{</span>

				<span class="k">if</span> <span class="p">(</span><span class="nb">ref</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">})</span> <span class="ow">eq</span> <span class="s">'ARRAY'</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">print</span> <span class="s">"We have an array of hashes \n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># grep so we have only the hashes with the selected fields</span>
					<span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span><span class="nv">$_</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /$settings_ref-&gt;{handle}-&gt;{type}/</span> <span class="p">}</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="p">;</span> 
					<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># delete items from retrieved handle which are not type and parsed_data</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$hash</span> <span class="p">(</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}})</span> <span class="p">{</span>
						<span class="k">foreach</span> <span class="k">my</span> <span class="nv">$key</span> <span class="p">(</span> <span class="nb">keys</span> <span class="nv">%$hash</span> <span class="p">)</span> <span class="p">{</span>			
							<span class="k">print</span> <span class="s">"key: $key, value: $hash-&gt;{$key}\n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
							<span class="k">unless</span> <span class="p">(</span> <span class="nv">$key</span> <span class="o">=~</span><span class="sr"> /^type|^parsed_data/</span> <span class="p">)</span> <span class="p">{</span>
								<span class="nb">delete</span> <span class="nv">$hash</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$key</span><span class="p">};</span>
							<span class="p">}</span>
						<span class="p">}</span>	
					<span class="p">}</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="k">print</span> <span class="s">"We have a hash of arrays of hashes \n"</span> <span class="k">if</span>  <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
					<span class="c1"># grep so we have only the hashes with the selected fields</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$array</span> <span class="p">(</span><span class="nb">values</span><span class="p">(</span><span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}))</span> <span class="p">{</span> 
						<span class="nv">@$array</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span><span class="nv">$_</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /$settings_ref-&gt;{handle}-&gt;{type}/</span> <span class="p">}</span> <span class="nv">@$array</span> <span class="p">;</span>
					<span class="p">}</span> 
					<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># delete items from retrieved handle which are not type and parsed_data</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$array</span> <span class="p">(</span><span class="nb">values</span><span class="p">(</span><span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}))</span> <span class="p">{</span> 
						<span class="k">for</span> <span class="k">my</span> <span class="nv">$hash</span> <span class="p">(</span> <span class="nv">@$array</span> <span class="p">)</span> <span class="p">{</span>
							<span class="k">foreach</span> <span class="k">my</span> <span class="nv">$key</span> <span class="p">(</span> <span class="nb">keys</span> <span class="nv">%$hash</span> <span class="p">)</span> <span class="p">{</span>			
								<span class="k">print</span> <span class="s">"key: $key, value: $hash-&gt;{$key}\n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
								<span class="k">unless</span> <span class="p">(</span> <span class="nv">$key</span> <span class="o">=~</span><span class="sr"> /^type|^parsed_data/</span> <span class="p">)</span> <span class="p">{</span>
									<span class="nb">delete</span> <span class="nv">$hash</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$key</span><span class="p">};</span>
								<span class="p">}</span>
							<span class="p">}</span>
						<span class="p">}</span>	
					<span class="p">}</span>
				<span class="p">}</span>
			<span class="p">}</span>

			<span class="c1"># print the data in json format, pretty if the parameter is set</span>
			<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
			<span class="k">my</span> <span class="nv">$json_printed</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /pretty/</span> <span class="p">)</span> <span class="p">{</span>
				<span class="nv">$json_printed</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">pretty</span><span class="o">-&gt;</span><span class="n">encode</span><span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">);</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nv">$json_printed</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">encode</span><span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">);</span>
			<span class="p">}</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$json_printed\n"</span><span class="p">);</span>

		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">);</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'An error happened\n'</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1"># reader helper calback function</span>
<span class="k">sub </span><span class="nf">read_callback</span> <span class="p">{</span>
	<span class="k">my</span> <span class="p">(</span><span class="nv">$maxlength</span><span class="p">,</span><span class="nv">$pointer</span><span class="p">)</span><span class="o">=</span><span class="nv">@_</span><span class="p">;</span>
	<span class="c1"># printf("The MAXLENGTH is     : \n", $maxlength);</span>
	<span class="c1"># printf("The POINTER is       : \n", $$pointer) ;</span>
	<span class="k">my</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$$pointer</span><span class="p">;</span>
	<span class="nv">$$pointer</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1"># Subroutine to retrieve data via a http GET</span>
<span class="k">sub </span><span class="nf">httpGet</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$httpHeaders_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="k">print</span><span class="p">(</span><span class="s">'Entering httpGet              :\n'</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

	<span class="c1"># local varables</span>
	<span class="k">my</span> <span class="nv">$response_body</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_code</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_content_type</span><span class="p">;</span>

	<span class="k">my</span> <span class="nv">$curl</span> <span class="o">=</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>

	<span class="c1"># set options for the curl http request</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="nv">$httpHeaders_ref</span> <span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_USERNAME</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">});</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_PASSWORD</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">});</span>

	<span class="c1"># A filehandle, reference to a scalar or reference to a typeglob can be used here.</span>
	<span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">'&gt;'</span><span class="p">,</span> <span class="o">\</span><span class="nv">$response_body</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">"$!"</span><span class="p">;</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_WRITEDATA</span><span class="p">,</span> <span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Do the actual curl http request</span>
	<span class="k">my</span> <span class="nv">$returncode</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">perform</span><span class="p">;</span>

	<span class="c1"># close file handle</span>
	<span class="nb">close</span><span class="p">(</span><span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="nv">$response_code</span>         <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_HTTP_CODE</span><span class="p">);</span>
		<span class="nv">$response_content_type</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_CONTENT_TYPE</span><span class="p">);</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response code        : $response_code\n"</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response content type: $response_content_type\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_body\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

			<span class="c1"># convert from json and put in correct place </span>
			<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
			<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$response_body</span><span class="p">);</span>

		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="c1"># Error code, type of error, error message</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"An error happened: $returncode "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">strerror</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">)</span><span class="o">.</span><span class="s">" "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">errbuf</span><span class="o">.</span><span class="s">"\n"</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">,</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="nv">$response_content_type</span> <span class="p">);</span>
<span class="p">}</span>

<span class="c1"># Subroutine to get and check all script arguments</span>
<span class="k">sub </span><span class="nf">get_arguments</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Define local variables</span>
	<span class="k">my</span> <span class="nv">%arguments</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$username</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$password</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$baseUri</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$pidUrl</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$credentials</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$handleData</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$type</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$returncode</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$message</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">@sources</span><span class="p">;</span>

	<span class="n">GetOptions</span><span class="p">(</span> <span class="s">'h|help'</span>    <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">},</span>
		<span class="s">'user=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$username</span><span class="p">,</span>
		<span class="s">'passwd=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$password</span><span class="p">,</span>
		<span class="s">'base=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$baseUri</span><span class="p">,</span>
		<span class="s">'pid=s'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$pidUrl</span><span class="p">,</span>
		<span class="s">'cred=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$credentials</span><span class="p">,</span>
		<span class="s">'data=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$handleData</span><span class="p">,</span>
		<span class="s">'type=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$type</span><span class="p">,</span>
		<span class="s">'header=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$header</span><span class="p">,</span>
		<span class="s">'get'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">},</span>
		<span class="s">'put'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">},</span>
		<span class="s">'delete'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">},</span>
		<span class="s">'post'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">},</span>
		<span class="s">'pretty'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">},</span>
		<span class="s">'d|debug'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">},</span>
	<span class="p">);</span>

	<span class="c1"># Check the help flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># Set the returncode</span>
		<span class="nv">$returncode</span><span class="o">=</span><span class="mi">255</span><span class="p">;</span>

		<span class="nv">$message</span> <span class="o">=</span> <span class="n">print_help</span><span class="p">();</span>
	<span class="p">}</span>
	
	<span class="c1"># Check the debug flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=</span> <span class="s">'True'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'debug is                      : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the pretty flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=</span> <span class="s">'pretty'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'pretty format printing is     : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the action flag's (get,put,delete,post,search,nagios)</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'get'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'put'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'delete'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'post'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the username</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$username</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$username</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the password</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$password</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$password</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the base uri</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$baseUri</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$baseUri</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the pid url</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$pidUrl</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$pidUrl</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The pid is                    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the handle data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$handleData</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$handleData</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The data is                   : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the type data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$type</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$type</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The type(s) to show is/are    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>
	
	<span class="c1"># check the header data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$header</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$header</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The extra header info is      : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the credentials data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$credentials</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># read the credentials from the file</span>
		<span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$credentials</span><span class="p">;</span>
		<span class="k">my</span> <span class="nv">$json_text</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span>
			<span class="nb">open</span><span class="p">(</span><span class="k">my</span> <span class="nv">$json_fh</span><span class="p">,</span> <span class="s">"&lt;:encoding(UTF-8)"</span><span class="p">,</span> <span class="nv">$filename</span><span class="p">)</span>  <span class="ow">or</span> <span class="nb">die</span><span class="p">(</span><span class="s">"Can't open $filename: $!\n"</span><span class="p">);</span>
			<span class="nb">local</span> <span class="vg">$/</span><span class="p">;</span>
			<span class="sr">&lt;$json_fh&gt;</span>
		<span class="p">};</span>

		<span class="c1"># convert from json and put in correct place </span>
		<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$json_text</span><span class="p">);</span>

		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="p">}</span>

	<span class="c1"># Print the message</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$message</span> <span class="p">)</span> <span class="p">{</span>

		<span class="k">print</span> <span class="s">"$message\n"</span><span class="p">;</span>
	<span class="p">};</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>

<span class="p">};</span></code></pre>

;T;	I"K-
The request in perl

<pre><code class="language-perl">

#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;
use Switch 'Perl5', 'Perl6';
use JSON;
use WWW::Curl::Easy;

my $fullargv0 = $0;
my ($argv0) = $fullargv0 =~ /([^\/\\]+)$/;

my %settings = (
'debug' => 'False',
'handle' => {
	'action' =>'get',
	'credentials' 	=>	{
		'username'	=> 'empty',
		'password'	=> 'empty',
		'baseuri'	=> 'empty',
	},
	'data'	=>{
		'get'	=> '',
		'putpost'=> '',
	},
	'format' => 'none',
	'headerextra'	=> '',
	'type' => 'none',
	'url'=>	{
		'pid'=> '',
	},
},
);

# Main subroutine
sub main {

	#Get the subroutine arguments
	my $settings_ref = shift;

	# Get the script arguments
	(my $returncode) = get_arguments($settings_ref);

	if( $returncode == 0 ) 
		performGet($settings_ref); 

	return($returncode);
}
 
# Subroutine to perform a GET action
sub performGet {

	# Get the subroutine arguments
	my $settings_ref = shift;

	#construct url and headers
	my $url="$settings_ref->{handle}->{credentials}->{baseuri}$settings_ref->{handle}->{url}->{pid}";
	printf("The constructed url is        : %s\n",$url) if $settings_ref->{debug} =~ /True/ ;
	my @httpHeaders = ('Accept: application/json' ) ;
	push(@httpHeaders, "$settings_ref->{handle}->{headerextra}" ) if $settings_ref->{handle}->{headerextra} ;

	# perform action
	(my $returncode, my $response_code, my $response_content_type ) = httpGet($settings_ref, $url, \@httpHeaders);

	# Looking at the results of the curl request
	if ($returncode == 0) {
		print('Transfer went ok\n') if $settings_ref->{debug} =~ /True/ ;

		# judge result and next action based on $response_code
		if ($response_code >= 200 && $response_code < 300 ) {
			print('The request went ok\n') if $settings_ref->{debug} =~ /True/ ;
			print Dumper $settings_ref->{handle}->{data}->{get} if $settings_ref->{debug} =~ /True/ ;

			# show only types we want to show. implicit is that we than only show type and parsed_data
			unless ( $settings_ref->{handle}->{type} =~ /none/ ) {

				if (ref($settings_ref->{handle}->{data}->{get}) eq 'ARRAY') {
					print "We have an array of hashes \n" if $settings_ref->{debug} =~ /True/ ;

					# grep so we have only the hashes with the selected fields
					@{$settings_ref->{handle}->{data}->{get}} = grep {$_->{type} =~ /$settings_ref->{handle}->{type}/ } @{$settings_ref->{handle}->{data}->{get}} ; 
					print Dumper @{$settings_ref->{handle}->{data}->{get}} if $settings_ref->{debug} =~ /True/ ;

					# delete items from retrieved handle which are not type and parsed_data
					for my $hash ( @{$settings_ref->{handle}->{data}->{get}}) {
						foreach my $key ( keys %$hash ) {			
							print "key: $key, value: $hash->{$key}\n" if $settings_ref->{debug} =~ /True/ ;
							unless ( $key =~ /^type|^parsed_data/ ) {
								delete $hash->{$key};
							}
						}	
					}
				} else {
					print "We have a hash of arrays of hashes \n" if  $settings_ref->{debug} =~ /True/ ;
					# grep so we have only the hashes with the selected fields
					for my $array (values(%{$settings_ref->{handle}->{data}->{get}})) { 
						@$array = grep {$_->{type} =~ /$settings_ref->{handle}->{type}/ } @$array ;
					} 
					print Dumper %{$settings_ref->{handle}->{data}->{get}} if $settings_ref->{debug} =~ /True/ ;

					# delete items from retrieved handle which are not type and parsed_data
					for my $array (values(%{$settings_ref->{handle}->{data}->{get}})) { 
						for my $hash ( @$array ) {
							foreach my $key ( keys %$hash ) {			
								print "key: $key, value: $hash->{$key}\n" if $settings_ref->{debug} =~ /True/ ;
								unless ( $key =~ /^type|^parsed_data/ ) {
									delete $hash->{$key};
								}
							}
						}	
					}
				}
			}

			# print the data in json format, pretty if the parameter is set
			my $json = JSON->new;
			my $json_printed;
			if ( $settings_ref->{handle}->{format} =~ /pretty/ ) {
				$json_printed = $json->pretty->encode( $settings_ref->{handle}->{data}->{get} );
			} else {
				$json_printed = $json->encode( $settings_ref->{handle}->{data}->{get} );
			}
			print("$json_printed\n");

		} else {
			print('The request went NOT ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_code\n");
		} 

	} else {
		print('An error happened\n');
	}
}

# reader helper calback function
sub read_callback {
	my ($maxlength,$pointer)=@_;
	# printf("The MAXLENGTH is     : \n", $maxlength);
	# printf("The POINTER is       : \n", $$pointer) ;
	my $data = $$pointer;
	$$pointer = "";
	return $data;
}

# Subroutine to retrieve data via a http GET
sub httpGet {

	# Get the subroutine arguments
	my $settings_ref = shift;
	my $url = shift;
	my $httpHeaders_ref = shift;

	print('Entering httpGet              :\n')         if $settings_ref->{debug} =~ /True/;

	# local varables
	my $response_body;
	my $response_code;
	my $response_content_type;

	my $curl = WWW::Curl::Easy->new;

	# set options for the curl http request
	$curl->setopt(CURLOPT_HEADER, 0);
	$curl->setopt(CURLOPT_HTTPHEADER, $httpHeaders_ref );
	$curl->setopt(CURLOPT_URL, $url);
	$curl->setopt(CURLOPT_USERNAME, $settings_ref->{handle}->{credentials}->{username});
	$curl->setopt(CURLOPT_PASSWORD, $settings_ref->{handle}->{credentials}->{password});

	# A filehandle, reference to a scalar or reference to a typeglob can be used here.
	open my $fh, '>', \$response_body or die "$!";
	$curl->setopt(CURLOPT_WRITEDATA, $fh);

	# Do the actual curl http request
	my $returncode = $curl->perform;

	# close file handle
	close($fh);

	# Looking at the results of the curl request
	if ($returncode == 0) {
		print('Transfer went ok\n') if $settings_ref->{debug} =~ /True/ ;

		$response_code         = $curl->getinfo(CURLINFO_HTTP_CODE);
		$response_content_type = $curl->getinfo(CURLINFO_CONTENT_TYPE);
		print("Received response code        : $response_code\n")         if $settings_ref->{debug} =~ /True/;
		print("Received response content type: $response_content_type\n") if $settings_ref->{debug} =~ /True/;

		# judge result and next action based on $response_code
		if ($response_code >= 200 && $response_code < 300 ) {
			print('The request went ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_body\n") if $settings_ref->{debug} =~ /True/;

			# convert from json and put in correct place 
			my $json = JSON->new;
			$settings_ref->{handle}->{data}->{get} = $json->decode($response_body);

		} else {
			print('The request went NOT ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_code\n") if $settings_ref->{debug} =~ /True/;
		} 

	} else {
		# Error code, type of error, error message
		print("An error happened: $returncode ".$curl->strerror($returncode)." ".$curl->errbuf."\n");
	}

	# Return the results
	return($returncode, $response_code, $response_content_type );
}

# Subroutine to get and check all script arguments
sub get_arguments {

	# Get the subroutine arguments
	my $settings_ref = shift;

	# Define local variables
	my %arguments;
	my $username;
	my $password;
	my $baseUri;
	my $pidUrl;
	my $credentials;
	my $handleData;
	my $type;
	my $header;
	my $returncode=0;
	my $message;
	my @sources;

	GetOptions( 'h|help'    => \$arguments{help},
		'user=s'		=> \$username,
		'passwd=s'		=> \$password,
		'base=s'		=> \$baseUri,
		'pid=s'			=> \$pidUrl,
		'cred=s'		=> \$credentials,
		'data=s'		=> \$handleData,
		'type=s'		=> \$type,
		'header=s'		=> \$header,
		'get'			=> \$arguments{get},
		'put'			=> \$arguments{put},
		'delete'		=> \$arguments{delete},
		'post'			=> \$arguments{post},
		'pretty'		=> \$arguments{pretty},
		'd|debug'		=> \$arguments{debug},
	);

	# Check the help flag
	if( $arguments{help} ) {

		# Set the returncode
		$returncode=255;

		$message = print_help();
	}
	
	# Check the debug flag
	if( $arguments{debug} ) {

		$settings_ref->{debug} = 'True';
		printf('debug is                      : on\n') if $settings_ref->{debug} =~ /True/ ;

	}

	# Check the pretty flag
	if( $arguments{pretty} ) {

		$settings_ref->{handle}->{format} = 'pretty';
		printf('pretty format printing is     : on\n') if $settings_ref->{debug} =~ /True/ ;

	}

	# Check the action flag's (get,put,delete,post,search,nagios)
	if( $arguments{get} ) {

		$settings_ref->{handle}->{action} = 'get';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{put} ) {

		$settings_ref->{handle}->{action} = 'put';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{delete} ) {

		$settings_ref->{handle}->{action} = 'delete';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{post} ) {

		$settings_ref->{handle}->{action} = 'post';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the username
	if( $username ) {

		$settings_ref->{handle}->{credentials}->{username} = $username;
		printf("The username is               : %s\n",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the password
	if( $password ) {

		$settings_ref->{handle}->{credentials}->{password} = $password;
		printf("The password is               : %s\n",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the base uri
	if( $baseUri ) {

		$settings_ref->{handle}->{credentials}->{baseuri} = $baseUri;
		printf("The base uri is               : %s\n",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the pid url
	if( $pidUrl ) {

		$settings_ref->{handle}->{url}->{pid} = $pidUrl;
		printf("The pid is                    : %s\n",$settings_ref->{handle}->{url}->{pid}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the handle data
	if( $handleData ) {

		$settings_ref->{handle}->{data}->{putpost} = $handleData;
		printf("The data is                   : %s\n",$settings_ref->{handle}->{data}->{putpost}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the type data
	if( $type ) {

		$settings_ref->{handle}->{type} = $type;
		printf("The type(s) to show is/are    : %s\n",$settings_ref->{handle}->{type}) if $settings_ref->{debug} =~ /True/ ;

	}
	
	# check the header data
	if( $header ) {

		$settings_ref->{handle}->{headerextra} = $header;
		printf("The extra header info is      : %s\n",$settings_ref->{handle}->{headerextra}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the credentials data
	if( $credentials ) {

		# read the credentials from the file
		my $filename = $credentials;
		my $json_text = do {
			open(my $json_fh, "<:encoding(UTF-8)", $filename)  or die("Can't open $filename: $!\n");
			local $/;
			<$json_fh>
		};

		# convert from json and put in correct place 
		my $json = JSON->new;
		$settings_ref->{handle}->{credentials} = $json->decode($json_text);

		printf("The username is               : %s\n",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;
		printf("The password is               : %s\n",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;
		printf("The base uri is               : %s\n",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;
	}

	# Print the message
	if( $message ) {

		print "$message\n";
	};

	# Return the results
	return($returncode);

};

</code></pre>

;T;
@{I"/guides/examples/getphp/;T{;{;I"_
<p>The request in php </p>

<pre><code class="language-php5"><span class="nv">$PIDSERVICE_URL</span><span class="o">=</span><span class="s2">"THE_SERVICE_URL_WITH_PREFIX"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_USER</span><span class="o">=</span><span class="s2">"YOURUSERNAME"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s2">"YOURPASSWORD"</span><span class="p">;</span>
<span class="nv">$PID</span><span class="o">=</span><span class="s2">"THE_PID"</span><span class="p">;</span> <span class="c1">//"05C3DB56-5692-11E3-AF8F-1C6F65A666B5";</span>
<span class="nv">$GETPIDURL</span> <span class="o">=</span><span class="nv">$PIDSERVICE_URL</span><span class="o">.</span><span class="nv">$PID</span><span class="p">;</span>


<span class="c1">// Get cURL resource</span>
<span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
<span class="c1">// Set some options - we are passing in a useragent too here</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span><span class="nx">CURLOPT_URL</span><span class="p">,</span><span class="nv">$GETPIDURL</span><span class="p">);</span>
<span class="c1">// Set the authentication options</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_USERPWD</span><span class="p">,</span> <span class="nv">$PIDSERVICE_USER</span><span class="o">.</span><span class="s2">":"</span><span class="o">.</span><span class="nv">$PIDSERVICE_PASSWD</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPAUTH</span><span class="p">,</span> <span class="nx">CURLAUTH_BASIC</span><span class="p">);</span>

<span class="c1">// Include header in result? (0 = yes, 1 = no)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="c1">// Should cURL return or print out the data? (true = return, false = print)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">// Download the given URL, and return output</span>
<span class="nv">$output</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
<span class="nv">$info</span> <span class="o">=</span> <span class="nb">curl_getinfo</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">200</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"PID DATA"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">401</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Authorization problem"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">404</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Not found"</span><span class="p">;</span>

<span class="c1">// Close the cURL resource, and free system resources</span>
<span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span></code></pre>

;T;	I"s
The request in php 

<pre><code class="language-php5">

$PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX";
$PIDSERVICE_USER="YOURUSERNAME";
$PIDSERVICE_PASSWD="YOURPASSWORD";
$PID="THE_PID"; //"05C3DB56-5692-11E3-AF8F-1C6F65A666B5";
$GETPIDURL =$PIDSERVICE_URL.$PID;


// Get cURL resource
$curl = curl_init();
// Set some options - we are passing in a useragent too here
curl_setopt($curl,CURLOPT_URL,$GETPIDURL);
// Set the authentication options
curl_setopt($curl, CURLOPT_USERPWD, $PIDSERVICE_USER.":".$PIDSERVICE_PASSWD);
curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);

// Include header in result? (0 = yes, 1 = no)
curl_setopt($curl, CURLOPT_HEADER, 0);
// Should cURL return or print out the data? (true = return, false = print)
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

// Download the given URL, and return output
$output = curl_exec($curl);
$info = curl_getinfo($curl);
if( $info['http_code']==200) echo "PID DATA";
if( $info['http_code']==401) echo "Authorization problem";
if( $info['http_code']==404) echo "Not found";

// Close the cURL resource, and free system resources
curl_close($curl);


</code></pre>



;T;
@ÄI" /guides/examples/getpython/;T{;{;I"J
<p>The request in python</p>

<pre><code class="language-python"><span class="kn">import</span> <span class="nn">urllib2</span>

<span class="n">PIDSERVICE_URL</span><span class="o">=</span><span class="s">"THE_SERVICE_URL_WITH_PREFIX"</span> <span class="c">#dont forget to add "/" at the end</span>
<span class="n">PIDSERVICE_USER</span><span class="o">=</span><span class="s">"YOURUSERNAME"</span>
<span class="n">PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s">"YOURPASSWORD"</span>
<span class="n">HANDLENAME</span><span class="o">=</span><span class="s">"YOUR_PID"</span> <span class="c">#for example "66742AB2-5685-11E3-A413-1C6F65A666B5"</span>
<span class="n">URL_TO_OPEN</span><span class="o">=</span><span class="n">PIDSERVICE_URL</span><span class="o">+</span><span class="n">HANDLENAME</span>
<span class="n">DATAURL</span><span class="o">=</span><span class="s">''</span>

<span class="c"># create a password manager</span>
<span class="n">password_mgr</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPPasswordMgrWithDefaultRealm</span><span class="p">()</span>

<span class="c"># Add the username and password.</span>
<span class="n">password_mgr</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">PIDSERVICE_URL</span><span class="p">,</span> <span class="n">PIDSERVICE_USER</span><span class="p">,</span> <span class="n">PIDSERVICE_PASSWD</span><span class="p">)</span>

<span class="n">handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">(</span><span class="n">password_mgr</span><span class="p">)</span>

<span class="c"># create "opener" (OpenerDirector instance)</span>
<span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>

<span class="c"># use the opener to fetch a URL</span>
<span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">PIDSERVICE_URL</span><span class="p">)</span>

<span class="c"># Install the opener.</span>
<span class="c"># Now all calls to urllib2.urlopen use the created opener.</span>
<span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>

<span class="n">REQUESTDATA</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">URL_TO_OPEN</span><span class="p">)</span>
<span class="k">try</span><span class="p">:</span>
    <span class="n">DATAURL</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">REQUESTDATA</span><span class="p">)</span>
<span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"404-Not found"</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">401</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"401-Authentication failed"</span>

<span class="k">if</span> <span class="n">DATAURL</span><span class="p">:</span>
    <span class="c"># Getting the code</span>
    <span class="k">print</span> <span class="s">"This gets the code: "</span><span class="p">,</span> <span class="n">DATAURL</span><span class="o">.</span><span class="n">code</span></code></pre>

;T;	I"´
The request in python

<pre><code class="language-python">
import urllib2

PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX" #dont forget to add "/" at the end
PIDSERVICE_USER="YOURUSERNAME"
PIDSERVICE_PASSWD="YOURPASSWORD"
HANDLENAME="YOUR_PID" #for example "66742AB2-5685-11E3-A413-1C6F65A666B5"
URL_TO_OPEN=PIDSERVICE_URL+HANDLENAME
DATAURL=''

# create a password manager
password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()

# Add the username and password.
password_mgr.add_password(None, PIDSERVICE_URL, PIDSERVICE_USER, PIDSERVICE_PASSWD)

handler = urllib2.HTTPBasicAuthHandler(password_mgr)

# create "opener" (OpenerDirector instance)
opener = urllib2.build_opener(handler)

# use the opener to fetch a URL
opener.open(PIDSERVICE_URL)

# Install the opener.
# Now all calls to urllib2.urlopen use the created opener.
urllib2.install_opener(opener)

REQUESTDATA = urllib2.Request(URL_TO_OPEN)
try:
    DATAURL = urllib2.urlopen(REQUESTDATA)
except urllib2.URLError, e:
    if e.code == 404:
        print "404-Not found"
    if e.code == 401:
        print "401-Authentication failed"

if DATAURL:
    # Getting the code
    print "This gets the code: ", DATAURL.code
 
</code></pre>

;T;
@ÖI"/guides/examples/getres/;T{;{;I"$<h3 id="the-response">The response:</h3>
<ul>
  <li>HTTP/1.1 200 OK: (Success)</li>
  <li>HTTP/1.1 401 Unauthorized: Your username or your password is wrong</li>
  <li>HTTP/1.1 404 NOT found: The url doesn‚Äôt exist</li>
</ul>

<p>After a successful request, the response consists of an array of the PID and an array of all the information that apply to it. The response provides the idx, the type, and all the data described in the data model. </p>

<pre><code>
Get all data:  [
{
"idx":1,
"type":"URL",
"parsed_data":"http://www.grnet.gr/",
"data":"aHR0cDovL3d3dy5ncm5ldC5nci8=",
"timestamp":"2013-11-26T11:58:14Z",
"ttl_type":0,
"ttl":86400,
"refs":[],
"privs":"rwr-"
},
{
"idx":2,
"type":"URL",
"parsed_data":"https://www.grnet.gr/en/node/64",
"data":"aHR0cHM6Ly93d3cuZ3JuZXQuZ3IvZW4vbm9kZS82NA==",
"timestamp":"2013-11-26T11:58:14Z",
"ttl_type":0,
"ttl":86400,
"refs":[],
"privs":"rwr-"
},
{
"idx":3,
"type":"INST",
"parsed_data":"CLARIN-EL",
"data":"Q0xBUklOLUVM",
"timestamp":"2013-11-26T11:58:14Z",
"ttl_type":0,
"ttl":86400,
"refs":[],
"privs":"rwr-"
},

{
"idx":100,
"type":"HS_ADMIN",
"parsed_data":{
"adminId":"0.NA/11239",
"adminIdIndex":300,
"perms":{
"add_handle":true,
"delete_handle":true,
"add_naming_auth":false,
"delete_naming_auth":false,
"modify_value":true,
"remove_value":true,
"add_value":true,
"read_value":true,
"modify_admin":true,
"remove_admin":true,
"add_admin":true,
"list_handles":false
}
},
"data":"B/MAAAAKMC5OQS8xMTIzOQAAASw=",
"timestamp":"2013-11-15T14:25:58Z",
"ttl_type":0,
"ttl":86400,
"refs":[],
"privs":"rwr-"
}
]
</code></pre>

;T;	I"ﬁ### The response:
- HTTP/1.1 200 OK: (Success)
- HTTP/1.1 401 Unauthorized: Your username or your password is wrong
- HTTP/1.1 404 NOT found: The url doesn't exist

After a successful request, the response consists of an array of the PID and an array of all the information that apply to it. The response provides the idx, the type, and all the data described in the data model. 

<pre><code>
Get all data:  [
{
"idx":1,
"type":"URL",
"parsed_data":"http://www.grnet.gr/",
"data":"aHR0cDovL3d3dy5ncm5ldC5nci8=",
"timestamp":"2013-11-26T11:58:14Z",
"ttl_type":0,
"ttl":86400,
"refs":[],
"privs":"rwr-"
},
{
"idx":2,
"type":"URL",
"parsed_data":"https://www.grnet.gr/en/node/64",
"data":"aHR0cHM6Ly93d3cuZ3JuZXQuZ3IvZW4vbm9kZS82NA==",
"timestamp":"2013-11-26T11:58:14Z",
"ttl_type":0,
"ttl":86400,
"refs":[],
"privs":"rwr-"
},
{
"idx":3,
"type":"INST",
"parsed_data":"CLARIN-EL",
"data":"Q0xBUklOLUVM",
"timestamp":"2013-11-26T11:58:14Z",
"ttl_type":0,
"ttl":86400,
"refs":[],
"privs":"rwr-"
},

{
"idx":100,
"type":"HS_ADMIN",
"parsed_data":{
"adminId":"0.NA/11239",
"adminIdIndex":300,
"perms":{
"add_handle":true,
"delete_handle":true,
"add_naming_auth":false,
"delete_naming_auth":false,
"modify_value":true,
"remove_value":true,
"add_value":true,
"read_value":true,
"modify_admin":true,
"remove_admin":true,
"add_admin":true,
"list_handles":false
}
},
"data":"B/MAAAAKMC5OQS8xMTIzOQAAASw=",
"timestamp":"2013-11-15T14:25:58Z",
"ttl_type":0,
"ttl":86400,
"refs":[],
"privs":"rwr-"
}
]
</code></pre>

;T;
@äI"/guides/examples/listcurl/;T{;{;I"∂<p>The request in curl</p>

<pre><code>
curl -D- -u "YOURUSERNAME:YOURPASSWORD" -X GET -H "Content-Type: application/json" https://epic.grnet.gr/api/v2/handles/11239/
</code></pre>

;T;	I"ØThe request in curl

<pre><code>
curl -D- -u "YOURUSERNAME:YOURPASSWORD" -X GET -H "Content-Type: application/json" https://epic.grnet.gr/api/v2/handles/11239/
</code></pre>

;T;
@èI"/guides/examples/listperl/;T{;{;I"Eﬁ
<p>The request in perl</p>

<pre><code class="language-perl"><span class="c1">#!/usr/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Getopt::</span><span class="n">Long</span><span class="p">;</span>
<span class="k">use</span> <span class="n">Switch</span> <span class="s">'Perl5'</span><span class="p">,</span> <span class="s">'Perl6'</span><span class="p">;</span>
<span class="k">use</span> <span class="n">JSON</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$fullargv0</span> <span class="o">=</span> <span class="nv">$0</span><span class="p">;</span>
<span class="k">my</span> <span class="p">(</span><span class="nv">$argv0</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$fullargv0</span> <span class="o">=~</span><span class="sr"> /([^\/\\]+)$/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">%settings</span> <span class="o">=</span> <span class="p">(</span>
<span class="s">'debug'</span> <span class="o">=&gt;</span> <span class="s">'False'</span><span class="p">,</span>
<span class="s">'handle'</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="s">'action'</span> <span class="o">=&gt;</span><span class="s">'get'</span><span class="p">,</span>
	<span class="s">'credentials'</span> 	<span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'username'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'password'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'baseuri'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'data'</span>	<span class="o">=&gt;</span><span class="p">{</span>
		<span class="s">'get'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
		<span class="s">'putpost'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'format'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'headerextra'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="s">'type'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'url'</span><span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'pid'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
<span class="p">},</span>
<span class="p">);</span>

<span class="c1"># Main subroutine</span>
<span class="k">sub </span><span class="nf">main</span> <span class="p">{</span>

	<span class="c1">#Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Get the script arguments</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">)</span> <span class="o">=</span> <span class="n">get_arguments</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span>

	<span class="k">if</span><span class="p">(</span> <span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> 
		<span class="n">performGet</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span> 

	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>
<span class="p">}</span>
 
<span class="c1"># Subroutine to perform a GET action</span>
<span class="k">sub </span><span class="nf">performGet</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1">#construct url and headers</span>
	<span class="k">my</span> <span class="nv">$url</span><span class="o">=</span><span class="s">"$settings_ref-&gt;{handle}-&gt;{credentials}-&gt;{baseuri}"</span><span class="p">;</span>
	<span class="nb">printf</span><span class="p">(</span><span class="s">"The constructed url is        : %s\n"</span><span class="p">,</span><span class="nv">$url</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="k">my</span> <span class="nv">@httpHeaders</span> <span class="o">=</span> <span class="p">(</span><span class="s">'Accept: application/json'</span> <span class="p">)</span> <span class="p">;</span>
	<span class="nb">push</span><span class="p">(</span><span class="nv">@httpHeaders</span><span class="p">,</span> <span class="s">"$settings_ref-&gt;{handle}-&gt;{headerextra}"</span> <span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="p">;</span>

	<span class="c1"># perform action</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_content_type</span> <span class="p">)</span> <span class="o">=</span> <span class="n">httpGet</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">,</span> <span class="nv">$url</span><span class="p">,</span> <span class="o">\</span><span class="nv">@httpHeaders</span><span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

			<span class="c1"># show only types we want to show. implicit is that we than only show type and parsed_data</span>
			<span class="k">unless</span> <span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /none/</span> <span class="p">)</span> <span class="p">{</span>

				<span class="k">if</span> <span class="p">(</span><span class="nb">ref</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">})</span> <span class="ow">eq</span> <span class="s">'ARRAY'</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">print</span> <span class="s">"We have an array of hashes \n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># grep so we have only the hashes with the selected fields</span>
					<span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span><span class="nv">$_</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /$settings_ref-&gt;{handle}-&gt;{type}/</span> <span class="p">}</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="p">;</span> 
					<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># delete items from retrieved handle which are not type and parsed_data</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$hash</span> <span class="p">(</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}})</span> <span class="p">{</span>
						<span class="k">foreach</span> <span class="k">my</span> <span class="nv">$key</span> <span class="p">(</span> <span class="nb">keys</span> <span class="nv">%$hash</span> <span class="p">)</span> <span class="p">{</span>			
							<span class="k">print</span> <span class="s">"key: $key, value: $hash-&gt;{$key}\n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
							<span class="k">unless</span> <span class="p">(</span> <span class="nv">$key</span> <span class="o">=~</span><span class="sr"> /^type|^parsed_data/</span> <span class="p">)</span> <span class="p">{</span>
								<span class="nb">delete</span> <span class="nv">$hash</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$key</span><span class="p">};</span>
							<span class="p">}</span>
						<span class="p">}</span>	
					<span class="p">}</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="k">print</span> <span class="s">"We have a hash of arrays of hashes \n"</span> <span class="k">if</span>  <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
					<span class="c1"># grep so we have only the hashes with the selected fields</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$array</span> <span class="p">(</span><span class="nb">values</span><span class="p">(</span><span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}))</span> <span class="p">{</span> 
						<span class="nv">@$array</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span><span class="nv">$_</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /$settings_ref-&gt;{handle}-&gt;{type}/</span> <span class="p">}</span> <span class="nv">@$array</span> <span class="p">;</span>
					<span class="p">}</span> 
					<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># delete items from retrieved handle which are not type and parsed_data</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$array</span> <span class="p">(</span><span class="nb">values</span><span class="p">(</span><span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}))</span> <span class="p">{</span> 
						<span class="k">for</span> <span class="k">my</span> <span class="nv">$hash</span> <span class="p">(</span> <span class="nv">@$array</span> <span class="p">)</span> <span class="p">{</span>
							<span class="k">foreach</span> <span class="k">my</span> <span class="nv">$key</span> <span class="p">(</span> <span class="nb">keys</span> <span class="nv">%$hash</span> <span class="p">)</span> <span class="p">{</span>			
								<span class="k">print</span> <span class="s">"key: $key, value: $hash-&gt;{$key}\n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
								<span class="k">unless</span> <span class="p">(</span> <span class="nv">$key</span> <span class="o">=~</span><span class="sr"> /^type|^parsed_data/</span> <span class="p">)</span> <span class="p">{</span>
									<span class="nb">delete</span> <span class="nv">$hash</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$key</span><span class="p">};</span>
								<span class="p">}</span>
							<span class="p">}</span>
						<span class="p">}</span>	
					<span class="p">}</span>
				<span class="p">}</span>
			<span class="p">}</span>

			<span class="c1"># print the data in json format, pretty if the parameter is set</span>
			<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
			<span class="k">my</span> <span class="nv">$json_printed</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /pretty/</span> <span class="p">)</span> <span class="p">{</span>
				<span class="nv">$json_printed</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">pretty</span><span class="o">-&gt;</span><span class="n">encode</span><span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">);</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nv">$json_printed</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">encode</span><span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">);</span>
			<span class="p">}</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$json_printed\n"</span><span class="p">);</span>

		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">);</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'An error happened\n'</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1"># Subroutine to retrieve data via a http GET</span>
<span class="k">sub </span><span class="nf">httpGet</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$httpHeaders_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="k">print</span><span class="p">(</span><span class="s">'Entering httpGet              :\n'</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

	<span class="c1"># local varables</span>
	<span class="k">my</span> <span class="nv">$response_body</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_code</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_content_type</span><span class="p">;</span>

	<span class="k">my</span> <span class="nv">$curl</span> <span class="o">=</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>

	<span class="c1"># set options for the curl http request</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="nv">$httpHeaders_ref</span> <span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_USERNAME</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">});</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_PASSWORD</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">});</span>

	<span class="c1"># A filehandle, reference to a scalar or reference to a typeglob can be used here.</span>
	<span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">'&gt;'</span><span class="p">,</span> <span class="o">\</span><span class="nv">$response_body</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">"$!"</span><span class="p">;</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_WRITEDATA</span><span class="p">,</span> <span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Do the actual curl http request</span>
	<span class="k">my</span> <span class="nv">$returncode</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">perform</span><span class="p">;</span>

	<span class="c1"># close file handle</span>
	<span class="nb">close</span><span class="p">(</span><span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="nv">$response_code</span>         <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_HTTP_CODE</span><span class="p">);</span>
		<span class="nv">$response_content_type</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_CONTENT_TYPE</span><span class="p">);</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response code        : $response_code\n"</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response content type: $response_content_type\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_body\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

			<span class="c1"># convert from json and put in correct place </span>
			<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
			<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$response_body</span><span class="p">);</span>

		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="c1"># Error code, type of error, error message</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"An error happened: $returncode "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">strerror</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">)</span><span class="o">.</span><span class="s">" "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">errbuf</span><span class="o">.</span><span class="s">"\n"</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">,</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="nv">$response_content_type</span> <span class="p">);</span>
<span class="p">}</span>

<span class="c1"># Subroutine to get and check all script arguments</span>
<span class="k">sub </span><span class="nf">get_arguments</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Define local variables</span>
	<span class="k">my</span> <span class="nv">%arguments</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$username</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$password</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$baseUri</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$pidUrl</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$credentials</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$handleData</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$type</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$returncode</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$message</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">@sources</span><span class="p">;</span>

	<span class="n">GetOptions</span><span class="p">(</span> <span class="s">'h|help'</span>    <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">},</span>
		<span class="s">'user=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$username</span><span class="p">,</span>
		<span class="s">'passwd=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$password</span><span class="p">,</span>
		<span class="s">'base=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$baseUri</span><span class="p">,</span>
		<span class="s">'pid=s'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$pidUrl</span><span class="p">,</span>
		<span class="s">'cred=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$credentials</span><span class="p">,</span>
		<span class="s">'data=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$handleData</span><span class="p">,</span>
		<span class="s">'type=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$type</span><span class="p">,</span>
		<span class="s">'header=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$header</span><span class="p">,</span>
		<span class="s">'get'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">},</span>
		<span class="s">'put'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">},</span>
		<span class="s">'delete'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">},</span>
		<span class="s">'post'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">},</span>
		<span class="s">'pretty'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">},</span>
		<span class="s">'d|debug'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">},</span>
	<span class="p">);</span>

	<span class="c1"># Check the help flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># Set the returncode</span>
		<span class="nv">$returncode</span><span class="o">=</span><span class="mi">255</span><span class="p">;</span>

		<span class="nv">$message</span> <span class="o">=</span> <span class="n">print_help</span><span class="p">();</span>
	<span class="p">}</span>
	
	<span class="c1"># Check the debug flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=</span> <span class="s">'True'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'debug is                      : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the pretty flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=</span> <span class="s">'pretty'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'pretty format printing is     : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the action flag's (get,put,delete,post,search,nagios)</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'get'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'put'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'delete'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'post'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the username</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$username</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$username</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the password</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$password</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$password</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the base uri</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$baseUri</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$baseUri</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the pid url</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$pidUrl</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$pidUrl</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The pid is                    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the handle data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$handleData</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$handleData</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The data is                   : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the type data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$type</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$type</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The type(s) to show is/are    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>
	
	<span class="c1"># check the header data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$header</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$header</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The extra header info is      : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the credentials data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$credentials</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># read the credentials from the file</span>
		<span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$credentials</span><span class="p">;</span>
		<span class="k">my</span> <span class="nv">$json_text</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span>
			<span class="nb">open</span><span class="p">(</span><span class="k">my</span> <span class="nv">$json_fh</span><span class="p">,</span> <span class="s">"&lt;:encoding(UTF-8)"</span><span class="p">,</span> <span class="nv">$filename</span><span class="p">)</span>  <span class="ow">or</span> <span class="nb">die</span><span class="p">(</span><span class="s">"Can't open $filename: $!\n"</span><span class="p">);</span>
			<span class="nb">local</span> <span class="vg">$/</span><span class="p">;</span>
			<span class="sr">&lt;$json_fh&gt;</span>
		<span class="p">};</span>

		<span class="c1"># convert from json and put in correct place </span>
		<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$json_text</span><span class="p">);</span>

		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="p">}</span>

	<span class="c1"># Print the message</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$message</span> <span class="p">)</span> <span class="p">{</span>

		<span class="k">print</span> <span class="s">"$message\n"</span><span class="p">;</span>
	<span class="p">};</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>

<span class="p">};</span></code></pre>

;T;	I"1,
The request in perl

<pre><code class="language-perl">

#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;
use Switch 'Perl5', 'Perl6';
use JSON;
use WWW::Curl::Easy;

my $fullargv0 = $0;
my ($argv0) = $fullargv0 =~ /([^\/\\]+)$/;

my %settings = (
'debug' => 'False',
'handle' => {
	'action' =>'get',
	'credentials' 	=>	{
		'username'	=> 'empty',
		'password'	=> 'empty',
		'baseuri'	=> 'empty',
	},
	'data'	=>{
		'get'	=> '',
		'putpost'=> '',
	},
	'format' => 'none',
	'headerextra'	=> '',
	'type' => 'none',
	'url'=>	{
		'pid'=> '',
	},
},
);

# Main subroutine
sub main {

	#Get the subroutine arguments
	my $settings_ref = shift;

	# Get the script arguments
	(my $returncode) = get_arguments($settings_ref);

	if( $returncode == 0 ) 
		performGet($settings_ref); 

	return($returncode);
}
 
# Subroutine to perform a GET action
sub performGet {

	# Get the subroutine arguments
	my $settings_ref = shift;

	#construct url and headers
	my $url="$settings_ref->{handle}->{credentials}->{baseuri}";
	printf("The constructed url is        : %s\n",$url) if $settings_ref->{debug} =~ /True/ ;
	my @httpHeaders = ('Accept: application/json' ) ;
	push(@httpHeaders, "$settings_ref->{handle}->{headerextra}" ) if $settings_ref->{handle}->{headerextra} ;

	# perform action
	(my $returncode, my $response_code, my $response_content_type ) = httpGet($settings_ref, $url, \@httpHeaders);

	# Looking at the results of the curl request
	if ($returncode == 0) {
		print('Transfer went ok\n') if $settings_ref->{debug} =~ /True/ ;

		# judge result and next action based on $response_code
		if ($response_code >= 200 && $response_code < 300 ) {
			print('The request went ok\n') if $settings_ref->{debug} =~ /True/ ;
			print Dumper $settings_ref->{handle}->{data}->{get} if $settings_ref->{debug} =~ /True/ ;

			# show only types we want to show. implicit is that we than only show type and parsed_data
			unless ( $settings_ref->{handle}->{type} =~ /none/ ) {

				if (ref($settings_ref->{handle}->{data}->{get}) eq 'ARRAY') {
					print "We have an array of hashes \n" if $settings_ref->{debug} =~ /True/ ;

					# grep so we have only the hashes with the selected fields
					@{$settings_ref->{handle}->{data}->{get}} = grep {$_->{type} =~ /$settings_ref->{handle}->{type}/ } @{$settings_ref->{handle}->{data}->{get}} ; 
					print Dumper @{$settings_ref->{handle}->{data}->{get}} if $settings_ref->{debug} =~ /True/ ;

					# delete items from retrieved handle which are not type and parsed_data
					for my $hash ( @{$settings_ref->{handle}->{data}->{get}}) {
						foreach my $key ( keys %$hash ) {			
							print "key: $key, value: $hash->{$key}\n" if $settings_ref->{debug} =~ /True/ ;
							unless ( $key =~ /^type|^parsed_data/ ) {
								delete $hash->{$key};
							}
						}	
					}
				} else {
					print "We have a hash of arrays of hashes \n" if  $settings_ref->{debug} =~ /True/ ;
					# grep so we have only the hashes with the selected fields
					for my $array (values(%{$settings_ref->{handle}->{data}->{get}})) { 
						@$array = grep {$_->{type} =~ /$settings_ref->{handle}->{type}/ } @$array ;
					} 
					print Dumper %{$settings_ref->{handle}->{data}->{get}} if $settings_ref->{debug} =~ /True/ ;

					# delete items from retrieved handle which are not type and parsed_data
					for my $array (values(%{$settings_ref->{handle}->{data}->{get}})) { 
						for my $hash ( @$array ) {
							foreach my $key ( keys %$hash ) {			
								print "key: $key, value: $hash->{$key}\n" if $settings_ref->{debug} =~ /True/ ;
								unless ( $key =~ /^type|^parsed_data/ ) {
									delete $hash->{$key};
								}
							}
						}	
					}
				}
			}

			# print the data in json format, pretty if the parameter is set
			my $json = JSON->new;
			my $json_printed;
			if ( $settings_ref->{handle}->{format} =~ /pretty/ ) {
				$json_printed = $json->pretty->encode( $settings_ref->{handle}->{data}->{get} );
			} else {
				$json_printed = $json->encode( $settings_ref->{handle}->{data}->{get} );
			}
			print("$json_printed\n");

		} else {
			print('The request went NOT ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_code\n");
		} 

	} else {
		print('An error happened\n');
	}
}

# Subroutine to retrieve data via a http GET
sub httpGet {

	# Get the subroutine arguments
	my $settings_ref = shift;
	my $url = shift;
	my $httpHeaders_ref = shift;

	print('Entering httpGet              :\n')         if $settings_ref->{debug} =~ /True/;

	# local varables
	my $response_body;
	my $response_code;
	my $response_content_type;

	my $curl = WWW::Curl::Easy->new;

	# set options for the curl http request
	$curl->setopt(CURLOPT_HEADER, 0);
	$curl->setopt(CURLOPT_HTTPHEADER, $httpHeaders_ref );
	$curl->setopt(CURLOPT_URL, $url);
	$curl->setopt(CURLOPT_USERNAME, $settings_ref->{handle}->{credentials}->{username});
	$curl->setopt(CURLOPT_PASSWORD, $settings_ref->{handle}->{credentials}->{password});

	# A filehandle, reference to a scalar or reference to a typeglob can be used here.
	open my $fh, '>', \$response_body or die "$!";
	$curl->setopt(CURLOPT_WRITEDATA, $fh);

	# Do the actual curl http request
	my $returncode = $curl->perform;

	# close file handle
	close($fh);

	# Looking at the results of the curl request
	if ($returncode == 0) {
		print('Transfer went ok\n') if $settings_ref->{debug} =~ /True/ ;

		$response_code         = $curl->getinfo(CURLINFO_HTTP_CODE);
		$response_content_type = $curl->getinfo(CURLINFO_CONTENT_TYPE);
		print("Received response code        : $response_code\n")         if $settings_ref->{debug} =~ /True/;
		print("Received response content type: $response_content_type\n") if $settings_ref->{debug} =~ /True/;

		# judge result and next action based on $response_code
		if ($response_code >= 200 && $response_code < 300 ) {
			print('The request went ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_body\n") if $settings_ref->{debug} =~ /True/;

			# convert from json and put in correct place 
			my $json = JSON->new;
			$settings_ref->{handle}->{data}->{get} = $json->decode($response_body);

		} else {
			print('The request went NOT ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_code\n") if $settings_ref->{debug} =~ /True/;
		} 

	} else {
		# Error code, type of error, error message
		print("An error happened: $returncode ".$curl->strerror($returncode)." ".$curl->errbuf."\n");
	}

	# Return the results
	return($returncode, $response_code, $response_content_type );
}

# Subroutine to get and check all script arguments
sub get_arguments {

	# Get the subroutine arguments
	my $settings_ref = shift;

	# Define local variables
	my %arguments;
	my $username;
	my $password;
	my $baseUri;
	my $pidUrl;
	my $credentials;
	my $handleData;
	my $type;
	my $header;
	my $returncode=0;
	my $message;
	my @sources;

	GetOptions( 'h|help'    => \$arguments{help},
		'user=s'		=> \$username,
		'passwd=s'		=> \$password,
		'base=s'		=> \$baseUri,
		'pid=s'			=> \$pidUrl,
		'cred=s'		=> \$credentials,
		'data=s'		=> \$handleData,
		'type=s'		=> \$type,
		'header=s'		=> \$header,
		'get'			=> \$arguments{get},
		'put'			=> \$arguments{put},
		'delete'		=> \$arguments{delete},
		'post'			=> \$arguments{post},
		'pretty'		=> \$arguments{pretty},
		'd|debug'		=> \$arguments{debug},
	);

	# Check the help flag
	if( $arguments{help} ) {

		# Set the returncode
		$returncode=255;

		$message = print_help();
	}
	
	# Check the debug flag
	if( $arguments{debug} ) {

		$settings_ref->{debug} = 'True';
		printf('debug is                      : on\n') if $settings_ref->{debug} =~ /True/ ;

	}

	# Check the pretty flag
	if( $arguments{pretty} ) {

		$settings_ref->{handle}->{format} = 'pretty';
		printf('pretty format printing is     : on\n') if $settings_ref->{debug} =~ /True/ ;

	}

	# Check the action flag's (get,put,delete,post,search,nagios)
	if( $arguments{get} ) {

		$settings_ref->{handle}->{action} = 'get';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{put} ) {

		$settings_ref->{handle}->{action} = 'put';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{delete} ) {

		$settings_ref->{handle}->{action} = 'delete';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{post} ) {

		$settings_ref->{handle}->{action} = 'post';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the username
	if( $username ) {

		$settings_ref->{handle}->{credentials}->{username} = $username;
		printf("The username is               : %s\n",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the password
	if( $password ) {

		$settings_ref->{handle}->{credentials}->{password} = $password;
		printf("The password is               : %s\n",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the base uri
	if( $baseUri ) {

		$settings_ref->{handle}->{credentials}->{baseuri} = $baseUri;
		printf("The base uri is               : %s\n",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the pid url
	if( $pidUrl ) {

		$settings_ref->{handle}->{url}->{pid} = $pidUrl;
		printf("The pid is                    : %s\n",$settings_ref->{handle}->{url}->{pid}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the handle data
	if( $handleData ) {

		$settings_ref->{handle}->{data}->{putpost} = $handleData;
		printf("The data is                   : %s\n",$settings_ref->{handle}->{data}->{putpost}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the type data
	if( $type ) {

		$settings_ref->{handle}->{type} = $type;
		printf("The type(s) to show is/are    : %s\n",$settings_ref->{handle}->{type}) if $settings_ref->{debug} =~ /True/ ;

	}
	
	# check the header data
	if( $header ) {

		$settings_ref->{handle}->{headerextra} = $header;
		printf("The extra header info is      : %s\n",$settings_ref->{handle}->{headerextra}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the credentials data
	if( $credentials ) {

		# read the credentials from the file
		my $filename = $credentials;
		my $json_text = do {
			open(my $json_fh, "<:encoding(UTF-8)", $filename)  or die("Can't open $filename: $!\n");
			local $/;
			<$json_fh>
		};

		# convert from json and put in correct place 
		my $json = JSON->new;
		$settings_ref->{handle}->{credentials} = $json->decode($json_text);

		printf("The username is               : %s\n",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;
		printf("The password is               : %s\n",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;
		printf("The base uri is               : %s\n",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;
	}

	# Print the message
	if( $message ) {

		print "$message\n";
	};

	# Return the results
	return($returncode);

};

</code></pre>

;T;
@îI"/guides/examples/listphp/;T{;{;I"â
<p>The request in php </p>

<pre><code class="language-php5"><span class="nv">$PIDSERVICE_URL</span><span class="o">=</span><span class="s2">"THE_SERVICE_URL_WITH_PREFIX"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_USER</span><span class="o">=</span><span class="s2">"YOURUSERNAME"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s2">"YOURPASSWORD"</span><span class="p">;</span>
<span class="nv">$GETPIDURL</span> <span class="o">=</span><span class="s2">"THE_SERVICE_URL_WITH_PREFIX"</span><span class="p">;</span>

<span class="c1">// Get cURL resource</span>
<span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
<span class="c1">// Set some options - we are passing in a useragent too here</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span><span class="nx">CURLOPT_URL</span><span class="p">,</span><span class="nv">$GETPIDURL</span><span class="p">);</span>
<span class="c1">// Set the authentication options</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_USERPWD</span><span class="p">,</span> <span class="nv">$PIDSERVICE_USER</span><span class="o">.</span><span class="s2">":"</span><span class="o">.</span><span class="nv">$PIDSERVICE_PASSWD</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPAUTH</span><span class="p">,</span> <span class="nx">CURLAUTH_BASIC</span><span class="p">);</span>

<span class="c1">// Include header in result? (0 = yes, 1 = no)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="c1">// Should cURL return or print out the data? (true = return, false = print)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">// Download the given URL, and return output</span>
<span class="nv">$output</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>

<span class="nv">$info</span> <span class="o">=</span> <span class="nb">curl_getinfo</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">200</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"PID DATA"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">401</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Authorization problem"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">404</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Not found"</span><span class="p">;</span>

<span class="c1">// Close the cURL resource, and free system resources</span>
<span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span></code></pre>

;T;	I"@
The request in php 

<pre><code class="language-php5">
$PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX";
$PIDSERVICE_USER="YOURUSERNAME";
$PIDSERVICE_PASSWD="YOURPASSWORD";
$GETPIDURL ="THE_SERVICE_URL_WITH_PREFIX";

// Get cURL resource
$curl = curl_init();
// Set some options - we are passing in a useragent too here
curl_setopt($curl,CURLOPT_URL,$GETPIDURL);
// Set the authentication options
curl_setopt($curl, CURLOPT_USERPWD, $PIDSERVICE_USER.":".$PIDSERVICE_PASSWD);
curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);

// Include header in result? (0 = yes, 1 = no)
curl_setopt($curl, CURLOPT_HEADER, 0);
// Should cURL return or print out the data? (true = return, false = print)
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

// Download the given URL, and return output
$output = curl_exec($curl);

$info = curl_getinfo($curl);
if( $info['http_code']==200) echo "PID DATA";
if( $info['http_code']==401) echo "Authorization problem";
if( $info['http_code']==404) echo "Not found";

// Close the cURL resource, and free system resources
curl_close($curl);

</code></pre>



;T;
@ôI"!/guides/examples/listpython/;T{;{;I"X
<p>The request in python</p>

<pre><code class="language-python"><span class="kn">import</span> <span class="nn">urllib2</span>

<span class="n">PIDSERVICE_URL</span><span class="o">=</span><span class="s">"THE_SERVICE_URL_WITH_PREFIX"</span>
<span class="n">PIDSERVICE_USER</span><span class="o">=</span><span class="s">"YOURUSERNAME"</span>
<span class="n">PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s">"YOURPASSWORD"</span>
<span class="n">URL_TO_OPEN</span><span class="o">=</span><span class="s">"THE_SERVICE_URL_WITH_PREFIX"</span>
<span class="n">DATAURL</span><span class="o">=</span><span class="s">''</span><span class="p">;</span>

<span class="c"># create a password manager</span>
<span class="n">password_mgr</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPPasswordMgrWithDefaultRealm</span><span class="p">()</span>

<span class="c"># Add the username and password.</span>
<span class="n">password_mgr</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">PIDSERVICE_URL</span><span class="p">,</span> <span class="n">PIDSERVICE_USER</span><span class="p">,</span> <span class="n">PIDSERVICE_PASSWD</span><span class="p">)</span>

<span class="n">handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">(</span><span class="n">password_mgr</span><span class="p">)</span>

<span class="c"># create "opener" (OpenerDirector instance)</span>
<span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>

<span class="c"># use the opener to fetch a URL</span>
<span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">PIDSERVICE_URL</span><span class="p">)</span>

<span class="c"># Install the opener.</span>
<span class="c"># Now all calls to urllib2.urlopen use the created opener.</span>
<span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>

<span class="n">REQUESTDATA</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">URL_TO_OPEN</span><span class="p">)</span>
<span class="k">try</span><span class="p">:</span>
    <span class="n">DATAURL</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">REQUESTDATA</span><span class="p">)</span>
<span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"404-Not found"</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">401</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"401-Authentication failed"</span>

<span class="k">if</span> <span class="n">DATAURL</span><span class="p">:</span>
    <span class="c"># Getting the code</span>
    <span class="k">print</span> <span class="s">"This gets the code: "</span><span class="p">,</span> <span class="n">DATAURL</span><span class="o">.</span><span class="n">code</span></code></pre>

;T;	I"B
The request in python

<pre><code class="language-python">
import urllib2

PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX"
PIDSERVICE_USER="YOURUSERNAME"
PIDSERVICE_PASSWD="YOURPASSWORD"
URL_TO_OPEN="THE_SERVICE_URL_WITH_PREFIX"
DATAURL='';

# create a password manager
password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()

# Add the username and password.
password_mgr.add_password(None, PIDSERVICE_URL, PIDSERVICE_USER, PIDSERVICE_PASSWD)

handler = urllib2.HTTPBasicAuthHandler(password_mgr)

# create "opener" (OpenerDirector instance)
opener = urllib2.build_opener(handler)

# use the opener to fetch a URL
opener.open(PIDSERVICE_URL)

# Install the opener.
# Now all calls to urllib2.urlopen use the created opener.
urllib2.install_opener(opener)

REQUESTDATA = urllib2.Request(URL_TO_OPEN)
try:
    DATAURL = urllib2.urlopen(REQUESTDATA)
except urllib2.URLError, e:
    if e.code == 404:
        print "404-Not found"
    if e.code == 401:
        print "401-Authentication failed"

if DATAURL:
    # Getting the code
    print "This gets the code: ", DATAURL.code

</code></pre>

;T;
@ûI"/guides/examples/listres/;T{;{;I"Ê<h3 id="the-response">The response:</h3>
<ul>
  <li>HTTP/1.1 200 OK: (Success)</li>
  <li>HTTP/1.1 401 Unauthorized: Your username or your password is wrong</li>
  <li>HTTP/1.1 404 NOT found: The url doesn‚Äôt exist</li>
</ul>

<p>After a successful request, the response consists of a list of PIDs </p>

<pre><code>
GRNET
66742AB2-5685-11E3-A413-1C6F65A666B5
305F66A9-3994-42D6-A9F6-8E629126DE14
B4CF7AEA-55BB-4DB5-9D85-EB2DAD821B07
0CEEA495-71FA-460B-97A4-81E7E597B636
</code></pre>

;T;	I"†### The response:
- HTTP/1.1 200 OK: (Success)
- HTTP/1.1 401 Unauthorized: Your username or your password is wrong
- HTTP/1.1 404 NOT found: The url doesn't exist

After a successful request, the response consists of a list of PIDs 

<pre><code>
GRNET
66742AB2-5685-11E3-A413-1C6F65A666B5
305F66A9-3994-42D6-A9F6-8E629126DE14
B4CF7AEA-55BB-4DB5-9D85-EB2DAD821B07
0CEEA495-71FA-460B-97A4-81E7E597B636
</code></pre>

;T;
@£I"!/guides/examples/searchcurl/;T{;{;I"¬<p>The request in curl</p>

<pre><code>
curl -D- -u "YOURUSERNAME:YOURPASSWORD" -X GET -H "Content-Type: application/json" https://epic.grnet.gr/api/v2/handles/11239/?URL=*grnet*
</code></pre>

;T;	I"ªThe request in curl

<pre><code>
curl -D- -u "YOURUSERNAME:YOURPASSWORD" -X GET -H "Content-Type: application/json" https://epic.grnet.gr/api/v2/handles/11239/?URL=*grnet*
</code></pre>

;T;
@®I"!/guides/examples/searchperl/;T{;{;I"ﬂ
<p>The request in perl</p>

<pre><code class="language-perl"><span class="c1">#!/usr/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Getopt::</span><span class="n">Long</span><span class="p">;</span>
<span class="k">use</span> <span class="n">Switch</span> <span class="s">'Perl5'</span><span class="p">,</span> <span class="s">'Perl6'</span><span class="p">;</span>
<span class="k">use</span> <span class="n">JSON</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$fullargv0</span> <span class="o">=</span> <span class="nv">$0</span><span class="p">;</span>
<span class="k">my</span> <span class="p">(</span><span class="nv">$argv0</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$fullargv0</span> <span class="o">=~</span><span class="sr"> /([^\/\\]+)$/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">%settings</span> <span class="o">=</span> <span class="p">(</span>
<span class="s">'debug'</span> <span class="o">=&gt;</span> <span class="s">'False'</span><span class="p">,</span>
<span class="s">'handle'</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="s">'action'</span> <span class="o">=&gt;</span><span class="s">'get'</span><span class="p">,</span>
	<span class="s">'credentials'</span> 	<span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'username'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'password'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'baseuri'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'data'</span>	<span class="o">=&gt;</span><span class="p">{</span>
		<span class="s">'get'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
		<span class="s">'putpost'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'format'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'headerextra'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="s">'type'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'url'</span><span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'pid'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
		<span class="s">'searchby'</span><span class="o">=&gt;</span> <span class="s">'url=*grnet*'</span><span class="p">,</span>
	<span class="p">},</span>
<span class="p">},</span>
<span class="p">);</span>

<span class="c1"># Main subroutine</span>
<span class="k">sub </span><span class="nf">main</span> <span class="p">{</span>

	<span class="c1">#Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Get the script arguments</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">)</span> <span class="o">=</span> <span class="n">get_arguments</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span>

	<span class="k">if</span><span class="p">(</span> <span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> 
		<span class="n">performGet</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span> 

	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>
<span class="p">}</span>
 
<span class="c1"># Subroutine to perform a GET action</span>
<span class="k">sub </span><span class="nf">performGet</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1">#construct url and headers</span>
	<span class="k">my</span> <span class="nv">$url</span><span class="o">=</span><span class="s">"$settings_ref-&gt;{handle}-&gt;{credentials}-&gt;{baseuri}$settings_ref-&gt;{handle}-&gt;{credentials}-&gt;{url}-&gt;{searchby}"</span><span class="p">;</span>
	<span class="nb">printf</span><span class="p">(</span><span class="s">"The constructed url is        : %s\n"</span><span class="p">,</span><span class="nv">$url</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="k">my</span> <span class="nv">@httpHeaders</span> <span class="o">=</span> <span class="p">(</span><span class="s">'Accept: application/json'</span> <span class="p">)</span> <span class="p">;</span>
	<span class="nb">push</span><span class="p">(</span><span class="nv">@httpHeaders</span><span class="p">,</span> <span class="s">"$settings_ref-&gt;{handle}-&gt;{headerextra}"</span> <span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="p">;</span>

	<span class="c1"># perform action</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_content_type</span> <span class="p">)</span> <span class="o">=</span> <span class="n">httpGet</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">,</span> <span class="nv">$url</span><span class="p">,</span> <span class="o">\</span><span class="nv">@httpHeaders</span><span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

			<span class="c1"># show only types we want to show. implicit is that we than only show type and parsed_data</span>
			<span class="k">unless</span> <span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /none/</span> <span class="p">)</span> <span class="p">{</span>

				<span class="k">if</span> <span class="p">(</span><span class="nb">ref</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">})</span> <span class="ow">eq</span> <span class="s">'ARRAY'</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">print</span> <span class="s">"We have an array of hashes \n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># grep so we have only the hashes with the selected fields</span>
					<span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span><span class="nv">$_</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /$settings_ref-&gt;{handle}-&gt;{type}/</span> <span class="p">}</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="p">;</span> 
					<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># delete items from retrieved handle which are not type and parsed_data</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$hash</span> <span class="p">(</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}})</span> <span class="p">{</span>
						<span class="k">foreach</span> <span class="k">my</span> <span class="nv">$key</span> <span class="p">(</span> <span class="nb">keys</span> <span class="nv">%$hash</span> <span class="p">)</span> <span class="p">{</span>			
							<span class="k">print</span> <span class="s">"key: $key, value: $hash-&gt;{$key}\n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
							<span class="k">unless</span> <span class="p">(</span> <span class="nv">$key</span> <span class="o">=~</span><span class="sr"> /^type|^parsed_data/</span> <span class="p">)</span> <span class="p">{</span>
								<span class="nb">delete</span> <span class="nv">$hash</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$key</span><span class="p">};</span>
							<span class="p">}</span>
						<span class="p">}</span>	
					<span class="p">}</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="k">print</span> <span class="s">"We have a hash of arrays of hashes \n"</span> <span class="k">if</span>  <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
					<span class="c1"># grep so we have only the hashes with the selected fields</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$array</span> <span class="p">(</span><span class="nb">values</span><span class="p">(</span><span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}))</span> <span class="p">{</span> 
						<span class="nv">@$array</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span><span class="nv">$_</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /$settings_ref-&gt;{handle}-&gt;{type}/</span> <span class="p">}</span> <span class="nv">@$array</span> <span class="p">;</span>
					<span class="p">}</span> 
					<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># delete items from retrieved handle which are not type and parsed_data</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$array</span> <span class="p">(</span><span class="nb">values</span><span class="p">(</span><span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}))</span> <span class="p">{</span> 
						<span class="k">for</span> <span class="k">my</span> <span class="nv">$hash</span> <span class="p">(</span> <span class="nv">@$array</span> <span class="p">)</span> <span class="p">{</span>
							<span class="k">foreach</span> <span class="k">my</span> <span class="nv">$key</span> <span class="p">(</span> <span class="nb">keys</span> <span class="nv">%$hash</span> <span class="p">)</span> <span class="p">{</span>			
								<span class="k">print</span> <span class="s">"key: $key, value: $hash-&gt;{$key}\n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
								<span class="k">unless</span> <span class="p">(</span> <span class="nv">$key</span> <span class="o">=~</span><span class="sr"> /^type|^parsed_data/</span> <span class="p">)</span> <span class="p">{</span>
									<span class="nb">delete</span> <span class="nv">$hash</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$key</span><span class="p">};</span>
								<span class="p">}</span>
							<span class="p">}</span>
						<span class="p">}</span>	
					<span class="p">}</span>
				<span class="p">}</span>
			<span class="p">}</span>

			<span class="c1"># print the data in json format, pretty if the parameter is set</span>
			<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
			<span class="k">my</span> <span class="nv">$json_printed</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /pretty/</span> <span class="p">)</span> <span class="p">{</span>
				<span class="nv">$json_printed</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">pretty</span><span class="o">-&gt;</span><span class="n">encode</span><span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">);</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nv">$json_printed</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">encode</span><span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">);</span>
			<span class="p">}</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$json_printed\n"</span><span class="p">);</span>

		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">);</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'An error happened\n'</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1"># Subroutine to retrieve data via a http GET</span>
<span class="k">sub </span><span class="nf">httpGet</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$httpHeaders_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="k">print</span><span class="p">(</span><span class="s">'Entering httpGet              :\n'</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

	<span class="c1"># local varables</span>
	<span class="k">my</span> <span class="nv">$response_body</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_code</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_content_type</span><span class="p">;</span>

	<span class="k">my</span> <span class="nv">$curl</span> <span class="o">=</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>

	<span class="c1"># set options for the curl http request</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="nv">$httpHeaders_ref</span> <span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_USERNAME</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">});</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_PASSWORD</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">});</span>

	<span class="c1"># A filehandle, reference to a scalar or reference to a typeglob can be used here.</span>
	<span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">'&gt;'</span><span class="p">,</span> <span class="o">\</span><span class="nv">$response_body</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">"$!"</span><span class="p">;</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_WRITEDATA</span><span class="p">,</span> <span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Do the actual curl http request</span>
	<span class="k">my</span> <span class="nv">$returncode</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">perform</span><span class="p">;</span>

	<span class="c1"># close file handle</span>
	<span class="nb">close</span><span class="p">(</span><span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="nv">$response_code</span>         <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_HTTP_CODE</span><span class="p">);</span>
		<span class="nv">$response_content_type</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_CONTENT_TYPE</span><span class="p">);</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response code        : $response_code\n"</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response content type: $response_content_type\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_body\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

			<span class="c1"># convert from json and put in correct place </span>
			<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
			<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$response_body</span><span class="p">);</span>

		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="c1"># Error code, type of error, error message</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"An error happened: $returncode "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">strerror</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">)</span><span class="o">.</span><span class="s">" "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">errbuf</span><span class="o">.</span><span class="s">"\n"</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">,</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="nv">$response_content_type</span> <span class="p">);</span>
<span class="p">}</span>

<span class="c1"># Subroutine to get and check all script arguments</span>
<span class="k">sub </span><span class="nf">get_arguments</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Define local variables</span>
	<span class="k">my</span> <span class="nv">%arguments</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$username</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$password</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$baseUri</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$pidUrl</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$credentials</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$handleData</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$type</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$returncode</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$message</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">@sources</span><span class="p">;</span>

	<span class="n">GetOptions</span><span class="p">(</span> <span class="s">'h|help'</span>    <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">},</span>
		<span class="s">'user=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$username</span><span class="p">,</span>
		<span class="s">'passwd=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$password</span><span class="p">,</span>
		<span class="s">'base=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$baseUri</span><span class="p">,</span>
		<span class="s">'pid=s'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$pidUrl</span><span class="p">,</span>
		<span class="s">'cred=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$credentials</span><span class="p">,</span>
		<span class="s">'data=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$handleData</span><span class="p">,</span>
		<span class="s">'type=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$type</span><span class="p">,</span>
		<span class="s">'header=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$header</span><span class="p">,</span>
		<span class="s">'get'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">},</span>
		<span class="s">'put'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">},</span>
		<span class="s">'delete'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">},</span>
		<span class="s">'post'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">},</span>
		<span class="s">'pretty'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">},</span>
		<span class="s">'d|debug'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">},</span>
	<span class="p">);</span>

	<span class="c1"># Check the help flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># Set the returncode</span>
		<span class="nv">$returncode</span><span class="o">=</span><span class="mi">255</span><span class="p">;</span>

		<span class="nv">$message</span> <span class="o">=</span> <span class="n">print_help</span><span class="p">();</span>
	<span class="p">}</span>
	
	<span class="c1"># Check the debug flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=</span> <span class="s">'True'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'debug is                      : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the pretty flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=</span> <span class="s">'pretty'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'pretty format printing is     : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the action flag's (get,put,delete,post,search,nagios)</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'get'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'put'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'delete'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'post'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the username</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$username</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$username</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the password</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$password</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$password</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the base uri</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$baseUri</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$baseUri</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the pid url</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$pidUrl</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$pidUrl</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The pid is                    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the handle data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$handleData</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$handleData</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The data is                   : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the type data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$type</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$type</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The type(s) to show is/are    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>
	
	<span class="c1"># check the header data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$header</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$header</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The extra header info is      : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the credentials data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$credentials</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># read the credentials from the file</span>
		<span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$credentials</span><span class="p">;</span>
		<span class="k">my</span> <span class="nv">$json_text</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span>
			<span class="nb">open</span><span class="p">(</span><span class="k">my</span> <span class="nv">$json_fh</span><span class="p">,</span> <span class="s">"&lt;:encoding(UTF-8)"</span><span class="p">,</span> <span class="nv">$filename</span><span class="p">)</span>  <span class="ow">or</span> <span class="nb">die</span><span class="p">(</span><span class="s">"Can't open $filename: $!\n"</span><span class="p">);</span>
			<span class="nb">local</span> <span class="vg">$/</span><span class="p">;</span>
			<span class="sr">&lt;$json_fh&gt;</span>
		<span class="p">};</span>

		<span class="c1"># convert from json and put in correct place </span>
		<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$json_text</span><span class="p">);</span>

		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="p">}</span>

	<span class="c1"># Print the message</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$message</span> <span class="p">)</span> <span class="p">{</span>

		<span class="k">print</span> <span class="s">"$message\n"</span><span class="p">;</span>
	<span class="p">};</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>

<span class="p">};</span></code></pre>

;T;	I"â,
The request in perl

<pre><code class="language-perl">

#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;
use Switch 'Perl5', 'Perl6';
use JSON;
use WWW::Curl::Easy;

my $fullargv0 = $0;
my ($argv0) = $fullargv0 =~ /([^\/\\]+)$/;

my %settings = (
'debug' => 'False',
'handle' => {
	'action' =>'get',
	'credentials' 	=>	{
		'username'	=> 'empty',
		'password'	=> 'empty',
		'baseuri'	=> 'empty',
	},
	'data'	=>{
		'get'	=> '',
		'putpost'=> '',
	},
	'format' => 'none',
	'headerextra'	=> '',
	'type' => 'none',
	'url'=>	{
		'pid'=> '',
		'searchby'=> 'url=*grnet*',
	},
},
);

# Main subroutine
sub main {

	#Get the subroutine arguments
	my $settings_ref = shift;

	# Get the script arguments
	(my $returncode) = get_arguments($settings_ref);

	if( $returncode == 0 ) 
		performGet($settings_ref); 

	return($returncode);
}
 
# Subroutine to perform a GET action
sub performGet {

	# Get the subroutine arguments
	my $settings_ref = shift;

	#construct url and headers
	my $url="$settings_ref->{handle}->{credentials}->{baseuri}$settings_ref->{handle}->{credentials}->{url}->{searchby}";
	printf("The constructed url is        : %s\n",$url) if $settings_ref->{debug} =~ /True/ ;
	my @httpHeaders = ('Accept: application/json' ) ;
	push(@httpHeaders, "$settings_ref->{handle}->{headerextra}" ) if $settings_ref->{handle}->{headerextra} ;

	# perform action
	(my $returncode, my $response_code, my $response_content_type ) = httpGet($settings_ref, $url, \@httpHeaders);

	# Looking at the results of the curl request
	if ($returncode == 0) {
		print('Transfer went ok\n') if $settings_ref->{debug} =~ /True/ ;

		# judge result and next action based on $response_code
		if ($response_code >= 200 && $response_code < 300 ) {
			print('The request went ok\n') if $settings_ref->{debug} =~ /True/ ;
			print Dumper $settings_ref->{handle}->{data}->{get} if $settings_ref->{debug} =~ /True/ ;

			# show only types we want to show. implicit is that we than only show type and parsed_data
			unless ( $settings_ref->{handle}->{type} =~ /none/ ) {

				if (ref($settings_ref->{handle}->{data}->{get}) eq 'ARRAY') {
					print "We have an array of hashes \n" if $settings_ref->{debug} =~ /True/ ;

					# grep so we have only the hashes with the selected fields
					@{$settings_ref->{handle}->{data}->{get}} = grep {$_->{type} =~ /$settings_ref->{handle}->{type}/ } @{$settings_ref->{handle}->{data}->{get}} ; 
					print Dumper @{$settings_ref->{handle}->{data}->{get}} if $settings_ref->{debug} =~ /True/ ;

					# delete items from retrieved handle which are not type and parsed_data
					for my $hash ( @{$settings_ref->{handle}->{data}->{get}}) {
						foreach my $key ( keys %$hash ) {			
							print "key: $key, value: $hash->{$key}\n" if $settings_ref->{debug} =~ /True/ ;
							unless ( $key =~ /^type|^parsed_data/ ) {
								delete $hash->{$key};
							}
						}	
					}
				} else {
					print "We have a hash of arrays of hashes \n" if  $settings_ref->{debug} =~ /True/ ;
					# grep so we have only the hashes with the selected fields
					for my $array (values(%{$settings_ref->{handle}->{data}->{get}})) { 
						@$array = grep {$_->{type} =~ /$settings_ref->{handle}->{type}/ } @$array ;
					} 
					print Dumper %{$settings_ref->{handle}->{data}->{get}} if $settings_ref->{debug} =~ /True/ ;

					# delete items from retrieved handle which are not type and parsed_data
					for my $array (values(%{$settings_ref->{handle}->{data}->{get}})) { 
						for my $hash ( @$array ) {
							foreach my $key ( keys %$hash ) {			
								print "key: $key, value: $hash->{$key}\n" if $settings_ref->{debug} =~ /True/ ;
								unless ( $key =~ /^type|^parsed_data/ ) {
									delete $hash->{$key};
								}
							}
						}	
					}
				}
			}

			# print the data in json format, pretty if the parameter is set
			my $json = JSON->new;
			my $json_printed;
			if ( $settings_ref->{handle}->{format} =~ /pretty/ ) {
				$json_printed = $json->pretty->encode( $settings_ref->{handle}->{data}->{get} );
			} else {
				$json_printed = $json->encode( $settings_ref->{handle}->{data}->{get} );
			}
			print("$json_printed\n");

		} else {
			print('The request went NOT ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_code\n");
		} 

	} else {
		print('An error happened\n');
	}
}

# Subroutine to retrieve data via a http GET
sub httpGet {

	# Get the subroutine arguments
	my $settings_ref = shift;
	my $url = shift;
	my $httpHeaders_ref = shift;

	print('Entering httpGet              :\n')         if $settings_ref->{debug} =~ /True/;

	# local varables
	my $response_body;
	my $response_code;
	my $response_content_type;

	my $curl = WWW::Curl::Easy->new;

	# set options for the curl http request
	$curl->setopt(CURLOPT_HEADER, 0);
	$curl->setopt(CURLOPT_HTTPHEADER, $httpHeaders_ref );
	$curl->setopt(CURLOPT_URL, $url);
	$curl->setopt(CURLOPT_USERNAME, $settings_ref->{handle}->{credentials}->{username});
	$curl->setopt(CURLOPT_PASSWORD, $settings_ref->{handle}->{credentials}->{password});

	# A filehandle, reference to a scalar or reference to a typeglob can be used here.
	open my $fh, '>', \$response_body or die "$!";
	$curl->setopt(CURLOPT_WRITEDATA, $fh);

	# Do the actual curl http request
	my $returncode = $curl->perform;

	# close file handle
	close($fh);

	# Looking at the results of the curl request
	if ($returncode == 0) {
		print('Transfer went ok\n') if $settings_ref->{debug} =~ /True/ ;

		$response_code         = $curl->getinfo(CURLINFO_HTTP_CODE);
		$response_content_type = $curl->getinfo(CURLINFO_CONTENT_TYPE);
		print("Received response code        : $response_code\n")         if $settings_ref->{debug} =~ /True/;
		print("Received response content type: $response_content_type\n") if $settings_ref->{debug} =~ /True/;

		# judge result and next action based on $response_code
		if ($response_code >= 200 && $response_code < 300 ) {
			print('The request went ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_body\n") if $settings_ref->{debug} =~ /True/;

			# convert from json and put in correct place 
			my $json = JSON->new;
			$settings_ref->{handle}->{data}->{get} = $json->decode($response_body);

		} else {
			print('The request went NOT ok\n') if $settings_ref->{debug} =~ /True/ ;
			print("$response_code\n") if $settings_ref->{debug} =~ /True/;
		} 

	} else {
		# Error code, type of error, error message
		print("An error happened: $returncode ".$curl->strerror($returncode)." ".$curl->errbuf."\n");
	}

	# Return the results
	return($returncode, $response_code, $response_content_type );
}

# Subroutine to get and check all script arguments
sub get_arguments {

	# Get the subroutine arguments
	my $settings_ref = shift;

	# Define local variables
	my %arguments;
	my $username;
	my $password;
	my $baseUri;
	my $pidUrl;
	my $credentials;
	my $handleData;
	my $type;
	my $header;
	my $returncode=0;
	my $message;
	my @sources;

	GetOptions( 'h|help'    => \$arguments{help},
		'user=s'		=> \$username,
		'passwd=s'		=> \$password,
		'base=s'		=> \$baseUri,
		'pid=s'			=> \$pidUrl,
		'cred=s'		=> \$credentials,
		'data=s'		=> \$handleData,
		'type=s'		=> \$type,
		'header=s'		=> \$header,
		'get'			=> \$arguments{get},
		'put'			=> \$arguments{put},
		'delete'		=> \$arguments{delete},
		'post'			=> \$arguments{post},
		'pretty'		=> \$arguments{pretty},
		'd|debug'		=> \$arguments{debug},
	);

	# Check the help flag
	if( $arguments{help} ) {

		# Set the returncode
		$returncode=255;

		$message = print_help();
	}
	
	# Check the debug flag
	if( $arguments{debug} ) {

		$settings_ref->{debug} = 'True';
		printf('debug is                      : on\n') if $settings_ref->{debug} =~ /True/ ;

	}

	# Check the pretty flag
	if( $arguments{pretty} ) {

		$settings_ref->{handle}->{format} = 'pretty';
		printf('pretty format printing is     : on\n') if $settings_ref->{debug} =~ /True/ ;

	}

	# Check the action flag's (get,put,delete,post,search,nagios)
	if( $arguments{get} ) {

		$settings_ref->{handle}->{action} = 'get';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{put} ) {

		$settings_ref->{handle}->{action} = 'put';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{delete} ) {

		$settings_ref->{handle}->{action} = 'delete';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	} elsif ( $arguments{post} ) {

		$settings_ref->{handle}->{action} = 'post';
		printf("The action is                 : %s\n", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the username
	if( $username ) {

		$settings_ref->{handle}->{credentials}->{username} = $username;
		printf("The username is               : %s\n",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the password
	if( $password ) {

		$settings_ref->{handle}->{credentials}->{password} = $password;
		printf("The password is               : %s\n",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the base uri
	if( $baseUri ) {

		$settings_ref->{handle}->{credentials}->{baseuri} = $baseUri;
		printf("The base uri is               : %s\n",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;

	}

	# check the pid url
	if( $pidUrl ) {

		$settings_ref->{handle}->{url}->{pid} = $pidUrl;
		printf("The pid is                    : %s\n",$settings_ref->{handle}->{url}->{pid}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the handle data
	if( $handleData ) {

		$settings_ref->{handle}->{data}->{putpost} = $handleData;
		printf("The data is                   : %s\n",$settings_ref->{handle}->{data}->{putpost}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the type data
	if( $type ) {

		$settings_ref->{handle}->{type} = $type;
		printf("The type(s) to show is/are    : %s\n",$settings_ref->{handle}->{type}) if $settings_ref->{debug} =~ /True/ ;

	}
	
	# check the header data
	if( $header ) {

		$settings_ref->{handle}->{headerextra} = $header;
		printf("The extra header info is      : %s\n",$settings_ref->{handle}->{headerextra}) if $settings_ref->{debug} =~ /True/ ;
	
	}

	# check the credentials data
	if( $credentials ) {

		# read the credentials from the file
		my $filename = $credentials;
		my $json_text = do {
			open(my $json_fh, "<:encoding(UTF-8)", $filename)  or die("Can't open $filename: $!\n");
			local $/;
			<$json_fh>
		};

		# convert from json and put in correct place 
		my $json = JSON->new;
		$settings_ref->{handle}->{credentials} = $json->decode($json_text);

		printf("The username is               : %s\n",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;
		printf("The password is               : %s\n",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;
		printf("The base uri is               : %s\n",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;
	}

	# Print the message
	if( $message ) {

		print "$message\n";
	};

	# Return the results
	return($returncode);

};


</code></pre>

;T;
@≠I" /guides/examples/searchphp/;T{;{;I"ñ
<p>The request in php </p>

<pre><code class="language-php5"><span class="nv">$PIDSERVICE_URL</span><span class="o">=</span><span class="s2">"THE_SERVICE_URL_WITH_PREFIX"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_USER</span><span class="o">=</span><span class="s2">"YOURUSERNAME"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s2">"YOURPASSWORD"</span><span class="p">;</span>
<span class="nv">$SEARCHTERM</span> <span class="o">=</span> <span class="s2">"grnet"</span><span class="p">;</span>
<span class="nv">$GETPIDURL</span> <span class="o">=</span><span class="nv">$PIDSERVICE_URL</span><span class="o">.</span><span class="s2">"?URL=*"</span><span class="o">.</span><span class="nv">$SEARCHTERM</span><span class="o">.</span><span class="s2">"*"</span><span class="p">;</span>

<span class="c1">// Get cURL resource</span>
<span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
<span class="c1">// Set some options - we are passing in a useragent too here</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span><span class="nx">CURLOPT_URL</span><span class="p">,</span><span class="nv">$GETPIDURL</span><span class="p">);</span>
<span class="c1">// Set the authentication options</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_USERPWD</span><span class="p">,</span> <span class="nv">$PIDSERVICE_USER</span><span class="o">.</span><span class="s2">":"</span><span class="o">.</span><span class="nv">$PIDSERVICE_PASSWD</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPAUTH</span><span class="p">,</span> <span class="nx">CURLAUTH_BASIC</span><span class="p">);</span>

<span class="c1">// Include header in result? (0 = yes, 1 = no)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="c1">// Should cURL return or print out the data? (true = return, false = print)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">// Download the given URL, and return output</span>
<span class="nv">$output</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>

<span class="nv">$info</span> <span class="o">=</span> <span class="nb">curl_getinfo</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">200</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"PID DATA"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">401</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Authorization problem"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">404</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Not found"</span><span class="p">;</span>

<span class="c1">// Close the cURL resource, and free system resources</span>
<span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span></code></pre>

;T;	I"a
The request in php 

<pre><code class="language-php5">
$PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX";
$PIDSERVICE_USER="YOURUSERNAME";
$PIDSERVICE_PASSWD="YOURPASSWORD";
$SEARCHTERM = "grnet";
$GETPIDURL =$PIDSERVICE_URL."?URL=*".$SEARCHTERM."*";

// Get cURL resource
$curl = curl_init();
// Set some options - we are passing in a useragent too here
curl_setopt($curl,CURLOPT_URL,$GETPIDURL);
// Set the authentication options
curl_setopt($curl, CURLOPT_USERPWD, $PIDSERVICE_USER.":".$PIDSERVICE_PASSWD);
curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);

// Include header in result? (0 = yes, 1 = no)
curl_setopt($curl, CURLOPT_HEADER, 0);
// Should cURL return or print out the data? (true = return, false = print)
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

// Download the given URL, and return output
$output = curl_exec($curl);

$info = curl_getinfo($curl);
if( $info['http_code']==200) echo "PID DATA";
if( $info['http_code']==401) echo "Authorization problem";
if( $info['http_code']==404) echo "Not found";

// Close the cURL resource, and free system resources
curl_close($curl);
</code></pre>



;T;
@≤I"#/guides/examples/searchpython/;T{;{;I"v
<p>The request in python</p>

<pre><code class="language-python"><span class="kn">import</span> <span class="nn">urllib2</span>

<span class="n">PIDSERVICE_URL</span><span class="o">=</span><span class="s">"THE_SERVICE_URL_WITH_PREFIX"</span>
<span class="n">PIDSERVICE_USER</span><span class="o">=</span><span class="s">"YOURUSERNAME"</span>
<span class="n">PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s">"YOURPASSWORD"</span>
<span class="n">URL_TO_OPEN</span><span class="o">=</span><span class="n">PIDSERVICE_URL</span><span class="o">+</span><span class="s">"?URL=*grnet*"</span>
<span class="n">DATAURL</span><span class="o">=</span><span class="s">""</span>

<span class="c"># create a password manager</span>
<span class="n">password_mgr</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPPasswordMgrWithDefaultRealm</span><span class="p">()</span>

<span class="c"># Add the username and password.</span>
<span class="n">password_mgr</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">PIDSERVICE_URL</span><span class="p">,</span> <span class="n">PIDSERVICE_USER</span><span class="p">,</span> <span class="n">PIDSERVICE_PASSWD</span><span class="p">)</span>

<span class="n">handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">(</span><span class="n">password_mgr</span><span class="p">)</span>

<span class="c"># create "opener" (OpenerDirector instance)</span>
<span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>

<span class="c"># use the opener to fetch a URL</span>
<span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">PIDSERVICE_URL</span><span class="p">)</span>

<span class="c"># Install the opener.</span>
<span class="c"># Now all calls to urllib2.urlopen use the created opener.</span>
<span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>

<span class="n">REQUESTDATA</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">URL_TO_OPEN</span><span class="p">)</span>    
<span class="k">try</span><span class="p">:</span>
    <span class="n">DATAURL</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">REQUESTDATA</span><span class="p">)</span>
<span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"404-Not found"</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">401</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"401-Authentication failed"</span>    

<span class="k">if</span> <span class="n">DATAURL</span><span class="p">:</span>
    <span class="c"># Getting the code</span>
    <span class="k">print</span> <span class="s">"This gets the code: "</span><span class="p">,</span> <span class="n">DATAURL</span><span class="o">.</span><span class="n">code</span></code></pre>

;T;	I"J
The request in python

<pre><code class="language-python">
import urllib2

PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX"
PIDSERVICE_USER="YOURUSERNAME"
PIDSERVICE_PASSWD="YOURPASSWORD"
URL_TO_OPEN=PIDSERVICE_URL+"?URL=*grnet*"
DATAURL=""

# create a password manager
password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()

# Add the username and password.
password_mgr.add_password(None, PIDSERVICE_URL, PIDSERVICE_USER, PIDSERVICE_PASSWD)

handler = urllib2.HTTPBasicAuthHandler(password_mgr)

# create "opener" (OpenerDirector instance)
opener = urllib2.build_opener(handler)

# use the opener to fetch a URL
opener.open(PIDSERVICE_URL)

# Install the opener.
# Now all calls to urllib2.urlopen use the created opener.
urllib2.install_opener(opener)

REQUESTDATA = urllib2.Request(URL_TO_OPEN)    
try:
    DATAURL = urllib2.urlopen(REQUESTDATA)
except urllib2.URLError, e:
    if e.code == 404:
        print "404-Not found"
    if e.code == 401:
        print "401-Authentication failed"    

if DATAURL:
    # Getting the code
    print "This gets the code: ", DATAURL.code
 
</code></pre>

;T;
@∑I" /guides/examples/searchres/;T{;{;I"˝
<h3 id="the-response">The response:</h3>

<ul>
  <li>HTTP/1.1 200 OK: (Success)</li>
  <li>HTTP/1.1 401 Unauthorized: Your username or your password is wrong</li>
  <li>HTTP/1.1 404 NOT found: The url doesn‚Äôt exist</li>
</ul>

<p>After a successful request, the response consists of a list of PIDs containing this term.</p>

<pre><code>
GRNET
66742AB2-5685-11E3-A413-1C6F65A666B5
305F66A9-3994-42D6-A9F6-8E629126DE14
B4CF7AEA-55BB-4DB5-9D85-EB2DAD821B07
0CEEA495-71FA-460B-97A4-81E7E597B636
</code></pre>

;T;	I"∑
### The response:

- HTTP/1.1 200 OK: (Success)
- HTTP/1.1 401 Unauthorized: Your username or your password is wrong
- HTTP/1.1 404 NOT found: The url doesn't exist

After a successful request, the response consists of a list of PIDs containing this term.

<pre><code>
GRNET
66742AB2-5685-11E3-A413-1C6F65A666B5
305F66A9-3994-42D6-A9F6-8E629126DE14
B4CF7AEA-55BB-4DB5-9D85-EB2DAD821B07
0CEEA495-71FA-460B-97A4-81E7E597B636
</code></pre>

;T;
@ºI"/guides/glossary/;T{;{	;I"M <!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>Glossary |  Handle API</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h1 id="glossary">Glossary</h1>


<h3 id="basic-terms">Basic terms</h3>

<p>Some terms in this document have a very specific meaning:</p>

<ul>
  <li>
    <p><strong>PID</strong>: Persistent identifier. It is the Identifier pointing to a resource with no knowledge of the resource. It is the the combination of the prefix/suffix . The prefix is the  API Prefix 11239. As a suffix we use a dynamically created UUID as shown in the following examples.  </p>
  </li>
  <li>
    <p><strong>handle</strong>: The handle is the PID along with a set of values that accompany the PID</p>
  </li>
  <li>
    <p><strong>the API</strong>: the Application Programming Interface laid out in this document</p>
  </li>
  <li>
    <p><strong>server</strong>, <strong>implementation</strong>: an implementation of the API</p>
  </li>
  <li>
    <p><strong>(service) provider</strong>: an organisation or person that operates a server as a service</p>
  </li>
  <li>
    <p><strong>client</strong>: a piece of software that interacts with a server using the API</p>
  </li>
  <li>
    <p><strong>user</strong>: an organisation or person that operates a client</p>
  </li>
  <li>
    <p><strong>UUID</strong>: UUID stands for Universally Unique IDentifier, GUID for Globally Unique IDentifier. A universally unique identifier (UUID) is an identifier standard used in software construction, standardized by the Open Software Foundation (OSF) as part of the Distributed Computing Environment (DCE). The intent of UUIDs is to enable distributed systems to uniquely identify information without significant central coordination.</p>
  </li>
</ul>

<h3 id="the-data-model">The data model</h3>

<h4 id="handle-value">Handle value</h4>

<p>A handle value is a collection of the data describing it and the administrative data. Each handle has one or more administrators. Any administrative operation (e.g., add, delete or modify handle values) can only be performed by the handle owner with adequate privilege. The handle owner and any other person with administrative rights on the specific handle, are defined in terms of HS_ADMIN values.</p>

<p>So a handle value is a collection with at least the following:</p>

<ul>
  <li>idx: a positive number that specifies the unique index of this Handle Value within its Value Set.</li>
  <li>type: Specifies the data type of member data.</li>
  <li>parsed_data: The data you entered for the defined type in human readable format. </li>
  <li>data: a blob. </li>
  <li>timestamp: a number that records the last time this Handle Value was updated at the server. The field contains elapsed time since 00:00:00 UTC, January 1970 in milliseconds.</li>
  <li>ttl_type: the TTL type indicates whether the TTL value is absolute or relative.  The absolute TTL value defines the time to live in terms of seconds since 00:00:00 UTC, January 1st 1970.  A relative TTL specifies the time to live in terms of the number of seconds elapsed since the value was obtained by the client from any handle server.</li>
  <li>ttl: a number that specifies the Time-To- Live of the value record. A positive value defines the time to live in terms of seconds since 00:00:00 UTC, January 1st 1970. A negative value specifies the time to live in terms of the number of seconds elapsed since the value was obtained.</li>
  <li>refs: a list of references to other Handle Values.</li>
  <li>privs: The permissions of the handle</li>
</ul>

<p><strong>Administrative</strong></p>

<ul>
  <li>idx: the unique id of the administrator</li>
  <li>type: the admin type</li>
  <li>parsed_data: the admin data with a set of possible permissions</li>
</ul>


 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/installation">Installation</a></h3></li>
          <li><h3><a href="#">Components</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/sync/">Sync Components</a></h3></li>
                <li><h3><a href="/guides/consumer/">Consumer</a></h3></li>
                <li><h3><a href="/guides/compute/">Compute Engine</a></h3></li>
                <li><h3><a href="/guides/api/">API</a></h3></li>
                <li><h3><a href="/guides/webui/">Web UI</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<!--
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
-->
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:contact@argodoc.eu" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:contact@argodoc.eu" class="site-link" target='_blank'>ARGO Consurtium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I"
# Glossary

* TOC
{:toc}

### Basic terms

Some terms in this document have a very specific meaning:

- **PID**: Persistent identifier. It is the Identifier pointing to a resource with no knowledge of the resource. It is the the combination of the prefix/suffix . The prefix is the  API Prefix 11239. As a suffix we use a dynamically created UUID as shown in the following examples.  

- **handle**: The handle is the PID along with a set of values that accompany the PID

- **the API**: the Application Programming Interface laid out in this document

- **server**, **implementation**: an implementation of the API

- **(service) provider**: an organisation or person that operates a server as a service

- **client**: a piece of software that interacts with a server using the API

- **user**: an organisation or person that operates a client

- **UUID**: UUID stands for Universally Unique IDentifier, GUID for Globally Unique IDentifier. A universally unique identifier (UUID) is an identifier standard used in software construction, standardized by the Open Software Foundation (OSF) as part of the Distributed Computing Environment (DCE). The intent of UUIDs is to enable distributed systems to uniquely identify information without significant central coordination.

### The data model

#### Handle value

A handle value is a collection of the data describing it and the administrative data. Each handle has one or more administrators. Any administrative operation (e.g., add, delete or modify handle values) can only be performed by the handle owner with adequate privilege. The handle owner and any other person with administrative rights on the specific handle, are defined in terms of HS_ADMIN values.

So a handle value is a collection with at least the following:

- idx: a positive number that specifies the unique index of this Handle Value within its Value Set.
- type: Specifies the data type of member data.
- parsed_data: The data you entered for the defined type in human readable format. 
- data: a blob. 
- timestamp: a number that records the last time this Handle Value was updated at the server. The field contains elapsed time since 00:00:00 UTC, January 1970 in milliseconds.
- ttl_type: the TTL type indicates whether the TTL value is absolute or relative.  The absolute TTL value defines the time to live in terms of seconds since 00:00:00 UTC, January 1st 1970.  A relative TTL specifies the time to live in terms of the number of seconds elapsed since the value was obtained by the client from any handle server.
- ttl: a number that specifies the Time-To- Live of the value record. A positive value defines the time to live in terms of seconds since 00:00:00 UTC, January 1st 1970. A negative value specifies the time to live in terms of the number of seconds elapsed since the value was obtained.
- refs: a list of references to other Handle Values.
- privs: The permissions of the handle

**Administrative**

- idx: the unique id of the administrator
- type: the admin type
- parsed_data: the admin data with a set of possible permissions
;T;
I"3
<h1 id="glossary">Glossary</h1>


<h3 id="basic-terms">Basic terms</h3>

<p>Some terms in this document have a very specific meaning:</p>

<ul>
  <li>
    <p><strong>PID</strong>: Persistent identifier. It is the Identifier pointing to a resource with no knowledge of the resource. It is the the combination of the prefix/suffix . The prefix is the  API Prefix 11239. As a suffix we use a dynamically created UUID as shown in the following examples.  </p>
  </li>
  <li>
    <p><strong>handle</strong>: The handle is the PID along with a set of values that accompany the PID</p>
  </li>
  <li>
    <p><strong>the API</strong>: the Application Programming Interface laid out in this document</p>
  </li>
  <li>
    <p><strong>server</strong>, <strong>implementation</strong>: an implementation of the API</p>
  </li>
  <li>
    <p><strong>(service) provider</strong>: an organisation or person that operates a server as a service</p>
  </li>
  <li>
    <p><strong>client</strong>: a piece of software that interacts with a server using the API</p>
  </li>
  <li>
    <p><strong>user</strong>: an organisation or person that operates a client</p>
  </li>
  <li>
    <p><strong>UUID</strong>: UUID stands for Universally Unique IDentifier, GUID for Globally Unique IDentifier. A universally unique identifier (UUID) is an identifier standard used in software construction, standardized by the Open Software Foundation (OSF) as part of the Distributed Computing Environment (DCE). The intent of UUIDs is to enable distributed systems to uniquely identify information without significant central coordination.</p>
  </li>
</ul>

<h3 id="the-data-model">The data model</h3>

<h4 id="handle-value">Handle value</h4>

<p>A handle value is a collection of the data describing it and the administrative data. Each handle has one or more administrators. Any administrative operation (e.g., add, delete or modify handle values) can only be performed by the handle owner with adequate privilege. The handle owner and any other person with administrative rights on the specific handle, are defined in terms of HS_ADMIN values.</p>

<p>So a handle value is a collection with at least the following:</p>

<ul>
  <li>idx: a positive number that specifies the unique index of this Handle Value within its Value Set.</li>
  <li>type: Specifies the data type of member data.</li>
  <li>parsed_data: The data you entered for the defined type in human readable format. </li>
  <li>data: a blob. </li>
  <li>timestamp: a number that records the last time this Handle Value was updated at the server. The field contains elapsed time since 00:00:00 UTC, January 1970 in milliseconds.</li>
  <li>ttl_type: the TTL type indicates whether the TTL value is absolute or relative.  The absolute TTL value defines the time to live in terms of seconds since 00:00:00 UTC, January 1st 1970.  A relative TTL specifies the time to live in terms of the number of seconds elapsed since the value was obtained by the client from any handle server.</li>
  <li>ttl: a number that specifies the Time-To- Live of the value record. A positive value defines the time to live in terms of seconds since 00:00:00 UTC, January 1st 1970. A negative value specifies the time to live in terms of the number of seconds elapsed since the value was obtained.</li>
  <li>refs: a list of references to other Handle Values.</li>
  <li>privs: The permissions of the handle</li>
</ul>

<p><strong>Administrative</strong></p>

<ul>
  <li>idx: the unique id of the administrator</li>
  <li>type: the admin type</li>
  <li>parsed_data: the admin data with a set of possible permissions</li>
</ul>
;T;@¡I"/guides/overview/;T{;{	;I"<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>Overview | ARGO</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h2 id="overview">Overview</h2>

<p>ARGO is a lightweight service for Service Level Monitoring designed for medium and large sized Research Infrastructures. </p>

<p>The ARGO software stack is comprised of the following components (products)</p>

<ul>
  <li><a href="/guides/sync">Sync component</a></li>
  <li><a href="/guides/consumer">Consumer</a></li>
  <li><a href="/guides/compute">Compute Engine</a></li>
  <li><a href="/guides/api">API</a></li>
  <li><a href="/guides/webui">Web UI</a></li>
</ul>



 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/installation">Installation</a></h3></li>
          <li><h3><a href="#">Components</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/sync/">Sync Components</a></h3></li>
                <li><h3><a href="/guides/consumer/">Consumer</a></h3></li>
                <li><h3><a href="/guides/compute/">Compute Engine</a></h3></li>
                <li><h3><a href="/guides/api/">API</a></h3></li>
                <li><h3><a href="/guides/webui/">Web UI</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<!--
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
-->
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:argo-ggus-support@grnet.gr" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:argo-ggus-support@grnet.gr" class="site-link" target='_blank'>ARGO Consortium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I"∫
## Overview

ARGO is a lightweight service for Service Level Monitoring designed for medium and large sized Research Infrastructures. 

The ARGO software stack is comprised of the following components (products)

- [Sync component][sync]
- [Consumer][consumer]
- [Compute Engine][compute]
- [API][api]
- [Web UI][webui]

[sync]: /guides/sync
[consumer]: /guides/consumer
[compute]: /guides/compute
[api]: /guides/api
[webui]: /guides/webui

;T;
I"˚
<h2 id="overview">Overview</h2>

<p>ARGO is a lightweight service for Service Level Monitoring designed for medium and large sized Research Infrastructures. </p>

<p>The ARGO software stack is comprised of the following components (products)</p>

<ul>
  <li><a href="/guides/sync">Sync component</a></li>
  <li><a href="/guides/consumer">Consumer</a></li>
  <li><a href="/guides/compute">Compute Engine</a></li>
  <li><a href="/guides/api">API</a></li>
  <li><a href="/guides/webui">Web UI</a></li>
</ul>

;T;@«I"/guides/;T{;{	;I"<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title></title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      


 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/installation">Installation</a></h3></li>
          <li><h3><a href="#">Components</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/sync/">Sync Components</a></h3></li>
                <li><h3><a href="/guides/consumer/">Consumer</a></h3></li>
                <li><h3><a href="/guides/compute/">Compute Engine</a></h3></li>
                <li><h3><a href="/guides/api/">API</a></h3></li>
                <li><h3><a href="/guides/webui/">Web UI</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<!--
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
-->
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:argo-ggus-support@grnet.gr" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:argo-ggus-support@grnet.gr" class="site-link" target='_blank'>ARGO Consortium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I" ;T;
I"
;T;@ÕI"/;T{;{	;I"D<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>ARGO Documentation</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>



<body class="overview">
	<header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->

	
  
<div class="wrapper feature">
	<h1>ARGO Documentation</h1>
	<a href="/guides/overview/" class="button">Browse the documentation</a>
	<div class="handle-pid-logo">
		<img src="/shared/images/argo-arch-overview.png">
		<span class="caption simple-caption">  
		<p>Evolving Service Availability Monitoring towards a more lightweight and customisable solution</p>  
		</span> 
	</div>


</div>

<div class="full-width-divider">
	<ul class="wrapper highlights">
		<li class="highlight-module">
			<a href="/guides/overview/"><span class="big-icon glyphicon-book"></span></a>
			<h2><a href="/guides/overview/">Get Started</a></h2>
			<p>Get started with ARGO. Browse the documentation</p>
		</li>
		<li class="highlight-module">
			<a href="/guides/api/"><span class="big-icon glyphicon-list-alt"></span></a>
			<h2><a href="/guides/api/">API</a></h2>
			<p>Enable the use of ARGO API in your SLA monitoring application</p>
		</li>
		<li class="highlight-module">
			<a href="mailto:argo-ggus-support@grnet.gr" target="blank"><span class="big-icon glyphicon-envelope"></span></a>
			<h2><a href="mailto:argo-ggus-support@grnet.gr" target="blank">Contact</a></h2>
			<p>Are you interested in using ARGO for Service Level Monitoring? Send us an <a href="mailto:argo-ggus-support@grnet.gr" target="blank">email</a>.</p>
		</li>
	</ul>
</div>

		
	<footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:argo-ggus-support@grnet.gr" class="site-link" target='_blank'>ARGO Consortium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>
;T;	I":
<div class="wrapper feature">
	<h1>ARGO Documentation</h1>
	<a href="/guides/overview/" class="button">Browse the documentation</a>
	<div class="handle-pid-logo">
		<img src="/shared/images/argo-arch-overview.png"  />
		<span class="caption simple-caption">  
		<p>Evolving Service Availability Monitoring towards a more lightweight and customisable solution</p>  
		</span> 
	</div>


</div>

<div class="full-width-divider">
	<ul class="wrapper highlights">
		<li class="highlight-module">
			<a href="/guides/overview/"><span class="big-icon glyphicon-book"></span></a>
			<h2><a href="/guides/overview/">Get Started</a></h2>
			<p>Get started with ARGO. Browse the documentation</p>
		</li>
		<li class="highlight-module">
			<a href="/guides/api/"><span class="big-icon glyphicon-list-alt"></span></a>
			<h2><a href="/guides/api/">API</a></h2>
			<p>Enable the use of ARGO API in your SLA monitoring application</p>
		</li>
		<li class="highlight-module">
			<a href="mailto:argo-ggus-support@grnet.gr" target='blank'><span class="big-icon glyphicon-envelope"></span></a>
			<h2><a href="mailto:argo-ggus-support@grnet.gr" target="blank">Contact</a></h2>
			<p>Are you interested in using ARGO for Service Level Monitoring? Send us an <a href='mailto:argo-ggus-support@grnet.gr' target='blank'>email</a>.</p>
		</li>
	</ul>
</div>
;T;
I"7
<div class="wrapper feature">
	<h1>ARGO Documentation</h1>
	<a href="/guides/overview/" class="button">Browse the documentation</a>
	<div class="handle-pid-logo">
		<img src="/shared/images/argo-arch-overview.png">
		<span class="caption simple-caption">  
		<p>Evolving Service Availability Monitoring towards a more lightweight and customisable solution</p>  
		</span> 
	</div>


</div>

<div class="full-width-divider">
	<ul class="wrapper highlights">
		<li class="highlight-module">
			<a href="/guides/overview/"><span class="big-icon glyphicon-book"></span></a>
			<h2><a href="/guides/overview/">Get Started</a></h2>
			<p>Get started with ARGO. Browse the documentation</p>
		</li>
		<li class="highlight-module">
			<a href="/guides/api/"><span class="big-icon glyphicon-list-alt"></span></a>
			<h2><a href="/guides/api/">API</a></h2>
			<p>Enable the use of ARGO API in your SLA monitoring application</p>
		</li>
		<li class="highlight-module">
			<a href="mailto:argo-ggus-support@grnet.gr" target="blank"><span class="big-icon glyphicon-envelope"></span></a>
			<h2><a href="mailto:argo-ggus-support@grnet.gr" target="blank">Contact</a></h2>
			<p>Are you interested in using ARGO for Service Level Monitoring? Send us an <a href="mailto:argo-ggus-support@grnet.gr" target="blank">email</a>.</p>
		</li>
	</ul>
</div>
;T;@”I"/static/css/960.css/;T{;{ I"/static/css/normalize.css/;T{;{ I"/static/css/reset.css/;T{;{ I"/static/css/style.css/;T{;{ I"!/static/css/uv_active4d.css/;T{;{ I"/static/favicon.ico/;T{;{ I"*/static/shared/css/documentation.css/;T{;{ I"9/static/shared/css/glyphicons-halflings-regular.eot/;T{;{ I"9/static/shared/css/glyphicons-halflings-regular.svg/;T{;{ I"9/static/shared/css/glyphicons-halflings-regular.ttf/;T{;{ I":/static/shared/css/glyphicons-halflings-regular.woff/;T{;{ I"%/static/shared/css/pygments.css/;T{;{ I"+/static/shared/images/EPIC-header.png/;T{;{ I"0/static/shared/images/grnet-logo-small.png/;T{;{ I"*/static/shared/images/grnet-logo.jpg/;T{;{ I"*/static/shared/images/handle-pid.png/;T{;{ I"&/static/shared/images/header.png/;T{;{ I"%/static/shared/images/qmark.png/;T{;{ I"-/static/shared/js/jquery-1.10.2.min.map/;T{;{ I"!/static/shared/js/jquery.js/;T{;{ I"!/static/shared/js/script.js/;T{;{ I"/guides/api-auth/;T{;{	;I"S:<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>API | Basic Authentication</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h1 id="api---basic-authentication">API - Basic Authentication</h1>

<p>This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.</p>

<h2 id="basic-authentication---description">Basic Authentication - Description</h2>
<p>The API allows REST clients to authenticate themselves with a user name and password using basic authentication.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Description</strong></td>
      <td>Authenticate to API Service</td>
    </tr>
    <tr>
      <td><strong>URL</strong></td>
      <td>The API Service URL</td>
    </tr>
    <tr>
      <td><strong>HTTP Method</strong></td>
      <td>GET</td>
    </tr>
    <tr>
      <td><strong>Security</strong></td>
      <td>Basic Authentication</td>
    </tr>
  </tbody>
</table>

<p>The data you must send in order to authenticate are described in the following table </p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Description</th>
      <th>Required</th>
      <th>Default value</th>
      <th>Example value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>url to authenticate</td>
      <td>a url to authenticate. We use the service PID service URL</td>
      <td>Yes</td>
      <td>None</td>
      <td>https://epic.grnet.gr/api/v2/handles/</td>
    </tr>
    <tr>
      <td>username</td>
      <td>your username</td>
      <td>Yes</td>
      <td>None</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td>password</td>
      <td>your password</td>
      <td>Yes</td>
      <td>None</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<h2 id="example">Example</h2>

<p>In this example we are going to authenticate by using the main PID service URL.</p>




<ul class="nav nav-tabs">
	
	  
		  <li class="active"><a href="#tab-1" data-toggle="tab">Curl</a></li>
	  
	
	  
		  <li><a href="#tab-2" data-toggle="tab">Python</a></li>
	
	
	  
		  <li><a href="#tab-3" data-toggle="tab">PHP</a></li>
	
	
</ul>
<div class="tab-content">
	
	 
	 <div class="tab-pane active" id="tab-1">
	  
		<p>The request in curl</p>

<pre><code>
    curl -D- -u "YOURUSERNAME:YOURPASSWORD" -X GET -H "Content-Type: application/json" https://epic.grnet.gr/api/v2/handles/
</code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-2">
	
		
<p>The request in python</p>

<pre><code class="language-python"><span class="kn">import</span> <span class="nn">urllib2</span>

<span class="n">PIDSERVICE_URL</span><span class="o">=</span><span class="s">"THE_SERVICE_URL_WITH_PREFIX"</span>
<span class="n">PIDSERVICE_USER</span><span class="o">=</span><span class="s">"YOURUSERNAME"</span>
<span class="n">PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s">"YOURPASSWORD"</span>
<span class="n">DATAURL</span><span class="o">=</span><span class="s">''</span>
<span class="n">URL_TO_OPEN</span><span class="o">=</span><span class="n">PIDSERVICE_URL</span>

<span class="c"># create a password manager</span>
<span class="n">password_mgr</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPPasswordMgrWithDefaultRealm</span><span class="p">()</span>

<span class="c"># Add the username and password.</span>
<span class="n">password_mgr</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">PIDSERVICE_URL</span><span class="p">,</span> <span class="n">PIDSERVICE_USER</span><span class="p">,</span> <span class="n">PIDSERVICE_PASSWD</span><span class="p">)</span>

<span class="n">handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">(</span><span class="n">password_mgr</span><span class="p">)</span>

<span class="c"># create "opener" (OpenerDirector instance)</span>
<span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>

<span class="c"># use the opener to fetch a URL</span>
<span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">PIDSERVICE_URL</span><span class="p">)</span>

<span class="c"># Install the opener.</span>
<span class="c"># Now all calls to urllib2.urlopen use the created opener.</span>
<span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>

<span class="n">REQUESTDATA</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">URL_TO_OPEN</span><span class="p">)</span>
<span class="k">try</span><span class="p">:</span>
    <span class="n">DATAURL</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">REQUESTDATA</span><span class="p">)</span>
<span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">401</span><span class="p">:</span>
         <span class="k">print</span> <span class="s">"401-Authentication failed"</span>

<span class="k">if</span> <span class="n">DATAURL</span><span class="p">:</span>
    <span class="c"># Getting the code</span>
    <span class="k">print</span> <span class="s">"This gets the code: "</span><span class="p">,</span> <span class="n">DATAURL</span><span class="o">.</span><span class="n">code</span></code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-3">
	
		
<p>The request in php </p>

<pre><code class="language-php5"><span class="nv">$PIDSERVICE_URL</span><span class="o">=</span><span class="s2">"THE_SERVICE_URL_WITH_PREFIX"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_USER</span><span class="o">=</span><span class="s2">"YOURUSERNAME"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s2">"YOURPASSWORD"</span><span class="p">;</span>
<span class="c1">// Get cURL resource</span>
<span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>

<span class="c1">// Set the url to authenticate</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span><span class="nx">CURLOPT_URL</span><span class="p">,</span><span class="nv">$PIDSERVICE_URL</span><span class="p">);</span>
<span class="c1">// Set the authentication options</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_USERPWD</span><span class="p">,</span> <span class="nv">$PIDSERVICE_USER</span><span class="o">.</span><span class="s2">":"</span><span class="o">.</span><span class="nv">$PIDSERVICE_PASSWD</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPAUTH</span><span class="p">,</span> <span class="nx">CURLAUTH_BASIC</span><span class="p">);</span>

<span class="c1">// Include header in result? (0 = yes, 1 = no)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="c1">// Should cURL return or print out the data? (true = return, false = print)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">// Download the given URL, and return output</span>
<span class="nv">$output</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
<span class="nv">$finalData</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>

<span class="nv">$info</span> <span class="o">=</span> <span class="nb">curl_getinfo</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">200</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Authorization ok"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">401</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Authorization failed: Either your login or your password is wrong."</span><span class="p">;</span>

<span class="c1">// Close the cURL resource, and free system resources</span>
<span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span></code></pre>


	 </div>
	
</div>
	
		
			
<h3 id="the-response">The response:</h3>

<ul>
  <li>HTTP/1.1 200 OK: (Success)</li>
  <li>HTTP/1.1 401 Unauthorized: Your username or your password is wrong</li>
</ul>


		
	

 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/glossary/">Glossary</a></h3></li>
          <li><h3><a href="#">API</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/api/">Getting Started</a></h3></li>
                <li><h3><a href="/guides/api-auth/">Authenticate</a></h3></li>
                <li><h3><a href="/guides/api-generation/">PID Generation</a></h3></li>
                <li><h3><a href="/guides/api-get/">Get a PID</a></h3></li>
                <li><h3><a href="/guides/api-list/">List all PID</a></h3></li>
                <li><h3><a href="/guides/api-search/">Search</a></h3></li>
                <li><h3><a href="/guides/api-create/">Create a PID</a></h3></li>
                <li><h3><a href="/guides/api-update/">Update a PID</a></h3></li>
                <li><h3><a href="/guides/api-delete/">Delete a PID</a></h3></li>
                <li><h3><a href="/guides/api-partial/">Part Identifiers</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:contact@pidconsortium.eu" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:contact@argodoc.eu" class="site-link" target='_blank'>ARGO Consurtium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I"˝
# API - Basic Authentication 

This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.

## Basic Authentication - Description
The API allows REST clients to authenticate themselves with a user name and password using basic authentication.

| **Description** | Authenticate to API Service |
| **URL**         | The API Service URL   |
| **HTTP Method** | GET                         |
| **Security**    | Basic Authentication        |

The data you must send in order to authenticate are described in the following table 


Type | Description | Required | Default value | Example value |
------|-------------|----------|---------------|---------------|
url to authenticate | a url to authenticate. We use the service PID service URL | Yes | None |  https://epic.grnet.gr/api/v2/handles/ |
username | your username | Yes |None| |
password | your password | Yes |None| |

## Example

In this example we are going to authenticate by using the main PID service URL.


;T;
I"´
<h1 id="api---basic-authentication">API - Basic Authentication</h1>

<p>This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.</p>

<h2 id="basic-authentication---description">Basic Authentication - Description</h2>
<p>The API allows REST clients to authenticate themselves with a user name and password using basic authentication.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Description</strong></td>
      <td>Authenticate to API Service</td>
    </tr>
    <tr>
      <td><strong>URL</strong></td>
      <td>The API Service URL</td>
    </tr>
    <tr>
      <td><strong>HTTP Method</strong></td>
      <td>GET</td>
    </tr>
    <tr>
      <td><strong>Security</strong></td>
      <td>Basic Authentication</td>
    </tr>
  </tbody>
</table>

<p>The data you must send in order to authenticate are described in the following table </p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Description</th>
      <th>Required</th>
      <th>Default value</th>
      <th>Example value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>url to authenticate</td>
      <td>a url to authenticate. We use the service PID service URL</td>
      <td>Yes</td>
      <td>None</td>
      <td>https://epic.grnet.gr/api/v2/handles/</td>
    </tr>
    <tr>
      <td>username</td>
      <td>your username</td>
      <td>Yes</td>
      <td>None</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td>password</td>
      <td>your password</td>
      <td>Yes</td>
      <td>None</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<h2 id="example">Example</h2>

<p>In this example we are going to authenticate by using the main PID service URL.</p>

;T;@I"/guides/api-create/;T{;{	;I"ë#<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>API | Create a PID</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h1 id="api---create-a-new-pid">API - Create a new PID</h1>

<p>This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.</p>

<h2 id="create-a-new-pid---description">Create a new PID - Description</h2>

<p>You want to create a new PID. There are two ways to create - generate a new PID </p>

<ul>
  <li>automatic generation of the suffix name via the POST method</li>
  <li>manual generation of the suffix name via the PUT method</li>
</ul>

<p>HTTP PUT can be used for both resource creation and resource updates .
So if you want to be sure that you are going to create a new one you must first check if it exists. If you don‚Äôt check the existence of a PID based on the suffix it is possible that you will update the data of an existing one. </p>

<p>There is a way to make your HTTP PUT request ‚Äúconditional‚Äù in the sense that it will only be executed if the URL doesn‚Äôt exist yet (which constitutes a create action), or that it does exist yet (which constitutes an update ). </p>

<p class="text-warning"><span class="label label-success">Info</span> In order to make the PUT request conditional use HTTP‚Äôs If-Match: * or If-None-Match:* headers.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Description</strong></td>
      <td>Create a new PID</td>
    </tr>
    <tr>
      <td><strong>URL</strong></td>
      <td>The API Service URL</td>
    </tr>
    <tr>
      <td><strong>HTTP Method</strong></td>
      <td>PUT for manual generation of suffix name</td>
    </tr>
    <tr>
      <td><strong>HTTP Method</strong></td>
      <td>POST for automatic generation of suffix name</td>
    </tr>
    <tr>
      <td><strong>Security</strong></td>
      <td>Requires ownership of the PID. So you must authenticate before actually creating the PID</td>
    </tr>
  </tbody>
</table>

<p>The data you must send in order to create are described in the following table </p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Description</th>
      <th>Required</th>
      <th>Default value</th>
      <th>Example value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>suffix</td>
      <td>The local name of the handle in the system</td>
      <td>Yes</td>
      <td>None</td>
      <td>a) use a UUID generator via <strong>PUT method</strong>, b) automatic generation via <strong>POST method</strong>
</td>
    </tr>
  </tbody>
</table>

<p>The data you must send as json representation are described in the following table </p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Description</th>
      <th>Required</th>
      <th>Default value</th>
      <th>Example value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>type</td>
      <td>Each handle has a set of values assigned to it.  These handle values use a common data structure for its data. The data type defines the syntax and semantics of the data in its data field.</td>
      <td>Yes</td>
      <td>None</td>
      <td>URL</td>
    </tr>
    <tr>
      <td>parsed_data</td>
      <td>A set of data that describes the resource identified by the handle. The syntax and semantics of parsed data are identified by the <type> field.</type>
</td>
      <td>Yes</td>
      <td>None</td>
      <td>http://www.grnet.gr</td>
    </tr>
    <tr>
      <td>timestamp</td>
      <td>The timestamp records the last time this Handle Value was updated at the server. The field contains elapsed time since 00:00:00 UTC, January 1970 in milliseconds.</td>
      <td>NO</td>
      <td>timestamp</td>
      <td>2013-11-26T11:58:14Z</td>
    </tr>
    <tr>
      <td>ttl_type</td>
      <td>the TTL type indicates whether the TTL value is absolute or relative.  The absolute TTL value defines the time to live in terms of seconds since 00:00:00 UTC, January 1st 1970.  A relative TTL specifies the time to live in terms of the number of seconds elapsed since the value was obtained by the client from any handle server.</td>
      <td>NO</td>
      <td>integer 0=relative, 1=absolute by default 0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>ttl</td>
      <td>a number that specifies the Time-To- Live of the value record. A positive value defines the time to live in terms of seconds since 00:00:00 UTC, January 1st 1970. A negative value specifies the time to live in terms of the number of seconds elapsed since the value was obtained. (if ttl_type is absolute, then this indicates the date/time of expiration in seconds since Jan 1 0:00:00 1970.)</td>
      <td>NO</td>
      <td>integer seconds</td>
      <td>86400</td>
    </tr>
    <tr>
      <td>refs</td>
      <td>a list of references to other Handle Values</td>
      <td>No</td>
      <td>None</td>
      <td>[{‚Äòidx‚Äô:‚Äô1‚Äô,‚Äôhandle‚Äô:‚Äô11239/12‚Äô}] where idx is the value for index field of handle data, and handle is the referenced handle value</td>
    </tr>
  </tbody>
</table>

<h2 id="example">Example</h2>

<p>In this example we are going to create a new handle via the PUT method  in the following url https://epic.grnet.gr/handles/11239/UUIDGENERATE. There is an example via POST method at <a href="/guides/api-generation/">PID generation page</a></p>




<ul class="nav nav-tabs">
	
	  
		  <li class="active"><a href="#tab-1" data-toggle="tab">Curl</a></li>
	  
	
	  
		  <li><a href="#tab-2" data-toggle="tab">Python</a></li>
	
	
	  
		  <li><a href="#tab-3" data-toggle="tab">PHP</a></li>
	
	
	  
		  <li><a href="#tab-4" data-toggle="tab">Perl</a></li>
	
	
</ul>
<div class="tab-content">
	
	 
	 <div class="tab-pane active" id="tab-1">
	  
		<p>The request in curl</p>

<pre><code>
#!/bin/bash    

SUFFIX=`uuidgen`
curl -v -u "YOURUSERNAME:YOURPASSWORD" -H "Accept:application/json" -H "Content-Type:application/json" -X PUT --data '[{"type":"URL","parsed_data":"http://www.grnet.gr/"}]' https://epic.grnet.gr/api/v2/handles/11239/$SUFFIX 

</code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-2">
	
		
<p>The request in python</p>

<pre><code class="language-python"><span class="kn">import</span> <span class="nn">urllib2</span>
<span class="kn">import</span> <span class="nn">uuid</span>
<span class="kn">import</span> <span class="nn">json</span>

<span class="n">PIDSERVICE_URL</span><span class="o">=</span><span class="s">"THE_SERVICE_URL_WITH_PREFIX"</span>
<span class="n">PIDSERVICE_USER</span><span class="o">=</span><span class="s">"YOURUSERNAME"</span>
<span class="n">PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s">"YOURPASSWORD"</span>
<span class="n">SUFFIX</span> <span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">());</span>
<span class="n">URL_TO_OPEN</span><span class="o">=</span><span class="n">PIDSERVICE_URL</span><span class="o">+</span><span class="n">SUFFIX</span>
<span class="n">DATAURL</span><span class="o">=</span><span class="s">''</span>

<span class="c"># create a password manager</span>
<span class="n">password_mgr</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPPasswordMgrWithDefaultRealm</span><span class="p">()</span>

<span class="c"># Add the username and password.</span>
<span class="n">password_mgr</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">PIDSERVICE_URL</span><span class="p">,</span> <span class="n">PIDSERVICE_USER</span><span class="p">,</span> <span class="n">PIDSERVICE_PASSWD</span><span class="p">)</span>

<span class="n">handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">(</span><span class="n">password_mgr</span><span class="p">)</span>

<span class="c"># create "opener" (OpenerDirector instance)</span>
<span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>

<span class="c"># use the opener to fetch a URL</span>
<span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">PIDSERVICE_URL</span><span class="p">)</span>

<span class="c"># Install the opener.</span>
<span class="c"># Now all calls to urllib2.urlopen use the created opener.</span>
<span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>

<span class="c">#create the json data</span>
<span class="n">JSONDATA</span> <span class="o">=</span> <span class="p">[{</span><span class="s">'type'</span><span class="p">:</span><span class="s">'URL'</span><span class="p">,</span><span class="s">'parsed_data'</span><span class="p">:</span><span class="s">'http://www.grnet.gr'</span><span class="p">}]</span>
<span class="n">JSONDATATOSEND</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">JSONDATA</span><span class="p">);</span>

<span class="n">REQUESTDATA</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">URL_TO_OPEN</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">JSONDATATOSEND</span><span class="p">)</span>

<span class="c">#create the headers</span>
<span class="n">REQUESTDATA</span><span class="o">.</span><span class="n">add_header</span><span class="p">(</span><span class="s">'Content-Type'</span><span class="p">,</span><span class="s">'application/json'</span><span class="p">)</span>
<span class="n">REQUESTDATA</span><span class="o">.</span><span class="n">add_header</span><span class="p">(</span><span class="s">'Content-Length'</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">JSONDATATOSEND</span><span class="p">))</span>

<span class="c"># creates the PUT method</span>
<span class="n">REQUESTDATA</span><span class="o">.</span><span class="n">get_method</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="s">'PUT'</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">DATAURL</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">REQUESTDATA</span><span class="p">)</span>
    
<span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">e</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"404-Not found"</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">401</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"401-Authentication failed"</span>    
        <span class="c">#get http code of the request</span>

<span class="k">if</span> <span class="n">DATAURL</span><span class="p">:</span>
    <span class="c"># Getting the code</span>
    <span class="k">print</span> <span class="s">"This gets the code: "</span><span class="p">,</span> <span class="n">DATAURL</span><span class="o">.</span><span class="n">code</span></code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-3">
	
		
<p>The request in php </p>

<pre><code class="language-php5"><span class="nv">$PIDSERVICE_URL</span><span class="o">=</span><span class="s2">"THE_SERVICE_URL_WITH_PREFIX"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_USER</span><span class="o">=</span><span class="s2">"YOURUSERNAME"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s2">"YOURPASSWORD"</span><span class="p">;</span>
<span class="nv">$UUID</span> <span class="o">=</span> <span class="nx">gen_uuid</span><span class="p">();</span> <span class="c1">//a function to generate a uuid</span>
<span class="nv">$URL_TO_OPEN</span> <span class="o">=</span> <span class="nv">$PIDSERVICE_URL</span><span class="o">.</span><span class="nv">$UUID</span><span class="p">;</span>
<span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="s1">'URL'</span><span class="p">,</span><span class="s1">'parsed_data'</span><span class="o">=&gt;</span><span class="s1">'http://www.grnet.gr/'</span><span class="p">));</span>
<span class="nv">$update_json</span><span class="o">=</span><span class="nb">json_encode</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>

<span class="c1">// Get cURL resource</span>
<span class="nv">$ch</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>

<span class="c1">//Set the headers to complete the request</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">'Content-Type: application/json'</span><span class="p">,</span><span class="s1">'Content-Length: '</span> <span class="o">.</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$update_json</span><span class="p">)));</span>

<span class="c1">//set the PUT Action</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_CUSTOMREQUEST</span><span class="p">,</span> <span class="s2">"PUT"</span><span class="p">);</span>

<span class="c1">//SET the postfield data</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_POSTFIELDS</span><span class="p">,</span><span class="nv">$update_json</span><span class="p">);</span>

<span class="c1">// Should cURL return or print out the data? (true = return, false = print)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">//Set the url with the new name of the PID </span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$URL_TO_OPEN</span><span class="p">);</span>

<span class="c1">// Set the authentication options</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_USERPWD</span><span class="p">,</span> <span class="nv">$PIDSERVICE_USER</span><span class="o">.</span><span class="s2">":"</span><span class="o">.</span><span class="nv">$PIDSERVICE_PASSWD</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPAUTH</span><span class="p">,</span> <span class="nx">CURLAUTH_BASIC</span><span class="p">);</span>

<span class="nv">$output</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>
<span class="nv">$info</span> <span class="o">=</span> <span class="nb">curl_getinfo</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>

<span class="c1">// Download the given URL, and return output </span>

<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">200</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"HANDLE EXISTS"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">201</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"PID CREATED"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">204</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"PID UPDATED"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">404</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"HANDLE DOESNT EXIST"</span><span class="p">;</span>

<span class="nb">curl_close</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>

<span class="k">function</span> <span class="nf">gen_uuid</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">sprintf</span><span class="p">(</span> <span class="s1">'%04x%04x-%04x-%04x-%04x-%04x%04x%04x'</span><span class="p">,</span>
            <span class="c1">// 32 bits for "time_low"</span>
            <span class="nb">mt_rand</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0xffff</span> <span class="p">),</span> <span class="nb">mt_rand</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0xffff</span> <span class="p">),</span>

            <span class="c1">// 16 bits for "time_mid"</span>
            <span class="nb">mt_rand</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0xffff</span> <span class="p">),</span>

            <span class="c1">// 16 bits for "time_hi_and_version",</span>
            <span class="c1">// four most significant bits holds version number 4</span>
            <span class="nb">mt_rand</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x0fff</span> <span class="p">)</span> <span class="o">|</span> <span class="mh">0x4000</span><span class="p">,</span>

            <span class="c1">// 16 bits, 8 bits for "clk_seq_hi_res",</span>
            <span class="c1">// 8 bits for "clk_seq_low",</span>
            <span class="c1">// two most significant bits holds zero and one for variant DCE1.1</span>
            <span class="nb">mt_rand</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x3fff</span> <span class="p">)</span> <span class="o">|</span> <span class="mh">0x8000</span><span class="p">,</span>

            <span class="c1">// 48 bits for "node"</span>
            <span class="nb">mt_rand</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0xffff</span> <span class="p">),</span> <span class="nb">mt_rand</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0xffff</span> <span class="p">),</span> <span class="nb">mt_rand</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0xffff</span> <span class="p">)</span>
    <span class="p">);</span>
<span class="p">}</span></code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-4">
	
		
<p>The request in perl</p>

<pre><code class="language-perl"><span class="c1">#!/usr/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Getopt::</span><span class="n">Long</span><span class="p">;</span>
<span class="k">use</span> <span class="n">Switch</span> <span class="s">'Perl5'</span><span class="p">,</span> <span class="s">'Perl6'</span><span class="p">;</span>
<span class="k">use</span> <span class="n">JSON</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$fullargv0</span> <span class="o">=</span> <span class="nv">$0</span><span class="p">;</span>
<span class="k">my</span> <span class="p">(</span><span class="nv">$argv0</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$fullargv0</span> <span class="o">=~</span><span class="sr"> /([^\/\\]+)$/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">%settings</span> <span class="o">=</span> <span class="p">(</span>
<span class="s">'debug'</span> <span class="o">=&gt;</span> <span class="s">'False'</span><span class="p">,</span>
<span class="s">'handle'</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="s">'action'</span> <span class="o">=&gt;</span><span class="s">'put'</span><span class="p">,</span>
	<span class="s">'credentials'</span> 	<span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'username'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'password'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'baseuri'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'data'</span>	<span class="o">=&gt;</span><span class="p">{</span>
		<span class="s">'get'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
		<span class="s">'putpost'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'format'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'headerextra'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="s">'type'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'url'</span><span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'pid'</span><span class="o">=&gt;</span> <span class="s">'ADD A PID'</span><span class="p">,</span>
	<span class="p">},</span>
<span class="p">},</span>
<span class="p">);</span>

<span class="c1"># Main subroutine</span>
<span class="k">sub </span><span class="nf">main</span> <span class="p">{</span>

	<span class="c1">#Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Get the script arguments</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">)</span> <span class="o">=</span> <span class="n">get_arguments</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span>

	<span class="k">if</span><span class="p">(</span> <span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> 
		 <span class="n">performPut</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span>

	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>
<span class="p">}</span>
 
<span class="c1"># Subroutine to perform a PUT action</span>
<span class="k">sub </span><span class="nf">performPut</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1">#construct url and headers</span>
	<span class="k">my</span> <span class="nv">$url</span><span class="o">=</span><span class="s">"$settings_ref-&gt;{handle}-&gt;{credentials}-&gt;{baseuri}$settings_ref-&gt;{handle}-&gt;{url}-&gt;{pid}"</span><span class="p">;</span>
	<span class="nb">printf</span><span class="p">(</span><span class="s">"The constructed url is        : %s\n"</span><span class="p">,</span><span class="nv">$url</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="k">my</span> <span class="nv">@httpHeaders</span> <span class="o">=</span> <span class="p">(</span> <span class="s">'Content-Type: application/json'</span> <span class="p">);</span>
	<span class="c1"># add extra header info. f.i. "If-Match: *" or "If-None-Match: *"</span>
	<span class="nb">push</span><span class="p">(</span><span class="nv">@httpHeaders</span><span class="p">,</span> <span class="s">"$settings_ref-&gt;{handle}-&gt;{headerextra}"</span> <span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="p">;</span>

	<span class="c1">#construct data</span>
	<span class="k">my</span> <span class="nv">$data</span><span class="o">=</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">};</span>
	<span class="nb">printf</span><span class="p">(</span><span class="s">"The data is                   : %s\n"</span><span class="p">,</span><span class="nv">$data</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="c1"># perform action</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_content_type</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_body</span> <span class="p">)</span> <span class="o">=</span> <span class="n">httpPut</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">,</span> <span class="nv">$url</span><span class="p">,</span> <span class="o">\</span><span class="nv">@httpHeaders</span><span class="p">,</span> <span class="nv">$data</span> <span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">);</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'An error happened\n'</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1"># reader helper calback function</span>
<span class="k">sub </span><span class="nf">read_callback</span> <span class="p">{</span>
	<span class="k">my</span> <span class="p">(</span><span class="nv">$maxlength</span><span class="p">,</span><span class="nv">$pointer</span><span class="p">)</span><span class="o">=</span><span class="nv">@_</span><span class="p">;</span>
	<span class="c1"># printf("The MAXLENGTH is     : \n", $maxlength);</span>
	<span class="c1"># printf("The POINTER is       : \n", $$pointer) ;</span>
	<span class="k">my</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$$pointer</span><span class="p">;</span>
	<span class="nv">$$pointer</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1"># Subroutine to post data via a http PUT</span>
<span class="k">sub </span><span class="nf">httpPut</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$httpHeaders_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="k">print</span><span class="p">(</span><span class="s">'Entering httpPut              :\n'</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

	<span class="c1"># local varables</span>
	<span class="k">my</span> <span class="nv">$length</span> <span class="o">=</span> <span class="nb">length</span> <span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
	<span class="k">my</span> <span class="nv">$body</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_body</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_code</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_content_type</span><span class="p">;</span>

	<span class="k">my</span> <span class="nv">$curl</span> <span class="o">=</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>

	<span class="c1"># set options for the curl http request</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="nv">$httpHeaders_ref</span> <span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_READFUNCTION</span><span class="p">,</span> <span class="o">\&amp;</span><span class="n">read_callback</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_UPLOAD</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_INFILE</span><span class="p">,</span> <span class="o">\</span><span class="nv">$data</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_INFILESIZE</span><span class="p">,</span> <span class="nb">length</span><span class="p">(</span><span class="nv">$data</span><span class="p">));</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_USERNAME</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">});</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_PASSWORD</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">});</span>

	<span class="c1">#debugging</span>
	<span class="c1">#$curl-&gt;setopt (CURLOPT_VERBOSE, 1);</span>

	<span class="c1"># A filehandle, reference to a scalar or reference to a typeglob can be used here.</span>
	<span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">'&gt;'</span><span class="p">,</span> <span class="o">\</span><span class="nv">$response_body</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">"$!"</span><span class="p">;</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_WRITEDATA</span><span class="p">,</span> <span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Do the actual curl http request</span>
	<span class="k">my</span> <span class="nv">$returncode</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">perform</span><span class="p">;</span>

	<span class="c1"># close file handle</span>
	<span class="nb">close</span><span class="p">(</span><span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="nv">$response_code</span>         <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_HTTP_CODE</span><span class="p">);</span>
		<span class="nv">$response_content_type</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_CONTENT_TYPE</span><span class="p">);</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response code        : $response_code\n"</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response content type: $response_content_type\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_body\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="c1"># Error code, type of error, error message</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"An error happened: $returncode "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">strerror</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">)</span><span class="o">.</span><span class="s">" "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">errbuf</span><span class="o">.</span><span class="s">"\n"</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">,</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="nv">$response_content_type</span><span class="p">,</span> <span class="nv">$response_body</span> <span class="p">);</span>
<span class="p">}</span>
<span class="c1"># Subroutine to get and check all script arguments</span>
<span class="k">sub </span><span class="nf">get_arguments</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Define local variables</span>
	<span class="k">my</span> <span class="nv">%arguments</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$username</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$password</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$baseUri</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$pidUrl</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$credentials</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$handleData</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$type</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$returncode</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$message</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">@sources</span><span class="p">;</span>

	<span class="n">GetOptions</span><span class="p">(</span> <span class="s">'h|help'</span>    <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">},</span>
		<span class="s">'user=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$username</span><span class="p">,</span>
		<span class="s">'passwd=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$password</span><span class="p">,</span>
		<span class="s">'base=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$baseUri</span><span class="p">,</span>
		<span class="s">'pid=s'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$pidUrl</span><span class="p">,</span>
		<span class="s">'cred=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$credentials</span><span class="p">,</span>
		<span class="s">'data=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$handleData</span><span class="p">,</span>
		<span class="s">'type=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$type</span><span class="p">,</span>
		<span class="s">'header=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$header</span><span class="p">,</span>
		<span class="s">'get'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">},</span>
		<span class="s">'put'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">},</span>
		<span class="s">'delete'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">},</span>
		<span class="s">'post'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">},</span>
		<span class="s">'pretty'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">},</span>
		<span class="s">'d|debug'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">},</span>
	<span class="p">);</span>

	<span class="c1"># Check the help flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># Set the returncode</span>
		<span class="nv">$returncode</span><span class="o">=</span><span class="mi">255</span><span class="p">;</span>

		<span class="nv">$message</span> <span class="o">=</span> <span class="n">print_help</span><span class="p">();</span>
	<span class="p">}</span>
	
	<span class="c1"># Check the debug flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=</span> <span class="s">'True'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'debug is                      : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the pretty flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=</span> <span class="s">'pretty'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'pretty format printing is     : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the action flag's (get,put,delete,post,search,nagios)</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'get'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'put'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'delete'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'post'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the username</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$username</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$username</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the password</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$password</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$password</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the base uri</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$baseUri</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$baseUri</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the pid url</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$pidUrl</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$pidUrl</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The pid is                    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the handle data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$handleData</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$handleData</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The data is                   : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the type data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$type</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$type</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The type(s) to show is/are    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>
	
	<span class="c1"># check the header data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$header</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$header</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The extra header info is      : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the credentials data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$credentials</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># read the credentials from the file</span>
		<span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$credentials</span><span class="p">;</span>
		<span class="k">my</span> <span class="nv">$json_text</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span>
			<span class="nb">open</span><span class="p">(</span><span class="k">my</span> <span class="nv">$json_fh</span><span class="p">,</span> <span class="s">"&lt;:encoding(UTF-8)"</span><span class="p">,</span> <span class="nv">$filename</span><span class="p">)</span>  <span class="ow">or</span> <span class="nb">die</span><span class="p">(</span><span class="s">"Can't open $filename: $!\n"</span><span class="p">);</span>
			<span class="nb">local</span> <span class="vg">$/</span><span class="p">;</span>
			<span class="sr">&lt;$json_fh&gt;</span>
		<span class="p">};</span>

		<span class="c1"># convert from json and put in correct place </span>
		<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$json_text</span><span class="p">);</span>

		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="p">}</span>

	<span class="c1"># Print the message</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$message</span> <span class="p">)</span> <span class="p">{</span>

		<span class="k">print</span> <span class="s">"$message\n"</span><span class="p">;</span>
	<span class="p">};</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>

<span class="p">};</span></code></pre>


	 </div>
	
</div>
	
		
			<h3 id="the-response">The response:</h3>

<ul>
  <li>HTTP/1.1 201 Created: (Success) </li>
  <li>HTTP/1.1 204 No-Content: The local name already exists , and instead of creating a new one you‚Äôve just updated the values of an existing one.  </li>
  <li>HTTP/1.1 401 Unauthorized: Your username or your password is wrong</li>
  <li>HTTP/1.1 405 Method Not Allowed: 
    <ol>
      <li>You are trying to create a new handle in the main url of the server either (https://epic.grnet.gr/handles/11239/) or (https://epic.grnet.gr/handles). You have not specified a unique name for your handle. (or)</li>
      <li>You are trying to create a new handle with manual generation of suffix name via POST instead of PUT. POST supports automatic generation of suffix name.</li>
    </ol>
  </li>
  <li>HTTP/1.1 412 Precondition failed: You have used the precondition (HTTP‚Äôs If-Match: * or If-None-Match:*) in the request-header fields. The precondition given, evaluated to false when it was tested on the server and prevented the requested method from being applied.</li>
  <li>HTTP/1.1 415 Unsupported Media Type: You haven‚Äôt specify the correct headers for your request. The service supports Json representation so you must define the content-type of the request.</li>
</ul>

<pre><code>
HTTP/1.1 201 Created
Date: Mon, 25 Nov 2013 10:18:18 GMT
Content-Length: 2211
Location: https://epic.grnet.gr/api/v2/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5
ETag: "1B2M2Y8AsgTpgAmY7PhCfg"
Last-Modified: Thu, 01 Jan 1970 00:00:00 GMT
</code></pre>


		
	

 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/glossary/">Glossary</a></h3></li>
          <li><h3><a href="#">API</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/api/">Getting Started</a></h3></li>
                <li><h3><a href="/guides/api-auth/">Authenticate</a></h3></li>
                <li><h3><a href="/guides/api-generation/">PID Generation</a></h3></li>
                <li><h3><a href="/guides/api-get/">Get a PID</a></h3></li>
                <li><h3><a href="/guides/api-list/">List all PID</a></h3></li>
                <li><h3><a href="/guides/api-search/">Search</a></h3></li>
                <li><h3><a href="/guides/api-create/">Create a PID</a></h3></li>
                <li><h3><a href="/guides/api-update/">Update a PID</a></h3></li>
                <li><h3><a href="/guides/api-delete/">Delete a PID</a></h3></li>
                <li><h3><a href="/guides/api-partial/">Part Identifiers</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:contact@pidconsortium.eu" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:contact@argodoc.eu" class="site-link" target='_blank'>ARGO Consurtium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I"D
# API - Create a new PID

This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.

## Create a new PID - Description

You want to create a new PID. There are two ways to create - generate a new PID 

- automatic generation of the suffix name via the POST method
- manual generation of the suffix name via the PUT method

HTTP PUT can be used for both resource creation and resource updates .
So if you want to be sure that you are going to create a new one you must first check if it exists. If you don't check the existence of a PID based on the suffix it is possible that you will update the data of an existing one. 

There is a way to make your HTTP PUT request ‚Äúconditional‚Äù in the sense that it will only be executed if the URL doesn‚Äôt exist yet (which constitutes a create action), or that it does exist yet (which constitutes an update ). 

<p class="text-warning"><span class="label label-success">Info</span> In order to make the PUT request conditional use HTTP‚Äôs If-Match: * or If-None-Match:* headers.</p>

| **Description** | Create a new PID |
| **URL**         | The API Service URL  |
| **HTTP Method** | PUT for manual generation of suffix name                       |
| **HTTP Method** | POST for automatic generation of suffix name                       |
| **Security**    | Requires ownership of the PID. So you must authenticate before actually creating the PID|

The data you must send in order to create are described in the following table 


Type | Description | Required | Default value | Example value |
------|-------------|----------|---------------|---------------|
suffix | The local name of the handle in the system | Yes | None | a) use a UUID generator via **PUT method**, b) automatic generation via **POST method** |

The data you must send as json representation are described in the following table 

Type | Description | Required | Default value | Example value |
------|-------------|----------|---------------|---------------|
type |Each handle has a set of values assigned to it.  These handle values use a common data structure for its data. The data type defines the syntax and semantics of the data in its data field.  | Yes | None | URL |
parsed_data|A set of data that describes the resource identified by the handle. The syntax and semantics of parsed data are identified by the <type> field.|Yes|None|http://www.grnet.gr
timestamp|The timestamp records the last time this Handle Value was updated at the server. The field contains elapsed time since 00:00:00 UTC, January 1970 in milliseconds.|NO|timestamp|2013-11-26T11:58:14Z
ttl_type|the TTL type indicates whether the TTL value is absolute or relative.  The absolute TTL value defines the time to live in terms of seconds since 00:00:00 UTC, January 1st 1970.  A relative TTL specifies the time to live in terms of the number of seconds elapsed since the value was obtained by the client from any handle server.|NO|integer 0=relative, 1=absolute by default 0|0|
ttl|a number that specifies the Time-To- Live of the value record. A positive value defines the time to live in terms of seconds since 00:00:00 UTC, January 1st 1970. A negative value specifies the time to live in terms of the number of seconds elapsed since the value was obtained. (if ttl_type is absolute, then this indicates the date/time of expiration in seconds since Jan 1 0:00:00 1970.) |NO|integer seconds |86400|
refs|a list of references to other Handle Values| No| None| [{'idx':'1','handle':'11239/12'}] where idx is the value for index field of handle data, and handle is the referenced handle value 

## Example

In this example we are going to create a new handle via the PUT method  in the following url https://epic.grnet.gr/handles/11239/UUIDGENERATE. There is an example via POST method at [PID generation page][PIDGEN]

[PIDGEN]: /guides/api-generation/
;T;
I"9
<h1 id="api---create-a-new-pid">API - Create a new PID</h1>

<p>This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.</p>

<h2 id="create-a-new-pid---description">Create a new PID - Description</h2>

<p>You want to create a new PID. There are two ways to create - generate a new PID </p>

<ul>
  <li>automatic generation of the suffix name via the POST method</li>
  <li>manual generation of the suffix name via the PUT method</li>
</ul>

<p>HTTP PUT can be used for both resource creation and resource updates .
So if you want to be sure that you are going to create a new one you must first check if it exists. If you don‚Äôt check the existence of a PID based on the suffix it is possible that you will update the data of an existing one. </p>

<p>There is a way to make your HTTP PUT request ‚Äúconditional‚Äù in the sense that it will only be executed if the URL doesn‚Äôt exist yet (which constitutes a create action), or that it does exist yet (which constitutes an update ). </p>

<p class="text-warning"><span class="label label-success">Info</span> In order to make the PUT request conditional use HTTP‚Äôs If-Match: * or If-None-Match:* headers.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Description</strong></td>
      <td>Create a new PID</td>
    </tr>
    <tr>
      <td><strong>URL</strong></td>
      <td>The API Service URL</td>
    </tr>
    <tr>
      <td><strong>HTTP Method</strong></td>
      <td>PUT for manual generation of suffix name</td>
    </tr>
    <tr>
      <td><strong>HTTP Method</strong></td>
      <td>POST for automatic generation of suffix name</td>
    </tr>
    <tr>
      <td><strong>Security</strong></td>
      <td>Requires ownership of the PID. So you must authenticate before actually creating the PID</td>
    </tr>
  </tbody>
</table>

<p>The data you must send in order to create are described in the following table </p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Description</th>
      <th>Required</th>
      <th>Default value</th>
      <th>Example value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>suffix</td>
      <td>The local name of the handle in the system</td>
      <td>Yes</td>
      <td>None</td>
      <td>a) use a UUID generator via <strong>PUT method</strong>, b) automatic generation via <strong>POST method</strong>
</td>
    </tr>
  </tbody>
</table>

<p>The data you must send as json representation are described in the following table </p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Description</th>
      <th>Required</th>
      <th>Default value</th>
      <th>Example value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>type</td>
      <td>Each handle has a set of values assigned to it.  These handle values use a common data structure for its data. The data type defines the syntax and semantics of the data in its data field.</td>
      <td>Yes</td>
      <td>None</td>
      <td>URL</td>
    </tr>
    <tr>
      <td>parsed_data</td>
      <td>A set of data that describes the resource identified by the handle. The syntax and semantics of parsed data are identified by the <type> field.</type>
</td>
      <td>Yes</td>
      <td>None</td>
      <td>http://www.grnet.gr</td>
    </tr>
    <tr>
      <td>timestamp</td>
      <td>The timestamp records the last time this Handle Value was updated at the server. The field contains elapsed time since 00:00:00 UTC, January 1970 in milliseconds.</td>
      <td>NO</td>
      <td>timestamp</td>
      <td>2013-11-26T11:58:14Z</td>
    </tr>
    <tr>
      <td>ttl_type</td>
      <td>the TTL type indicates whether the TTL value is absolute or relative.  The absolute TTL value defines the time to live in terms of seconds since 00:00:00 UTC, January 1st 1970.  A relative TTL specifies the time to live in terms of the number of seconds elapsed since the value was obtained by the client from any handle server.</td>
      <td>NO</td>
      <td>integer 0=relative, 1=absolute by default 0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>ttl</td>
      <td>a number that specifies the Time-To- Live of the value record. A positive value defines the time to live in terms of seconds since 00:00:00 UTC, January 1st 1970. A negative value specifies the time to live in terms of the number of seconds elapsed since the value was obtained. (if ttl_type is absolute, then this indicates the date/time of expiration in seconds since Jan 1 0:00:00 1970.)</td>
      <td>NO</td>
      <td>integer seconds</td>
      <td>86400</td>
    </tr>
    <tr>
      <td>refs</td>
      <td>a list of references to other Handle Values</td>
      <td>No</td>
      <td>None</td>
      <td>[{‚Äòidx‚Äô:‚Äô1‚Äô,‚Äôhandle‚Äô:‚Äô11239/12‚Äô}] where idx is the value for index field of handle data, and handle is the referenced handle value</td>
    </tr>
  </tbody>
</table>

<h2 id="example">Example</h2>

<p>In this example we are going to create a new handle via the PUT method  in the following url https://epic.grnet.gr/handles/11239/UUIDGENERATE. There is an example via POST method at <a href="/guides/api-generation/">PID generation page</a></p>

;T;@I"/guides/api-delete/;T{;{	;I"°Ì<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>API | Delete a PID</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h1 id="api---delete-a-pid">API - Delete a PID</h1>

<p>This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.</p>

<h2 id="delete-a-pid---description">DELETE a PID - Description</h2>

<p>You may want to delete a defined PID. Once you have the PID url, then you can delete the PID, by just supplying it. </p>

<p><strong>At the moment a nodelete profile is enforced. So the deletion of handles is deactivated.</strong></p>

<table>
  <tbody>
    <tr>
      <td><strong>Description</strong></td>
      <td>Delete a PID</td>
    </tr>
    <tr>
      <td><strong>URL</strong></td>
      <td>The  API Service URL with the PID</td>
    </tr>
    <tr>
      <td><strong>HTTP Method</strong></td>
      <td>DELETE</td>
    </tr>
    <tr>
      <td><strong>Security</strong></td>
      <td>Requires ownership of the PID. So you must authenticate before actually deleting the file</td>
    </tr>
  </tbody>
</table>

<p>The data you must send in order to delete are described in the following table </p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Description</th>
      <th>Required</th>
      <th>Default value</th>
      <th>Example value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>suffix</td>
      <td>The local name of the handle in the system</td>
      <td>Yes</td>
      <td>None</td>
      <td>05C3DB56-5692-11E3-AF8F-1C6F65A666B5</td>
    </tr>
  </tbody>
</table>

<h2 id="example">Example</h2>

<p>In this example we are going to delete of a selected PID https://epic.grnet.gr/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5</p>




<ul class="nav nav-tabs">
	
	  
		  <li class="active"><a href="#tab-1" data-toggle="tab">Curl</a></li>
	  
	
	  
		  <li><a href="#tab-2" data-toggle="tab">Python</a></li>
	
	
	  
		  <li><a href="#tab-3" data-toggle="tab">PHP</a></li>
	
	
	  
		  <li><a href="#tab-4" data-toggle="tab">Perl</a></li>
	
	
</ul>
<div class="tab-content">
	
	 
	 <div class="tab-pane active" id="tab-1">
	  
		<p>The request in curl</p>

<pre><code>
curl -v -u "YOURUSERNAME:YOURPASSWORD" -H "Accept:application/json" -H "Content-Type:application/json" -X DELETE https://epic.grnet.gr/api/v2/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5
</code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-2">
	
		
<p>The request in python</p>

<pre><code class="language-python"><span class="kn">import</span> <span class="nn">urllib2</span>

<span class="n">PIDSERVICE_URL</span><span class="o">=</span><span class="s">"THE_SERVICE_URL_WITH_PREFIX"</span>
<span class="n">PIDSERVICE_USER</span><span class="o">=</span><span class="s">"YOURUSERNAME"</span>
<span class="n">PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s">"YOURPASSWORD"</span>
<span class="n">HANDLENAME</span><span class="o">=</span><span class="s">"05C3DB56-5692-11E3-AF8F-1C6F65A666B5"</span>
<span class="n">URL_TO_OPEN</span><span class="o">=</span><span class="n">PIDSERVICE_URL</span><span class="o">+</span><span class="n">HANDLENAME</span>
<span class="n">DATAURL</span><span class="o">=</span><span class="s">""</span>

<span class="c"># create a password manager</span>
<span class="n">password_mgr</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPPasswordMgrWithDefaultRealm</span><span class="p">()</span>

<span class="c"># Add the username and password.</span>
<span class="n">password_mgr</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">PIDSERVICE_URL</span><span class="p">,</span> <span class="n">PIDSERVICE_USER</span><span class="p">,</span> <span class="n">PIDSERVICE_PASSWD</span><span class="p">)</span>

<span class="n">handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">(</span><span class="n">password_mgr</span><span class="p">)</span>

<span class="c"># create "opener" (OpenerDirector instance)</span>
<span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>

<span class="c"># use the opener to fetch a URL</span>
<span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">URL_TO_OPEN</span><span class="p">)</span>

<span class="c"># Install the opener.</span>
<span class="c"># Now all calls to urllib2.urlopen use our opener.</span>
<span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>

<span class="c">#http://stackoverflow.com/questions/2407126/python-urllib2-basic-auth-problem</span>
<span class="n">REQUESTDATA</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">URL_TO_OPEN</span><span class="p">)</span>
<span class="c"># creates the delete method</span>
<span class="n">REQUESTDATA</span><span class="o">.</span><span class="n">get_method</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="s">'DELETE'</span>

<span class="k">try</span><span class="p">:</span>
        <span class="n">DATAURL</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">REQUESTDATA</span><span class="p">)</span>
<span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">"404-Not found"</span>
        <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">401</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">"401-Authentication failed"</span>
        <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">403</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">"403-Not permitted"</span></code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-3">
	
		
<p>The request in php </p>

<pre><code class="language-php5"><span class="nv">$PIDSERVICE_URL</span><span class="o">=</span><span class="s2">"THE_SERVICE_URL_WITH_PREFIX"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_USER</span><span class="o">=</span><span class="s2">"YOURUSERNAME"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s2">"YOURPASSWORD"</span><span class="p">;</span>
<span class="nv">$HANDLENAME</span><span class="o">=</span><span class="s2">"05C3DB56-5692-11E3-AF8F-1C6F65A666B5"</span><span class="p">;</span>
<span class="nv">$PIDTODELETE</span><span class="o">=</span> <span class="nv">$PIDSERVICE_URL</span><span class="o">.</span><span class="nv">$HANDLENAME</span><span class="p">;</span>
<span class="c1">// Get cURL resource</span>
<span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>

<span class="c1">// Set the url to authenticate</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span><span class="nx">CURLOPT_URL</span><span class="p">,</span><span class="nv">$PIDTODELETE</span><span class="p">);</span>
<span class="c1">// Set the authentication options</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_USERPWD</span><span class="p">,</span> <span class="nv">$PIDSERVICE_USER</span><span class="o">.</span><span class="s2">":"</span><span class="o">.</span><span class="nv">$PIDSERVICE_PASSWD</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPAUTH</span><span class="p">,</span> <span class="nx">CURLAUTH_BASIC</span><span class="p">);</span>

<span class="c1">//set the DELETE action</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_CUSTOMREQUEST</span><span class="p">,</span> <span class="s2">"DELETE"</span><span class="p">);</span>

<span class="c1">// Include header in result? (0 = yes, 1 = no)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="c1">// Should cURL return or print out the data? (true = return, false = print)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">// Download the given URL, and return output</span>
<span class="nv">$output</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
<span class="nv">$info</span> <span class="o">=</span> <span class="nb">curl_getinfo</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">204</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"The PID was successfully deleted"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">401</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Authorization failed: Either your login or your password is wrong."</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">403</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"HTTP/1.1 403 Forbidden: The operation is not permitted."</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">405</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"HTTP/1.1 405 Method Not Allowed: The submitted url with PID is wrong"</span><span class="p">;</span>

<span class="c1">// Close the cURL resource, and free system resources</span>
<span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span></code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-4">
	
		
<p>The request in perl</p>

<pre><code class="language-perl"><span class="c1">#!/usr/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Getopt::</span><span class="n">Long</span><span class="p">;</span>
<span class="k">use</span> <span class="n">Switch</span> <span class="s">'Perl5'</span><span class="p">,</span> <span class="s">'Perl6'</span><span class="p">;</span>
<span class="k">use</span> <span class="n">JSON</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$fullargv0</span> <span class="o">=</span> <span class="nv">$0</span><span class="p">;</span>
<span class="k">my</span> <span class="p">(</span><span class="nv">$argv0</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$fullargv0</span> <span class="o">=~</span><span class="sr"> /([^\/\\]+)$/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">%settings</span> <span class="o">=</span> <span class="p">(</span>
<span class="s">'debug'</span> <span class="o">=&gt;</span> <span class="s">'False'</span><span class="p">,</span>
<span class="s">'handle'</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="s">'action'</span> <span class="o">=&gt;</span><span class="s">'delete'</span><span class="p">,</span>
	<span class="s">'credentials'</span> 	<span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'username'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'password'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'baseuri'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'data'</span>	<span class="o">=&gt;</span><span class="p">{</span>
		<span class="s">'get'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
		<span class="s">'putpost'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'format'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'headerextra'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="s">'type'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'url'</span><span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'pid'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
<span class="p">},</span>
<span class="p">);</span>

<span class="c1"># Main subroutine</span>
<span class="k">sub </span><span class="nf">main</span> <span class="p">{</span>

	<span class="c1">#Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Get the script arguments</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">)</span> <span class="o">=</span> <span class="n">get_arguments</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span>

	<span class="k">if</span><span class="p">(</span> <span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> 
		<span class="n">performDelete</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span> 

	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>
<span class="p">}</span>
 
<span class="c1"># Subroutine to perform a DELETE action</span>
<span class="k">sub </span><span class="nf">performDelete</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1">#construct url</span>
	<span class="k">my</span> <span class="nv">$url</span><span class="o">=</span><span class="s">"$settings_ref-&gt;{handle}-&gt;{credentials}-&gt;{baseuri}$settings_ref-&gt;{handle}-&gt;{url}-&gt;{pid}"</span><span class="p">;</span>
	<span class="nb">printf</span><span class="p">(</span><span class="s">"The constructed url is        : %s\n"</span><span class="p">,</span><span class="nv">$url</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="c1"># perform action</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_content_type</span> <span class="p">)</span> <span class="o">=</span> <span class="n">httpDelete</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">,</span> <span class="nv">$url</span> <span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">);</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'An error happened\n'</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="c1"># reader helper calback function</span>
<span class="k">sub </span><span class="nf">read_callback</span> <span class="p">{</span>
	<span class="k">my</span> <span class="p">(</span><span class="nv">$maxlength</span><span class="p">,</span><span class="nv">$pointer</span><span class="p">)</span><span class="o">=</span><span class="nv">@_</span><span class="p">;</span>
	<span class="c1"># printf("The MAXLENGTH is     : \n", $maxlength);</span>
	<span class="c1"># printf("The POINTER is       : \n", $$pointer) ;</span>
	<span class="k">my</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$$pointer</span><span class="p">;</span>
	<span class="nv">$$pointer</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1"># Subroutine delete via a http DELETE</span>
<span class="k">sub </span><span class="nf">httpDelete</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="k">print</span><span class="p">(</span><span class="s">'Entering httpDelete           :\n'</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

	<span class="c1"># local varables</span>
	<span class="k">my</span> <span class="nv">$body</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_code</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_content_type</span><span class="p">;</span>

	<span class="k">my</span> <span class="nv">$curl</span> <span class="o">=</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>

	<span class="c1"># set options for the curl http request</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_NOBODY</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_CUSTOMREQUEST</span><span class="p">,</span> <span class="s">'DELETE'</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_USERNAME</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">});</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_PASSWORD</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">});</span>

	<span class="c1">#debugging</span>
	<span class="c1">#$curl-&gt;setopt (CURLOPT_VERBOSE, 1);</span>

	<span class="c1"># Do the actual curl http request</span>
	<span class="k">my</span> <span class="nv">$returncode</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">perform</span><span class="p">;</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="nv">$response_code</span>         <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_HTTP_CODE</span><span class="p">);</span>
		<span class="nv">$response_content_type</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_CONTENT_TYPE</span><span class="p">);</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response code        : $response_code\n"</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response content type: $response_content_type\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="c1"># Error code, type of error, error message</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"An error happened: $returncode "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">strerror</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">)</span><span class="o">.</span><span class="s">" "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">errbuf</span><span class="o">.</span><span class="s">"\n"</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">,</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="nv">$response_content_type</span> <span class="p">);</span>
<span class="p">}</span>
<span class="c1"># Subroutine to get and check all script arguments</span>
<span class="k">sub </span><span class="nf">get_arguments</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Define local variables</span>
	<span class="k">my</span> <span class="nv">%arguments</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$username</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$password</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$baseUri</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$pidUrl</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$credentials</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$handleData</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$type</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$returncode</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$message</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">@sources</span><span class="p">;</span>

	<span class="n">GetOptions</span><span class="p">(</span> <span class="s">'h|help'</span>    <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">},</span>
		<span class="s">'user=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$username</span><span class="p">,</span>
		<span class="s">'passwd=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$password</span><span class="p">,</span>
		<span class="s">'base=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$baseUri</span><span class="p">,</span>
		<span class="s">'pid=s'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$pidUrl</span><span class="p">,</span>
		<span class="s">'cred=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$credentials</span><span class="p">,</span>
		<span class="s">'data=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$handleData</span><span class="p">,</span>
		<span class="s">'type=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$type</span><span class="p">,</span>
		<span class="s">'header=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$header</span><span class="p">,</span>
		<span class="s">'get'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">},</span>
		<span class="s">'put'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">},</span>
		<span class="s">'delete'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">},</span>
		<span class="s">'post'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">},</span>
		<span class="s">'pretty'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">},</span>
		<span class="s">'d|debug'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">},</span>
	<span class="p">);</span>

	<span class="c1"># Check the help flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># Set the returncode</span>
		<span class="nv">$returncode</span><span class="o">=</span><span class="mi">255</span><span class="p">;</span>

		<span class="nv">$message</span> <span class="o">=</span> <span class="n">print_help</span><span class="p">();</span>
	<span class="p">}</span>
	
	<span class="c1"># Check the debug flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=</span> <span class="s">'True'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'debug is                      : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the pretty flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=</span> <span class="s">'pretty'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'pretty format printing is     : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the action flag's (get,put,delete,post,search,nagios)</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'get'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'put'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'delete'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'post'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the username</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$username</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$username</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the password</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$password</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$password</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the base uri</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$baseUri</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$baseUri</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the pid url</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$pidUrl</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$pidUrl</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The pid is                    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the handle data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$handleData</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$handleData</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The data is                   : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the type data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$type</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$type</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The type(s) to show is/are    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>
	
	<span class="c1"># check the header data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$header</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$header</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The extra header info is      : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the credentials data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$credentials</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># read the credentials from the file</span>
		<span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$credentials</span><span class="p">;</span>
		<span class="k">my</span> <span class="nv">$json_text</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span>
			<span class="nb">open</span><span class="p">(</span><span class="k">my</span> <span class="nv">$json_fh</span><span class="p">,</span> <span class="s">"&lt;:encoding(UTF-8)"</span><span class="p">,</span> <span class="nv">$filename</span><span class="p">)</span>  <span class="ow">or</span> <span class="nb">die</span><span class="p">(</span><span class="s">"Can't open $filename: $!\n"</span><span class="p">);</span>
			<span class="nb">local</span> <span class="vg">$/</span><span class="p">;</span>
			<span class="sr">&lt;$json_fh&gt;</span>
		<span class="p">};</span>

		<span class="c1"># convert from json and put in correct place </span>
		<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$json_text</span><span class="p">);</span>

		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="p">}</span>

	<span class="c1"># Print the message</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$message</span> <span class="p">)</span> <span class="p">{</span>

		<span class="k">print</span> <span class="s">"$message\n"</span><span class="p">;</span>
	<span class="p">};</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>

<span class="p">};</span></code></pre>


	 </div>
	
</div>
	
		
			<h3 id="the-response">The response:</h3>
<ul>
  <li>HTTP/1.1 204 No Content: (Success)</li>
  <li>HTTP/1.1 401 Unauthorized: Your username or your password is wrong</li>
  <li>HTTP/1.1 404 Not found: The resource doesn‚Äôt exist</li>
  <li>HTTP/1.1 403 Forbidden: The operation is not permitted</li>
  <li>HTTP/1.1 405 Method Not Allowed: The submitted url with PID is wrong</li>
</ul>

<pre><code>
&gt; DELETE /handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5 HTTP/1.1
&gt; Authorization: Basic Y2xhcmluLWVsOjUxMjdkZWIxZTJjNg==
&gt; User-Agent: curl/7.22.0 (i686-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3
&gt; Host: epic.grnet.gr
&gt; Accept:application/json
&gt; Content-Type:application/json
&gt;
&lt; HTTP/1.1 204 No Content
&lt; Date: Fri, 22 Nov 2013 13:05:14 GMT
&lt; Content-Length: 0
</code></pre>


		
	

 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/glossary/">Glossary</a></h3></li>
          <li><h3><a href="#">API</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/api/">Getting Started</a></h3></li>
                <li><h3><a href="/guides/api-auth/">Authenticate</a></h3></li>
                <li><h3><a href="/guides/api-generation/">PID Generation</a></h3></li>
                <li><h3><a href="/guides/api-get/">Get a PID</a></h3></li>
                <li><h3><a href="/guides/api-list/">List all PID</a></h3></li>
                <li><h3><a href="/guides/api-search/">Search</a></h3></li>
                <li><h3><a href="/guides/api-create/">Create a PID</a></h3></li>
                <li><h3><a href="/guides/api-update/">Update a PID</a></h3></li>
                <li><h3><a href="/guides/api-delete/">Delete a PID</a></h3></li>
                <li><h3><a href="/guides/api-partial/">Part Identifiers</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:contact@pidconsortium.eu" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:contact@argodoc.eu" class="site-link" target='_blank'>ARGO Consurtium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I"U
# API - Delete a PID

This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.

## DELETE a PID - Description

You may want to delete a defined PID. Once you have the PID url, then you can delete the PID, by just supplying it. 

**At the moment a nodelete profile is enforced. So the deletion of handles is deactivated.**


| **Description** | Delete a PID |
| **URL**         | The  API Service URL with the PID   |
| **HTTP Method** | DELETE                        |
| **Security**    | Requires ownership of the PID. So you must authenticate before actually deleting the file        |

The data you must send in order to delete are described in the following table 


Type | Description | Required | Default value | Example value |
------|-------------|----------|---------------|---------------|
suffix | The local name of the handle in the system | Yes | None |  05C3DB56-5692-11E3-AF8F-1C6F65A666B5 |

## Example

In this example we are going to delete of a selected PID https://epic.grnet.gr/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5


;T;
I"V
<h1 id="api---delete-a-pid">API - Delete a PID</h1>

<p>This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.</p>

<h2 id="delete-a-pid---description">DELETE a PID - Description</h2>

<p>You may want to delete a defined PID. Once you have the PID url, then you can delete the PID, by just supplying it. </p>

<p><strong>At the moment a nodelete profile is enforced. So the deletion of handles is deactivated.</strong></p>

<table>
  <tbody>
    <tr>
      <td><strong>Description</strong></td>
      <td>Delete a PID</td>
    </tr>
    <tr>
      <td><strong>URL</strong></td>
      <td>The  API Service URL with the PID</td>
    </tr>
    <tr>
      <td><strong>HTTP Method</strong></td>
      <td>DELETE</td>
    </tr>
    <tr>
      <td><strong>Security</strong></td>
      <td>Requires ownership of the PID. So you must authenticate before actually deleting the file</td>
    </tr>
  </tbody>
</table>

<p>The data you must send in order to delete are described in the following table </p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Description</th>
      <th>Required</th>
      <th>Default value</th>
      <th>Example value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>suffix</td>
      <td>The local name of the handle in the system</td>
      <td>Yes</td>
      <td>None</td>
      <td>05C3DB56-5692-11E3-AF8F-1C6F65A666B5</td>
    </tr>
  </tbody>
</table>

<h2 id="example">Example</h2>

<p>In this example we are going to delete of a selected PID https://epic.grnet.gr/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5</p>

;T;@$I"/guides/api-generation/;T{;{	;I"r<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>API | PID generation</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h1 id="api---pid-generation">API - PID generation</h1>

<p>Every identifier consists of two parts: its prefix , and a unique local name under the prefix known as its suffix</p>

<p><span class="txtcenter"><strong>
&lt; PREFIX &gt; / &lt; SUFFIX &gt; (e.g. 11239/123456745).
</strong></span></p>

<p>Any suffix - local name must be unique under its local namespace. The uniqueness of a prefix and a local name under that prefix ensures that any identifier is globally unique within the context of the System.</p>

<p>There are two ways to generate the SUFFIX a) automatic and b) manual</p>

<h2 id="automatic-generation-of-suffix">Automatic generation of SUFFIX</h2>

<p>The API supports the automatic generation of a local name - suffix by using a generator via a POST Request. This generator uses UUIDs to guarantee the uniqueness of created handles. The syntax follows the following pattern</p>

<p><span class="txtcenter"><strong>SUFFIX = prefix - UUID - suffix </strong></span></p>

<p><strong><em>where</em></strong></p>

<ul>
  <li>
<strong>prefix</strong>: Optional: a string of UTF-8 encoded printable unicode characters to put before the UUID.</li>
  <li>
<strong>UUID</strong>: UUID stands for Universally Unique IDentifier, GUID for Globally Unique IDentifier. A universally unique identifier (UUID) is an identifier standard used in software construction, standardized by the Open Software Foundation (OSF) as part of the Distributed Computing Environment (DCE). The intent of UUIDs is to enable distributed systems to uniquely identify information without significant central coordination.</li>
  <li>
<strong>suffix</strong>: Optional: a string of UTF-8 encoded printable unicode characters to put after the UUID.</li>
</ul>

<h2 id="example">Example</h2>

<p>In this example we are going to use the automatic creation of PID. The automatic generation of PID is executed using a POST HTTP Request.</p>




<ul class="nav nav-tabs">
	
	  
		  <li class="active"><a href="#tab-1" data-toggle="tab">Curl</a></li>
	  
	
	  
		  <li><a href="#tab-2" data-toggle="tab">Python</a></li>
	
	
	  
		  <li><a href="#tab-3" data-toggle="tab">PHP</a></li>
	
	
	  
		  <li><a href="#tab-4" data-toggle="tab">Perl</a></li>
	
	
</ul>
<div class="tab-content">
	
	 
	 <div class="tab-pane active" id="tab-1">
	  
		<p>The request in curl</p>

<pre><code>
curl -v -u "YOURUSERNAME:YOURPASSWORD" -H "Accept:application/json" -H "Content-Type:application/json" -X POST --data '[{"type":"URL","parsed_data":"http://www.grnet.gr/"}]' https://epic.grnet.gr/api/v2/handles/11239/\?prefix=GRNET\&amp;suffix=TEST

</code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-2">
	
		
<p>The request in python. 
The main difference is that you have to do a POST request.</p>

<pre><code class="language-python"><span class="kn">import</span> <span class="nn">urllib2</span>
<span class="kn">import</span> <span class="nn">uuid</span>
<span class="kn">import</span> <span class="nn">json</span>

<span class="n">PIDSERVICE_URL</span><span class="o">=</span><span class="s">"THE_SERVICE_URL_WITH_PREFIX"</span>
<span class="n">PIDSERVICE_USER</span><span class="o">=</span><span class="s">"YOURUSERNAME"</span>
<span class="n">PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s">"YOURPASSWORD"</span>
<span class="n">SUFFIX</span> <span class="o">=</span><span class="s">"?prefix=GRNET&amp;suffix=test"</span>
<span class="n">URL_TO_OPEN</span><span class="o">=</span><span class="n">PIDSERVICE_URL</span><span class="o">+</span><span class="n">SUFFIX</span>
<span class="n">DATAURL</span><span class="o">=</span><span class="s">''</span>

<span class="c"># create a password manager</span>
<span class="n">password_mgr</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPPasswordMgrWithDefaultRealm</span><span class="p">()</span>

<span class="c"># Add the username and password.</span>
<span class="n">password_mgr</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">PIDSERVICE_URL</span><span class="p">,</span> <span class="n">PIDSERVICE_USER</span><span class="p">,</span> <span class="n">PIDSERVICE_PASSWD</span><span class="p">)</span>

<span class="n">handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">(</span><span class="n">password_mgr</span><span class="p">)</span>

<span class="c"># create "opener" (OpenerDirector instance)</span>
<span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>

<span class="c"># use the opener to fetch a URL</span>
<span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">PIDSERVICE_URL</span><span class="p">)</span>

<span class="c"># Install the opener.</span>
<span class="c"># Now all calls to urllib2.urlopen use the created opener.</span>
<span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>

<span class="c">#create the json data</span>
<span class="n">JSONDATA</span> <span class="o">=</span> <span class="p">[{</span><span class="s">'type'</span><span class="p">:</span><span class="s">'URL'</span><span class="p">,</span><span class="s">'parsed_data'</span><span class="p">:</span><span class="s">'http://www.grnet.gr'</span><span class="p">}]</span>
<span class="n">JSONDATATOSEND</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">JSONDATA</span><span class="p">);</span>

<span class="n">REQUESTDATA</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">URL_TO_OPEN</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">JSONDATATOSEND</span><span class="p">)</span>

<span class="c">#create the headers</span>
<span class="n">REQUESTDATA</span><span class="o">.</span><span class="n">add_header</span><span class="p">(</span><span class="s">'Content-Type'</span><span class="p">,</span><span class="s">'application/json'</span><span class="p">)</span>
<span class="n">REQUESTDATA</span><span class="o">.</span><span class="n">add_header</span><span class="p">(</span><span class="s">'Content-Length'</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">JSONDATATOSEND</span><span class="p">))</span>

<span class="c"># creates the POST method</span>
<span class="n">REQUESTDATA</span><span class="o">.</span><span class="n">get_method</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="s">'POST'</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">DATAURL</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">REQUESTDATA</span><span class="p">)</span>
    
<span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">e</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"404-Not found"</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">401</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"401-Authentication failed"</span>    
        <span class="c">#get http code of the request</span>

<span class="k">if</span> <span class="n">DATAURL</span><span class="p">:</span>
    <span class="c"># Getting the code</span>
    <span class="k">print</span> <span class="s">"This gets the code: "</span><span class="p">,</span> <span class="n">DATAURL</span><span class="o">.</span><span class="n">code</span></code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-3">
	
		
<p>The request in php </p>

<pre><code class="language-php5"><span class="nv">$PIDSERVICE_URL</span><span class="o">=</span><span class="s2">"THE_SERVICE_URL_WITH_PREFIX"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_USER</span><span class="o">=</span><span class="s2">"YOURUSERNAME"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s2">"YOURPASSWORD"</span><span class="p">;</span>
<span class="nv">$UUID</span> <span class="o">=</span> <span class="s2">"?prefix=GRNET&amp;suffix=TEST"</span><span class="p">;</span>
<span class="nv">$URL_TO_OPEN</span> <span class="o">=</span> <span class="nv">$PIDSERVICE_URL</span><span class="o">.</span><span class="nv">$UUID</span><span class="p">;</span>
<span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="s1">'URL'</span><span class="p">,</span><span class="s1">'parsed_data'</span><span class="o">=&gt;</span><span class="s1">'http://www.grnet.gr/'</span><span class="p">));</span>
<span class="nv">$update_json</span><span class="o">=</span><span class="nb">json_encode</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>

<span class="c1">// Get cURL resource</span>
<span class="nv">$ch</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>

<span class="c1">//Set the headers to complete the request</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">'Content-Type: application/json'</span><span class="p">,</span><span class="s1">'Content-Length: '</span> <span class="o">.</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$update_json</span><span class="p">)));</span>

<span class="c1">//set the POST Action</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_CUSTOMREQUEST</span><span class="p">,</span> <span class="s2">"POST"</span><span class="p">);</span>

<span class="c1">//SET the postfield data</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_POSTFIELDS</span><span class="p">,</span><span class="nv">$update_json</span><span class="p">);</span>

<span class="c1">// Should cURL return or print out the data? (true = return, false = print)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">//Set the url with the new name of the PID </span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$URL_TO_OPEN</span><span class="p">);</span>

<span class="c1">// Set the authentication options</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_USERPWD</span><span class="p">,</span> <span class="nv">$PIDSERVICE_USER</span><span class="o">.</span><span class="s2">":"</span><span class="o">.</span><span class="nv">$PIDSERVICE_PASSWD</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPAUTH</span><span class="p">,</span> <span class="nx">CURLAUTH_BASIC</span><span class="p">);</span>

<span class="nv">$output</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>
<span class="nv">$info</span> <span class="o">=</span> <span class="nb">curl_getinfo</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>

<span class="c1">// Download the given URL, and return output </span>

<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">200</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"HANDLE EXISTS"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">201</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"PID CREATED"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">204</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"PID UPDATED"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">404</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"HANDLE DOESNT EXIST"</span><span class="p">;</span>

<span class="nb">curl_close</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span></code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-4">
	
		
<p>The request in perl</p>

<pre><code class="language-perl"><span class="c1">#!/usr/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Getopt::</span><span class="n">Long</span><span class="p">;</span>
<span class="k">use</span> <span class="n">Switch</span> <span class="s">'Perl5'</span><span class="p">,</span> <span class="s">'Perl6'</span><span class="p">;</span>
<span class="k">use</span> <span class="n">JSON</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$fullargv0</span> <span class="o">=</span> <span class="nv">$0</span><span class="p">;</span>
<span class="k">my</span> <span class="p">(</span><span class="nv">$argv0</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$fullargv0</span> <span class="o">=~</span><span class="sr"> /([^\/\\]+)$/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">%settings</span> <span class="o">=</span> <span class="p">(</span>
<span class="s">'debug'</span> <span class="o">=&gt;</span> <span class="s">'False'</span><span class="p">,</span>
<span class="s">'handle'</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="s">'action'</span> <span class="o">=&gt;</span><span class="s">'put'</span><span class="p">,</span>
	<span class="s">'credentials'</span> 	<span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'username'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'password'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'baseuri'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'data'</span>	<span class="o">=&gt;</span><span class="p">{</span>
		<span class="s">'get'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
		<span class="s">'putpost'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'format'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'headerextra'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="s">'type'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'url'</span><span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'pid'</span><span class="o">=&gt;</span> <span class="s">'prefix=GRNET&amp;suffix=TEST'</span><span class="p">,</span>
	<span class="p">},</span>
<span class="p">},</span>
<span class="p">);</span>

<span class="c1"># Main subroutine</span>
<span class="k">sub </span><span class="nf">main</span> <span class="p">{</span>

	<span class="c1">#Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Get the script arguments</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">)</span> <span class="o">=</span> <span class="n">get_arguments</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span>

	<span class="k">if</span><span class="p">(</span> <span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> 
	 <span class="n">performPost</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span>

	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>
<span class="p">}</span>
 
<span class="c1"># Subroutine to perform a POST action</span>
<span class="k">sub </span><span class="nf">performPost</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1">#construct url and headers</span>
	<span class="k">my</span> <span class="nv">$url</span><span class="o">=</span><span class="s">"$settings_ref-&gt;{handle}-&gt;{credentials}-&gt;{baseuri}$settings_ref-&gt;{handle}-&gt;{url}-&gt;{pid}"</span><span class="p">;</span>
	<span class="nb">printf</span><span class="p">(</span><span class="s">"The constructed url is        : %s\n"</span><span class="p">,</span><span class="nv">$url</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="k">my</span> <span class="nv">@httpHeaders</span> <span class="o">=</span> <span class="p">(</span> <span class="s">'Content-Type: application/json'</span> <span class="p">);</span>

	<span class="c1">#construct data</span>
	<span class="k">my</span> <span class="nv">$data</span><span class="o">=</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">};</span>
	<span class="nb">printf</span><span class="p">(</span><span class="s">"The data is                   : %s\n"</span><span class="p">,</span><span class="nv">$data</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="c1"># perform action</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_content_type</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_url</span> <span class="p">)</span> <span class="o">=</span> <span class="n">httpPost</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">,</span> <span class="nv">$url</span><span class="p">,</span> <span class="o">\</span><span class="nv">@httpHeaders</span><span class="p">,</span> <span class="nv">$data</span> <span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_url\n"</span><span class="p">);</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">);</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'An error happened\n'</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1"># reader helper calback function</span>
<span class="k">sub </span><span class="nf">read_callback</span> <span class="p">{</span>
	<span class="k">my</span> <span class="p">(</span><span class="nv">$maxlength</span><span class="p">,</span><span class="nv">$pointer</span><span class="p">)</span><span class="o">=</span><span class="nv">@_</span><span class="p">;</span>
	<span class="c1"># printf("The MAXLENGTH is     : \n", $maxlength);</span>
	<span class="c1"># printf("The POINTER is       : \n", $$pointer) ;</span>
	<span class="k">my</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$$pointer</span><span class="p">;</span>
	<span class="nv">$$pointer</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1"># Subroutine to post data via a http POST</span>
<span class="k">sub </span><span class="nf">httpPost</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$httpHeaders_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="k">print</span><span class="p">(</span><span class="s">'Entering httpPost             :\n'</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

	<span class="c1"># local varables</span>
	<span class="k">my</span> <span class="nv">$body</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_body</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_code</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_content_type</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_url</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>

	<span class="k">my</span> <span class="nv">$curl</span> <span class="o">=</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>

	<span class="c1"># set options for the curl http request</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="nv">$httpHeaders_ref</span> <span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_POST</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_POSTFIELDS</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_POSTFIELDSIZE</span><span class="p">,</span> <span class="nb">length</span><span class="p">(</span><span class="nv">$data</span><span class="p">))</span> <span class="p">;</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_USERNAME</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">});</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_PASSWORD</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">});</span>

	<span class="c1">#debugging</span>
	<span class="c1">#$curl-&gt;setopt (CURLOPT_VERBOSE, 1);</span>

	<span class="c1"># A filehandle, reference to a scalar or reference to a typeglob can be used here.</span>
	<span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">'&gt;:encoding(UTF-8)'</span><span class="p">,</span> <span class="o">\</span><span class="nv">$response_body</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">"$!"</span><span class="p">;</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_WRITEDATA</span><span class="p">,</span> <span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Do the actual curl http request</span>
	<span class="k">my</span> <span class="nv">$returncode</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">perform</span><span class="p">;</span>

	<span class="c1"># close file handle</span>
	<span class="nb">close</span><span class="p">(</span><span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nv">$response_code</span>         <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_HTTP_CODE</span><span class="p">);</span>
		<span class="nv">$response_content_type</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_CONTENT_TYPE</span><span class="p">);</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response code        : $response_code\n"</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response content type: $response_content_type\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_body\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
			<span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">'&lt;:encoding(UTF-8)'</span><span class="p">,</span> <span class="o">\</span><span class="nv">$response_body</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">"$!"</span><span class="p">;</span>
			<span class="k">while</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$row</span> <span class="o">=</span> <span class="sr">&lt;$fh&gt;</span><span class="p">)</span> <span class="p">{</span>
				<span class="nb">chomp</span> <span class="nv">$row</span><span class="p">;</span>
				<span class="k">print</span> <span class="s">"row: $row\n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
				<span class="k">if</span> <span class="p">(</span> <span class="nv">$row</span> <span class="o">=~</span><span class="sr"> /^Location/</span> <span class="p">)</span> <span class="p">{</span>
					<span class="nv">$response_url</span> <span class="o">=</span> <span class="nv">$row</span><span class="p">;</span>
					<span class="nv">$response_url</span> <span class="o">=~</span> <span class="sr">s/^Location: //</span> <span class="p">;</span>
					<span class="k">print</span><span class="p">(</span><span class="s">"Received response url         : $response_url\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
					<span class="k">last</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>

		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="c1"># Error code, type of error, error message</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"An error happened: $returncode "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">strerror</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">)</span><span class="o">.</span><span class="s">" "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">errbuf</span><span class="o">.</span><span class="s">"\n"</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">,</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="nv">$response_content_type</span><span class="p">,</span> <span class="nv">$response_url</span> <span class="p">);</span>
<span class="p">}</span>

<span class="c1"># Subroutine to get and check all script arguments</span>
<span class="k">sub </span><span class="nf">get_arguments</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Define local variables</span>
	<span class="k">my</span> <span class="nv">%arguments</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$username</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$password</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$baseUri</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$pidUrl</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$credentials</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$handleData</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$type</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$returncode</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$message</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">@sources</span><span class="p">;</span>

	<span class="n">GetOptions</span><span class="p">(</span> <span class="s">'h|help'</span>    <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">},</span>
		<span class="s">'user=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$username</span><span class="p">,</span>
		<span class="s">'passwd=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$password</span><span class="p">,</span>
		<span class="s">'base=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$baseUri</span><span class="p">,</span>
		<span class="s">'pid=s'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$pidUrl</span><span class="p">,</span>
		<span class="s">'cred=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$credentials</span><span class="p">,</span>
		<span class="s">'data=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$handleData</span><span class="p">,</span>
		<span class="s">'type=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$type</span><span class="p">,</span>
		<span class="s">'header=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$header</span><span class="p">,</span>
		<span class="s">'get'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">},</span>
		<span class="s">'put'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">},</span>
		<span class="s">'delete'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">},</span>
		<span class="s">'post'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">},</span>
		<span class="s">'pretty'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">},</span>
		<span class="s">'d|debug'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">},</span>
	<span class="p">);</span>

	<span class="c1"># Check the help flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># Set the returncode</span>
		<span class="nv">$returncode</span><span class="o">=</span><span class="mi">255</span><span class="p">;</span>

		<span class="nv">$message</span> <span class="o">=</span> <span class="n">print_help</span><span class="p">();</span>
	<span class="p">}</span>
	
	<span class="c1"># Check the debug flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=</span> <span class="s">'True'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'debug is                      : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the pretty flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=</span> <span class="s">'pretty'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'pretty format printing is     : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the action flag's (get,put,delete,post,search,nagios)</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'get'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'put'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'delete'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'post'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the username</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$username</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$username</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the password</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$password</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$password</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the base uri</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$baseUri</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$baseUri</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the pid url</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$pidUrl</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$pidUrl</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The pid is                    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the handle data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$handleData</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$handleData</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The data is                   : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the type data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$type</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$type</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The type(s) to show is/are    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>
	
	<span class="c1"># check the header data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$header</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$header</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The extra header info is      : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the credentials data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$credentials</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># read the credentials from the file</span>
		<span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$credentials</span><span class="p">;</span>
		<span class="k">my</span> <span class="nv">$json_text</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span>
			<span class="nb">open</span><span class="p">(</span><span class="k">my</span> <span class="nv">$json_fh</span><span class="p">,</span> <span class="s">"&lt;:encoding(UTF-8)"</span><span class="p">,</span> <span class="nv">$filename</span><span class="p">)</span>  <span class="ow">or</span> <span class="nb">die</span><span class="p">(</span><span class="s">"Can't open $filename: $!\n"</span><span class="p">);</span>
			<span class="nb">local</span> <span class="vg">$/</span><span class="p">;</span>
			<span class="sr">&lt;$json_fh&gt;</span>
		<span class="p">};</span>

		<span class="c1"># convert from json and put in correct place </span>
		<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$json_text</span><span class="p">);</span>

		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="p">}</span>

	<span class="c1"># Print the message</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$message</span> <span class="p">)</span> <span class="p">{</span>

		<span class="k">print</span> <span class="s">"$message\n"</span><span class="p">;</span>
	<span class="p">};</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>

<span class="p">};</span></code></pre>


	 </div>
	
</div>
	
		
			
<h4 id="the-result">The Result</h4>

<p>The result of the automatic generation</p>

<p><span class="txtcenter"><strong>GRNET-0000-0000-000A-5-TEST </strong></span></p>

<h2 id="manual-generation-of-suffix">Manual generation of SUFFIX</h2>

<p>Its up to the user to decide the names of the PIDs. You may use</p>

<ul>
  <li>a number</li>
  <li>a string</li>
  <li>a UUID </li>
  <li>a pattern based on the community context</li>
</ul>

<p>In all examples in this manual we use a UUID generator.</p>


		
	

 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/glossary/">Glossary</a></h3></li>
          <li><h3><a href="#">API</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/api/">Getting Started</a></h3></li>
                <li><h3><a href="/guides/api-auth/">Authenticate</a></h3></li>
                <li><h3><a href="/guides/api-generation/">PID Generation</a></h3></li>
                <li><h3><a href="/guides/api-get/">Get a PID</a></h3></li>
                <li><h3><a href="/guides/api-list/">List all PID</a></h3></li>
                <li><h3><a href="/guides/api-search/">Search</a></h3></li>
                <li><h3><a href="/guides/api-create/">Create a PID</a></h3></li>
                <li><h3><a href="/guides/api-update/">Update a PID</a></h3></li>
                <li><h3><a href="/guides/api-delete/">Delete a PID</a></h3></li>
                <li><h3><a href="/guides/api-partial/">Part Identifiers</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:contact@pidconsortium.eu" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:contact@argodoc.eu" class="site-link" target='_blank'>ARGO Consurtium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I"}
# API - PID generation

Every identifier consists of two parts: its prefix , and a unique local name under the prefix known as its suffix

<span class="txtcenter"><strong>
< PREFIX > / < SUFFIX > (e.g. 11239/123456745).
</strong></span>

Any suffix - local name must be unique under its local namespace. The uniqueness of a prefix and a local name under that prefix ensures that any identifier is globally unique within the context of the System.

There are two ways to generate the SUFFIX a) automatic and b) manual


## Automatic generation of SUFFIX

The API supports the automatic generation of a local name - suffix by using a generator via a POST Request. This generator uses UUIDs to guarantee the uniqueness of created handles. The syntax follows the following pattern

<span class="txtcenter"><strong>SUFFIX = prefix - UUID - suffix </strong></span>

***where***

- **prefix**: Optional: a string of UTF-8 encoded printable unicode characters to put before the UUID.
- **UUID**: UUID stands for Universally Unique IDentifier, GUID for Globally Unique IDentifier. A universally unique identifier (UUID) is an identifier standard used in software construction, standardized by the Open Software Foundation (OSF) as part of the Distributed Computing Environment (DCE). The intent of UUIDs is to enable distributed systems to uniquely identify information without significant central coordination.
- **suffix**: Optional: a string of UTF-8 encoded printable unicode characters to put after the UUID.


## Example

In this example we are going to use the automatic creation of PID. The automatic generation of PID is executed using a POST HTTP Request.



;T;
I"
<h1 id="api---pid-generation">API - PID generation</h1>

<p>Every identifier consists of two parts: its prefix , and a unique local name under the prefix known as its suffix</p>

<p><span class="txtcenter"><strong>
&lt; PREFIX &gt; / &lt; SUFFIX &gt; (e.g. 11239/123456745).
</strong></span></p>

<p>Any suffix - local name must be unique under its local namespace. The uniqueness of a prefix and a local name under that prefix ensures that any identifier is globally unique within the context of the System.</p>

<p>There are two ways to generate the SUFFIX a) automatic and b) manual</p>

<h2 id="automatic-generation-of-suffix">Automatic generation of SUFFIX</h2>

<p>The API supports the automatic generation of a local name - suffix by using a generator via a POST Request. This generator uses UUIDs to guarantee the uniqueness of created handles. The syntax follows the following pattern</p>

<p><span class="txtcenter"><strong>SUFFIX = prefix - UUID - suffix </strong></span></p>

<p><strong><em>where</em></strong></p>

<ul>
  <li>
<strong>prefix</strong>: Optional: a string of UTF-8 encoded printable unicode characters to put before the UUID.</li>
  <li>
<strong>UUID</strong>: UUID stands for Universally Unique IDentifier, GUID for Globally Unique IDentifier. A universally unique identifier (UUID) is an identifier standard used in software construction, standardized by the Open Software Foundation (OSF) as part of the Distributed Computing Environment (DCE). The intent of UUIDs is to enable distributed systems to uniquely identify information without significant central coordination.</li>
  <li>
<strong>suffix</strong>: Optional: a string of UTF-8 encoded printable unicode characters to put after the UUID.</li>
</ul>

<h2 id="example">Example</h2>

<p>In this example we are going to use the automatic creation of PID. The automatic generation of PID is executed using a POST HTTP Request.</p>

;T;@*I"/guides/api-get/;T{;{	;I"£&<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>API | Get a PID</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h1 id="api---get-a-pid">API - GET a PID</h1>

<p>This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.</p>

<h2 id="get-a-pid---description">GET a PID - Description</h2>
<p>Once you have the PID url, then you can retrieve the information at once for this PID, by just supplying its URL. </p>

<table>
  <tbody>
    <tr>
      <td><strong>Description</strong></td>
      <td>GET a PID</td>
    </tr>
    <tr>
      <td><strong>URL</strong></td>
      <td>The  API Service URL with the suffix</td>
    </tr>
    <tr>
      <td><strong>HTTP Method</strong></td>
      <td>GET</td>
    </tr>
    <tr>
      <td><strong>Security</strong></td>
      <td>You must authenticate before actually getting PID information.</td>
    </tr>
  </tbody>
</table>

<p>The data you must send in order to get the PID are described in the following table </p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Description</th>
      <th>Required</th>
      <th>Default value</th>
      <th>Example value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>url to authenticate</td>
      <td>a url to authenticate. We use the service PID service URL</td>
      <td>Yes</td>
      <td>None</td>
      <td>https://epic.grnet.gr/api/v2/handles/</td>
    </tr>
    <tr>
      <td>username</td>
      <td>your username</td>
      <td>Yes</td>
      <td>None</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td>password</td>
      <td>your password</td>
      <td>Yes</td>
      <td>None</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<h2 id="example">Example</h2>

<p>In this example we are going to retrieve the information of a PID with the following URL https://epic.grnet.gr/api/v2/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5</p>




<ul class="nav nav-tabs">
	
	  
		  <li class="active"><a href="#tab-1" data-toggle="tab">Curl</a></li>
	  
	
	  
		  <li><a href="#tab-2" data-toggle="tab">Python</a></li>
	
	
	  
		  <li><a href="#tab-3" data-toggle="tab">PHP</a></li>
	
	
	  
		  <li><a href="#tab-4" data-toggle="tab">Perl</a></li>
	
	
</ul>
<div class="tab-content">
	
	 
	 <div class="tab-pane active" id="tab-1">
	  
		<p>The request in curl</p>

<pre><code>
curl -D- -u "YOURUSERNAME:YOURPASSWORD" -X GET -H "Content-Type: application/json" https://epic.grnet.gr/api/v2/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5
</code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-2">
	
		
<p>The request in python</p>

<pre><code class="language-python"><span class="kn">import</span> <span class="nn">urllib2</span>

<span class="n">PIDSERVICE_URL</span><span class="o">=</span><span class="s">"THE_SERVICE_URL_WITH_PREFIX"</span> <span class="c">#dont forget to add "/" at the end</span>
<span class="n">PIDSERVICE_USER</span><span class="o">=</span><span class="s">"YOURUSERNAME"</span>
<span class="n">PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s">"YOURPASSWORD"</span>
<span class="n">HANDLENAME</span><span class="o">=</span><span class="s">"YOUR_PID"</span> <span class="c">#for example "66742AB2-5685-11E3-A413-1C6F65A666B5"</span>
<span class="n">URL_TO_OPEN</span><span class="o">=</span><span class="n">PIDSERVICE_URL</span><span class="o">+</span><span class="n">HANDLENAME</span>
<span class="n">DATAURL</span><span class="o">=</span><span class="s">''</span>

<span class="c"># create a password manager</span>
<span class="n">password_mgr</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPPasswordMgrWithDefaultRealm</span><span class="p">()</span>

<span class="c"># Add the username and password.</span>
<span class="n">password_mgr</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">PIDSERVICE_URL</span><span class="p">,</span> <span class="n">PIDSERVICE_USER</span><span class="p">,</span> <span class="n">PIDSERVICE_PASSWD</span><span class="p">)</span>

<span class="n">handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">(</span><span class="n">password_mgr</span><span class="p">)</span>

<span class="c"># create "opener" (OpenerDirector instance)</span>
<span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>

<span class="c"># use the opener to fetch a URL</span>
<span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">PIDSERVICE_URL</span><span class="p">)</span>

<span class="c"># Install the opener.</span>
<span class="c"># Now all calls to urllib2.urlopen use the created opener.</span>
<span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>

<span class="n">REQUESTDATA</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">URL_TO_OPEN</span><span class="p">)</span>
<span class="k">try</span><span class="p">:</span>
    <span class="n">DATAURL</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">REQUESTDATA</span><span class="p">)</span>
<span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"404-Not found"</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">401</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"401-Authentication failed"</span>

<span class="k">if</span> <span class="n">DATAURL</span><span class="p">:</span>
    <span class="c"># Getting the code</span>
    <span class="k">print</span> <span class="s">"This gets the code: "</span><span class="p">,</span> <span class="n">DATAURL</span><span class="o">.</span><span class="n">code</span></code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-3">
	
		
<p>The request in php </p>

<pre><code class="language-php5"><span class="nv">$PIDSERVICE_URL</span><span class="o">=</span><span class="s2">"THE_SERVICE_URL_WITH_PREFIX"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_USER</span><span class="o">=</span><span class="s2">"YOURUSERNAME"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s2">"YOURPASSWORD"</span><span class="p">;</span>
<span class="nv">$PID</span><span class="o">=</span><span class="s2">"THE_PID"</span><span class="p">;</span> <span class="c1">//"05C3DB56-5692-11E3-AF8F-1C6F65A666B5";</span>
<span class="nv">$GETPIDURL</span> <span class="o">=</span><span class="nv">$PIDSERVICE_URL</span><span class="o">.</span><span class="nv">$PID</span><span class="p">;</span>


<span class="c1">// Get cURL resource</span>
<span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
<span class="c1">// Set some options - we are passing in a useragent too here</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span><span class="nx">CURLOPT_URL</span><span class="p">,</span><span class="nv">$GETPIDURL</span><span class="p">);</span>
<span class="c1">// Set the authentication options</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_USERPWD</span><span class="p">,</span> <span class="nv">$PIDSERVICE_USER</span><span class="o">.</span><span class="s2">":"</span><span class="o">.</span><span class="nv">$PIDSERVICE_PASSWD</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPAUTH</span><span class="p">,</span> <span class="nx">CURLAUTH_BASIC</span><span class="p">);</span>

<span class="c1">// Include header in result? (0 = yes, 1 = no)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="c1">// Should cURL return or print out the data? (true = return, false = print)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">// Download the given URL, and return output</span>
<span class="nv">$output</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
<span class="nv">$info</span> <span class="o">=</span> <span class="nb">curl_getinfo</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">200</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"PID DATA"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">401</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Authorization problem"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">404</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Not found"</span><span class="p">;</span>

<span class="c1">// Close the cURL resource, and free system resources</span>
<span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span></code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-4">
	
		
<p>The request in perl</p>

<pre><code class="language-perl"><span class="c1">#!/usr/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Getopt::</span><span class="n">Long</span><span class="p">;</span>
<span class="k">use</span> <span class="n">Switch</span> <span class="s">'Perl5'</span><span class="p">,</span> <span class="s">'Perl6'</span><span class="p">;</span>
<span class="k">use</span> <span class="n">JSON</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$fullargv0</span> <span class="o">=</span> <span class="nv">$0</span><span class="p">;</span>
<span class="k">my</span> <span class="p">(</span><span class="nv">$argv0</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$fullargv0</span> <span class="o">=~</span><span class="sr"> /([^\/\\]+)$/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">%settings</span> <span class="o">=</span> <span class="p">(</span>
<span class="s">'debug'</span> <span class="o">=&gt;</span> <span class="s">'False'</span><span class="p">,</span>
<span class="s">'handle'</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="s">'action'</span> <span class="o">=&gt;</span><span class="s">'get'</span><span class="p">,</span>
	<span class="s">'credentials'</span> 	<span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'username'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'password'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'baseuri'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'data'</span>	<span class="o">=&gt;</span><span class="p">{</span>
		<span class="s">'get'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
		<span class="s">'putpost'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'format'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'headerextra'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="s">'type'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'url'</span><span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'pid'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
<span class="p">},</span>
<span class="p">);</span>

<span class="c1"># Main subroutine</span>
<span class="k">sub </span><span class="nf">main</span> <span class="p">{</span>

	<span class="c1">#Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Get the script arguments</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">)</span> <span class="o">=</span> <span class="n">get_arguments</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span>

	<span class="k">if</span><span class="p">(</span> <span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> 
		<span class="n">performGet</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span> 

	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>
<span class="p">}</span>
 
<span class="c1"># Subroutine to perform a GET action</span>
<span class="k">sub </span><span class="nf">performGet</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1">#construct url and headers</span>
	<span class="k">my</span> <span class="nv">$url</span><span class="o">=</span><span class="s">"$settings_ref-&gt;{handle}-&gt;{credentials}-&gt;{baseuri}$settings_ref-&gt;{handle}-&gt;{url}-&gt;{pid}"</span><span class="p">;</span>
	<span class="nb">printf</span><span class="p">(</span><span class="s">"The constructed url is        : %s\n"</span><span class="p">,</span><span class="nv">$url</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="k">my</span> <span class="nv">@httpHeaders</span> <span class="o">=</span> <span class="p">(</span><span class="s">'Accept: application/json'</span> <span class="p">)</span> <span class="p">;</span>
	<span class="nb">push</span><span class="p">(</span><span class="nv">@httpHeaders</span><span class="p">,</span> <span class="s">"$settings_ref-&gt;{handle}-&gt;{headerextra}"</span> <span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="p">;</span>

	<span class="c1"># perform action</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_content_type</span> <span class="p">)</span> <span class="o">=</span> <span class="n">httpGet</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">,</span> <span class="nv">$url</span><span class="p">,</span> <span class="o">\</span><span class="nv">@httpHeaders</span><span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

			<span class="c1"># show only types we want to show. implicit is that we than only show type and parsed_data</span>
			<span class="k">unless</span> <span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /none/</span> <span class="p">)</span> <span class="p">{</span>

				<span class="k">if</span> <span class="p">(</span><span class="nb">ref</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">})</span> <span class="ow">eq</span> <span class="s">'ARRAY'</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">print</span> <span class="s">"We have an array of hashes \n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># grep so we have only the hashes with the selected fields</span>
					<span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span><span class="nv">$_</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /$settings_ref-&gt;{handle}-&gt;{type}/</span> <span class="p">}</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="p">;</span> 
					<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># delete items from retrieved handle which are not type and parsed_data</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$hash</span> <span class="p">(</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}})</span> <span class="p">{</span>
						<span class="k">foreach</span> <span class="k">my</span> <span class="nv">$key</span> <span class="p">(</span> <span class="nb">keys</span> <span class="nv">%$hash</span> <span class="p">)</span> <span class="p">{</span>			
							<span class="k">print</span> <span class="s">"key: $key, value: $hash-&gt;{$key}\n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
							<span class="k">unless</span> <span class="p">(</span> <span class="nv">$key</span> <span class="o">=~</span><span class="sr"> /^type|^parsed_data/</span> <span class="p">)</span> <span class="p">{</span>
								<span class="nb">delete</span> <span class="nv">$hash</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$key</span><span class="p">};</span>
							<span class="p">}</span>
						<span class="p">}</span>	
					<span class="p">}</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="k">print</span> <span class="s">"We have a hash of arrays of hashes \n"</span> <span class="k">if</span>  <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
					<span class="c1"># grep so we have only the hashes with the selected fields</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$array</span> <span class="p">(</span><span class="nb">values</span><span class="p">(</span><span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}))</span> <span class="p">{</span> 
						<span class="nv">@$array</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span><span class="nv">$_</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /$settings_ref-&gt;{handle}-&gt;{type}/</span> <span class="p">}</span> <span class="nv">@$array</span> <span class="p">;</span>
					<span class="p">}</span> 
					<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># delete items from retrieved handle which are not type and parsed_data</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$array</span> <span class="p">(</span><span class="nb">values</span><span class="p">(</span><span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}))</span> <span class="p">{</span> 
						<span class="k">for</span> <span class="k">my</span> <span class="nv">$hash</span> <span class="p">(</span> <span class="nv">@$array</span> <span class="p">)</span> <span class="p">{</span>
							<span class="k">foreach</span> <span class="k">my</span> <span class="nv">$key</span> <span class="p">(</span> <span class="nb">keys</span> <span class="nv">%$hash</span> <span class="p">)</span> <span class="p">{</span>			
								<span class="k">print</span> <span class="s">"key: $key, value: $hash-&gt;{$key}\n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
								<span class="k">unless</span> <span class="p">(</span> <span class="nv">$key</span> <span class="o">=~</span><span class="sr"> /^type|^parsed_data/</span> <span class="p">)</span> <span class="p">{</span>
									<span class="nb">delete</span> <span class="nv">$hash</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$key</span><span class="p">};</span>
								<span class="p">}</span>
							<span class="p">}</span>
						<span class="p">}</span>	
					<span class="p">}</span>
				<span class="p">}</span>
			<span class="p">}</span>

			<span class="c1"># print the data in json format, pretty if the parameter is set</span>
			<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
			<span class="k">my</span> <span class="nv">$json_printed</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /pretty/</span> <span class="p">)</span> <span class="p">{</span>
				<span class="nv">$json_printed</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">pretty</span><span class="o">-&gt;</span><span class="n">encode</span><span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">);</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nv">$json_printed</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">encode</span><span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">);</span>
			<span class="p">}</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$json_printed\n"</span><span class="p">);</span>

		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">);</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'An error happened\n'</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1"># reader helper calback function</span>
<span class="k">sub </span><span class="nf">read_callback</span> <span class="p">{</span>
	<span class="k">my</span> <span class="p">(</span><span class="nv">$maxlength</span><span class="p">,</span><span class="nv">$pointer</span><span class="p">)</span><span class="o">=</span><span class="nv">@_</span><span class="p">;</span>
	<span class="c1"># printf("The MAXLENGTH is     : \n", $maxlength);</span>
	<span class="c1"># printf("The POINTER is       : \n", $$pointer) ;</span>
	<span class="k">my</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$$pointer</span><span class="p">;</span>
	<span class="nv">$$pointer</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1"># Subroutine to retrieve data via a http GET</span>
<span class="k">sub </span><span class="nf">httpGet</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$httpHeaders_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="k">print</span><span class="p">(</span><span class="s">'Entering httpGet              :\n'</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

	<span class="c1"># local varables</span>
	<span class="k">my</span> <span class="nv">$response_body</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_code</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_content_type</span><span class="p">;</span>

	<span class="k">my</span> <span class="nv">$curl</span> <span class="o">=</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>

	<span class="c1"># set options for the curl http request</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="nv">$httpHeaders_ref</span> <span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_USERNAME</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">});</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_PASSWORD</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">});</span>

	<span class="c1"># A filehandle, reference to a scalar or reference to a typeglob can be used here.</span>
	<span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">'&gt;'</span><span class="p">,</span> <span class="o">\</span><span class="nv">$response_body</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">"$!"</span><span class="p">;</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_WRITEDATA</span><span class="p">,</span> <span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Do the actual curl http request</span>
	<span class="k">my</span> <span class="nv">$returncode</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">perform</span><span class="p">;</span>

	<span class="c1"># close file handle</span>
	<span class="nb">close</span><span class="p">(</span><span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="nv">$response_code</span>         <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_HTTP_CODE</span><span class="p">);</span>
		<span class="nv">$response_content_type</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_CONTENT_TYPE</span><span class="p">);</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response code        : $response_code\n"</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response content type: $response_content_type\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_body\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

			<span class="c1"># convert from json and put in correct place </span>
			<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
			<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$response_body</span><span class="p">);</span>

		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="c1"># Error code, type of error, error message</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"An error happened: $returncode "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">strerror</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">)</span><span class="o">.</span><span class="s">" "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">errbuf</span><span class="o">.</span><span class="s">"\n"</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">,</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="nv">$response_content_type</span> <span class="p">);</span>
<span class="p">}</span>

<span class="c1"># Subroutine to get and check all script arguments</span>
<span class="k">sub </span><span class="nf">get_arguments</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Define local variables</span>
	<span class="k">my</span> <span class="nv">%arguments</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$username</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$password</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$baseUri</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$pidUrl</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$credentials</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$handleData</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$type</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$returncode</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$message</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">@sources</span><span class="p">;</span>

	<span class="n">GetOptions</span><span class="p">(</span> <span class="s">'h|help'</span>    <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">},</span>
		<span class="s">'user=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$username</span><span class="p">,</span>
		<span class="s">'passwd=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$password</span><span class="p">,</span>
		<span class="s">'base=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$baseUri</span><span class="p">,</span>
		<span class="s">'pid=s'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$pidUrl</span><span class="p">,</span>
		<span class="s">'cred=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$credentials</span><span class="p">,</span>
		<span class="s">'data=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$handleData</span><span class="p">,</span>
		<span class="s">'type=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$type</span><span class="p">,</span>
		<span class="s">'header=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$header</span><span class="p">,</span>
		<span class="s">'get'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">},</span>
		<span class="s">'put'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">},</span>
		<span class="s">'delete'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">},</span>
		<span class="s">'post'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">},</span>
		<span class="s">'pretty'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">},</span>
		<span class="s">'d|debug'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">},</span>
	<span class="p">);</span>

	<span class="c1"># Check the help flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># Set the returncode</span>
		<span class="nv">$returncode</span><span class="o">=</span><span class="mi">255</span><span class="p">;</span>

		<span class="nv">$message</span> <span class="o">=</span> <span class="n">print_help</span><span class="p">();</span>
	<span class="p">}</span>
	
	<span class="c1"># Check the debug flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=</span> <span class="s">'True'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'debug is                      : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the pretty flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=</span> <span class="s">'pretty'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'pretty format printing is     : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the action flag's (get,put,delete,post,search,nagios)</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'get'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'put'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'delete'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'post'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the username</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$username</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$username</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the password</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$password</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$password</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the base uri</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$baseUri</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$baseUri</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the pid url</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$pidUrl</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$pidUrl</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The pid is                    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the handle data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$handleData</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$handleData</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The data is                   : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the type data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$type</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$type</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The type(s) to show is/are    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>
	
	<span class="c1"># check the header data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$header</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$header</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The extra header info is      : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the credentials data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$credentials</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># read the credentials from the file</span>
		<span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$credentials</span><span class="p">;</span>
		<span class="k">my</span> <span class="nv">$json_text</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span>
			<span class="nb">open</span><span class="p">(</span><span class="k">my</span> <span class="nv">$json_fh</span><span class="p">,</span> <span class="s">"&lt;:encoding(UTF-8)"</span><span class="p">,</span> <span class="nv">$filename</span><span class="p">)</span>  <span class="ow">or</span> <span class="nb">die</span><span class="p">(</span><span class="s">"Can't open $filename: $!\n"</span><span class="p">);</span>
			<span class="nb">local</span> <span class="vg">$/</span><span class="p">;</span>
			<span class="sr">&lt;$json_fh&gt;</span>
		<span class="p">};</span>

		<span class="c1"># convert from json and put in correct place </span>
		<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$json_text</span><span class="p">);</span>

		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="p">}</span>

	<span class="c1"># Print the message</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$message</span> <span class="p">)</span> <span class="p">{</span>

		<span class="k">print</span> <span class="s">"$message\n"</span><span class="p">;</span>
	<span class="p">};</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>

<span class="p">};</span></code></pre>


	 </div>
	
</div>
	
		
			<h3 id="the-response">The response:</h3>
<ul>
  <li>HTTP/1.1 200 OK: (Success)</li>
  <li>HTTP/1.1 401 Unauthorized: Your username or your password is wrong</li>
  <li>HTTP/1.1 404 NOT found: The url doesn‚Äôt exist</li>
</ul>

<p>After a successful request, the response consists of an array of the PID and an array of all the information that apply to it. The response provides the idx, the type, and all the data described in the data model. </p>

<pre><code>
Get all data:  [
{
"idx":1,
"type":"URL",
"parsed_data":"http://www.grnet.gr/",
"data":"aHR0cDovL3d3dy5ncm5ldC5nci8=",
"timestamp":"2013-11-26T11:58:14Z",
"ttl_type":0,
"ttl":86400,
"refs":[],
"privs":"rwr-"
},
{
"idx":2,
"type":"URL",
"parsed_data":"https://www.grnet.gr/en/node/64",
"data":"aHR0cHM6Ly93d3cuZ3JuZXQuZ3IvZW4vbm9kZS82NA==",
"timestamp":"2013-11-26T11:58:14Z",
"ttl_type":0,
"ttl":86400,
"refs":[],
"privs":"rwr-"
},
{
"idx":3,
"type":"INST",
"parsed_data":"CLARIN-EL",
"data":"Q0xBUklOLUVM",
"timestamp":"2013-11-26T11:58:14Z",
"ttl_type":0,
"ttl":86400,
"refs":[],
"privs":"rwr-"
},

{
"idx":100,
"type":"HS_ADMIN",
"parsed_data":{
"adminId":"0.NA/11239",
"adminIdIndex":300,
"perms":{
"add_handle":true,
"delete_handle":true,
"add_naming_auth":false,
"delete_naming_auth":false,
"modify_value":true,
"remove_value":true,
"add_value":true,
"read_value":true,
"modify_admin":true,
"remove_admin":true,
"add_admin":true,
"list_handles":false
}
},
"data":"B/MAAAAKMC5OQS8xMTIzOQAAASw=",
"timestamp":"2013-11-15T14:25:58Z",
"ttl_type":0,
"ttl":86400,
"refs":[],
"privs":"rwr-"
}
]
</code></pre>


		
	

 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/glossary/">Glossary</a></h3></li>
          <li><h3><a href="#">API</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/api/">Getting Started</a></h3></li>
                <li><h3><a href="/guides/api-auth/">Authenticate</a></h3></li>
                <li><h3><a href="/guides/api-generation/">PID Generation</a></h3></li>
                <li><h3><a href="/guides/api-get/">Get a PID</a></h3></li>
                <li><h3><a href="/guides/api-list/">List all PID</a></h3></li>
                <li><h3><a href="/guides/api-search/">Search</a></h3></li>
                <li><h3><a href="/guides/api-create/">Create a PID</a></h3></li>
                <li><h3><a href="/guides/api-update/">Update a PID</a></h3></li>
                <li><h3><a href="/guides/api-delete/">Delete a PID</a></h3></li>
                <li><h3><a href="/guides/api-partial/">Part Identifiers</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:contact@pidconsortium.eu" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:contact@argodoc.eu" class="site-link" target='_blank'>ARGO Consurtium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I"_
# API - GET a PID

This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.

## GET a PID - Description
Once you have the PID url, then you can retrieve the information at once for this PID, by just supplying its URL. 

| **Description** | GET a PID |
| **URL**         | The  API Service URL with the suffix |
| **HTTP Method** | GET                         |
| **Security**    | You must authenticate before actually getting PID information. |

The data you must send in order to get the PID are described in the following table 

Type | Description | Required | Default value | Example value |
------|-------------|----------|---------------|---------------|
url to authenticate | a url to authenticate. We use the service PID service URL | Yes | None |  https://epic.grnet.gr/api/v2/handles/ |
username | your username | Yes |None| |
password | your password | Yes |None| |

## Example

In this example we are going to retrieve the information of a PID with the following URL https://epic.grnet.gr/api/v2/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5


;T;
I"
<h1 id="api---get-a-pid">API - GET a PID</h1>

<p>This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.</p>

<h2 id="get-a-pid---description">GET a PID - Description</h2>
<p>Once you have the PID url, then you can retrieve the information at once for this PID, by just supplying its URL. </p>

<table>
  <tbody>
    <tr>
      <td><strong>Description</strong></td>
      <td>GET a PID</td>
    </tr>
    <tr>
      <td><strong>URL</strong></td>
      <td>The  API Service URL with the suffix</td>
    </tr>
    <tr>
      <td><strong>HTTP Method</strong></td>
      <td>GET</td>
    </tr>
    <tr>
      <td><strong>Security</strong></td>
      <td>You must authenticate before actually getting PID information.</td>
    </tr>
  </tbody>
</table>

<p>The data you must send in order to get the PID are described in the following table </p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Description</th>
      <th>Required</th>
      <th>Default value</th>
      <th>Example value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>url to authenticate</td>
      <td>a url to authenticate. We use the service PID service URL</td>
      <td>Yes</td>
      <td>None</td>
      <td>https://epic.grnet.gr/api/v2/handles/</td>
    </tr>
    <tr>
      <td>username</td>
      <td>your username</td>
      <td>Yes</td>
      <td>None</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td>password</td>
      <td>your password</td>
      <td>Yes</td>
      <td>None</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<h2 id="example">Example</h2>

<p>In this example we are going to retrieve the information of a PID with the following URL https://epic.grnet.gr/api/v2/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5</p>

;T;@0I"/guides/api-list/;T{;{	;I"¡<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>API | List PID</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h1 id="api---list-pid">API - List PID</h1>

<p>This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.</p>

<h2 id="list-pid---description">List PID - Description</h2>
<p>You can retrieve the list of pids at once, by just supplying the Service Url with the prefix. </p>

<table>
  <tbody>
    <tr>
      <td><strong>Description</strong></td>
      <td>GET a PID</td>
    </tr>
    <tr>
      <td><strong>URL</strong></td>
      <td>The  API Service URL</td>
    </tr>
    <tr>
      <td><strong>HTTP Method</strong></td>
      <td>GET</td>
    </tr>
    <tr>
      <td><strong>Security</strong></td>
      <td>You must authenticate before actually getting all PID.</td>
    </tr>
  </tbody>
</table>

<p>Because collections can get very lange, they are rendered page by page.
By default, you‚Äôll only see the first page with at maximum 1000 results.
To modify this behaviour, use the following query parameters:</p>

<table>
  <thead>
    <tr>
      <th>Parameter</th>
      <th>Value</th>
      <th>Description</th>
      <th>Example value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>limit</td>
      <td>int: the limit of results</td>
      <td>the maximum number of items to return. The default is 1000. As a special case, if you specify <code>limit=0</code>, <em>all</em> items will be returned, without limit.</td>
      <td>https://epic.grnet.gr/api/v2/handles/11239/?limit=10</td>
    </tr>
    <tr>
      <td>page</td>
      <td>int: the page of results</td>
      <td>When using limit parameter the returned data are displayed on multiple pages. the number of the page to return. I.e., if you specify <code>limit=100&amp;page=3</code>, items 201 through 300 will be returned</td>
      <td>https://epic.grnet.gr/api/v2/handles/11239/?limit=10&amp;page=2</td>
    </tr>
  </tbody>
</table>

<h2 id="example">Example</h2>

<p>In this example we are going to retrieve the information of all PID in the 11239 prefix URL https://epic.grnet.gr/api/v2/handles/11239/</p>




<ul class="nav nav-tabs">
	
	  
		  <li class="active"><a href="#tab-1" data-toggle="tab">Curl</a></li>
	  
	
	  
		  <li><a href="#tab-2" data-toggle="tab">Python</a></li>
	
	
	  
		  <li><a href="#tab-3" data-toggle="tab">PHP</a></li>
	
	
	  
		  <li><a href="#tab-4" data-toggle="tab">Perl</a></li>
	
	
</ul>
<div class="tab-content">
	
	 
	 <div class="tab-pane active" id="tab-1">
	  
		<p>The request in curl</p>

<pre><code>
curl -D- -u "YOURUSERNAME:YOURPASSWORD" -X GET -H "Content-Type: application/json" https://epic.grnet.gr/api/v2/handles/11239/
</code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-2">
	
		
<p>The request in python</p>

<pre><code class="language-python"><span class="kn">import</span> <span class="nn">urllib2</span>

<span class="n">PIDSERVICE_URL</span><span class="o">=</span><span class="s">"THE_SERVICE_URL_WITH_PREFIX"</span>
<span class="n">PIDSERVICE_USER</span><span class="o">=</span><span class="s">"YOURUSERNAME"</span>
<span class="n">PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s">"YOURPASSWORD"</span>
<span class="n">URL_TO_OPEN</span><span class="o">=</span><span class="s">"THE_SERVICE_URL_WITH_PREFIX"</span>
<span class="n">DATAURL</span><span class="o">=</span><span class="s">''</span><span class="p">;</span>

<span class="c"># create a password manager</span>
<span class="n">password_mgr</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPPasswordMgrWithDefaultRealm</span><span class="p">()</span>

<span class="c"># Add the username and password.</span>
<span class="n">password_mgr</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">PIDSERVICE_URL</span><span class="p">,</span> <span class="n">PIDSERVICE_USER</span><span class="p">,</span> <span class="n">PIDSERVICE_PASSWD</span><span class="p">)</span>

<span class="n">handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">(</span><span class="n">password_mgr</span><span class="p">)</span>

<span class="c"># create "opener" (OpenerDirector instance)</span>
<span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>

<span class="c"># use the opener to fetch a URL</span>
<span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">PIDSERVICE_URL</span><span class="p">)</span>

<span class="c"># Install the opener.</span>
<span class="c"># Now all calls to urllib2.urlopen use the created opener.</span>
<span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>

<span class="n">REQUESTDATA</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">URL_TO_OPEN</span><span class="p">)</span>
<span class="k">try</span><span class="p">:</span>
    <span class="n">DATAURL</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">REQUESTDATA</span><span class="p">)</span>
<span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"404-Not found"</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">401</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"401-Authentication failed"</span>

<span class="k">if</span> <span class="n">DATAURL</span><span class="p">:</span>
    <span class="c"># Getting the code</span>
    <span class="k">print</span> <span class="s">"This gets the code: "</span><span class="p">,</span> <span class="n">DATAURL</span><span class="o">.</span><span class="n">code</span></code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-3">
	
		
<p>The request in php </p>

<pre><code class="language-php5"><span class="nv">$PIDSERVICE_URL</span><span class="o">=</span><span class="s2">"THE_SERVICE_URL_WITH_PREFIX"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_USER</span><span class="o">=</span><span class="s2">"YOURUSERNAME"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s2">"YOURPASSWORD"</span><span class="p">;</span>
<span class="nv">$GETPIDURL</span> <span class="o">=</span><span class="s2">"THE_SERVICE_URL_WITH_PREFIX"</span><span class="p">;</span>

<span class="c1">// Get cURL resource</span>
<span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
<span class="c1">// Set some options - we are passing in a useragent too here</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span><span class="nx">CURLOPT_URL</span><span class="p">,</span><span class="nv">$GETPIDURL</span><span class="p">);</span>
<span class="c1">// Set the authentication options</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_USERPWD</span><span class="p">,</span> <span class="nv">$PIDSERVICE_USER</span><span class="o">.</span><span class="s2">":"</span><span class="o">.</span><span class="nv">$PIDSERVICE_PASSWD</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPAUTH</span><span class="p">,</span> <span class="nx">CURLAUTH_BASIC</span><span class="p">);</span>

<span class="c1">// Include header in result? (0 = yes, 1 = no)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="c1">// Should cURL return or print out the data? (true = return, false = print)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">// Download the given URL, and return output</span>
<span class="nv">$output</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>

<span class="nv">$info</span> <span class="o">=</span> <span class="nb">curl_getinfo</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">200</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"PID DATA"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">401</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Authorization problem"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">404</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Not found"</span><span class="p">;</span>

<span class="c1">// Close the cURL resource, and free system resources</span>
<span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span></code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-4">
	
		
<p>The request in perl</p>

<pre><code class="language-perl"><span class="c1">#!/usr/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Getopt::</span><span class="n">Long</span><span class="p">;</span>
<span class="k">use</span> <span class="n">Switch</span> <span class="s">'Perl5'</span><span class="p">,</span> <span class="s">'Perl6'</span><span class="p">;</span>
<span class="k">use</span> <span class="n">JSON</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$fullargv0</span> <span class="o">=</span> <span class="nv">$0</span><span class="p">;</span>
<span class="k">my</span> <span class="p">(</span><span class="nv">$argv0</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$fullargv0</span> <span class="o">=~</span><span class="sr"> /([^\/\\]+)$/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">%settings</span> <span class="o">=</span> <span class="p">(</span>
<span class="s">'debug'</span> <span class="o">=&gt;</span> <span class="s">'False'</span><span class="p">,</span>
<span class="s">'handle'</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="s">'action'</span> <span class="o">=&gt;</span><span class="s">'get'</span><span class="p">,</span>
	<span class="s">'credentials'</span> 	<span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'username'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'password'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'baseuri'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'data'</span>	<span class="o">=&gt;</span><span class="p">{</span>
		<span class="s">'get'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
		<span class="s">'putpost'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'format'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'headerextra'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="s">'type'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'url'</span><span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'pid'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
<span class="p">},</span>
<span class="p">);</span>

<span class="c1"># Main subroutine</span>
<span class="k">sub </span><span class="nf">main</span> <span class="p">{</span>

	<span class="c1">#Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Get the script arguments</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">)</span> <span class="o">=</span> <span class="n">get_arguments</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span>

	<span class="k">if</span><span class="p">(</span> <span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> 
		<span class="n">performGet</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span> 

	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>
<span class="p">}</span>
 
<span class="c1"># Subroutine to perform a GET action</span>
<span class="k">sub </span><span class="nf">performGet</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1">#construct url and headers</span>
	<span class="k">my</span> <span class="nv">$url</span><span class="o">=</span><span class="s">"$settings_ref-&gt;{handle}-&gt;{credentials}-&gt;{baseuri}"</span><span class="p">;</span>
	<span class="nb">printf</span><span class="p">(</span><span class="s">"The constructed url is        : %s\n"</span><span class="p">,</span><span class="nv">$url</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="k">my</span> <span class="nv">@httpHeaders</span> <span class="o">=</span> <span class="p">(</span><span class="s">'Accept: application/json'</span> <span class="p">)</span> <span class="p">;</span>
	<span class="nb">push</span><span class="p">(</span><span class="nv">@httpHeaders</span><span class="p">,</span> <span class="s">"$settings_ref-&gt;{handle}-&gt;{headerextra}"</span> <span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="p">;</span>

	<span class="c1"># perform action</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_content_type</span> <span class="p">)</span> <span class="o">=</span> <span class="n">httpGet</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">,</span> <span class="nv">$url</span><span class="p">,</span> <span class="o">\</span><span class="nv">@httpHeaders</span><span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

			<span class="c1"># show only types we want to show. implicit is that we than only show type and parsed_data</span>
			<span class="k">unless</span> <span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /none/</span> <span class="p">)</span> <span class="p">{</span>

				<span class="k">if</span> <span class="p">(</span><span class="nb">ref</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">})</span> <span class="ow">eq</span> <span class="s">'ARRAY'</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">print</span> <span class="s">"We have an array of hashes \n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># grep so we have only the hashes with the selected fields</span>
					<span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span><span class="nv">$_</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /$settings_ref-&gt;{handle}-&gt;{type}/</span> <span class="p">}</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="p">;</span> 
					<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># delete items from retrieved handle which are not type and parsed_data</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$hash</span> <span class="p">(</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}})</span> <span class="p">{</span>
						<span class="k">foreach</span> <span class="k">my</span> <span class="nv">$key</span> <span class="p">(</span> <span class="nb">keys</span> <span class="nv">%$hash</span> <span class="p">)</span> <span class="p">{</span>			
							<span class="k">print</span> <span class="s">"key: $key, value: $hash-&gt;{$key}\n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
							<span class="k">unless</span> <span class="p">(</span> <span class="nv">$key</span> <span class="o">=~</span><span class="sr"> /^type|^parsed_data/</span> <span class="p">)</span> <span class="p">{</span>
								<span class="nb">delete</span> <span class="nv">$hash</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$key</span><span class="p">};</span>
							<span class="p">}</span>
						<span class="p">}</span>	
					<span class="p">}</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="k">print</span> <span class="s">"We have a hash of arrays of hashes \n"</span> <span class="k">if</span>  <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
					<span class="c1"># grep so we have only the hashes with the selected fields</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$array</span> <span class="p">(</span><span class="nb">values</span><span class="p">(</span><span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}))</span> <span class="p">{</span> 
						<span class="nv">@$array</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span><span class="nv">$_</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /$settings_ref-&gt;{handle}-&gt;{type}/</span> <span class="p">}</span> <span class="nv">@$array</span> <span class="p">;</span>
					<span class="p">}</span> 
					<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># delete items from retrieved handle which are not type and parsed_data</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$array</span> <span class="p">(</span><span class="nb">values</span><span class="p">(</span><span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}))</span> <span class="p">{</span> 
						<span class="k">for</span> <span class="k">my</span> <span class="nv">$hash</span> <span class="p">(</span> <span class="nv">@$array</span> <span class="p">)</span> <span class="p">{</span>
							<span class="k">foreach</span> <span class="k">my</span> <span class="nv">$key</span> <span class="p">(</span> <span class="nb">keys</span> <span class="nv">%$hash</span> <span class="p">)</span> <span class="p">{</span>			
								<span class="k">print</span> <span class="s">"key: $key, value: $hash-&gt;{$key}\n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
								<span class="k">unless</span> <span class="p">(</span> <span class="nv">$key</span> <span class="o">=~</span><span class="sr"> /^type|^parsed_data/</span> <span class="p">)</span> <span class="p">{</span>
									<span class="nb">delete</span> <span class="nv">$hash</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$key</span><span class="p">};</span>
								<span class="p">}</span>
							<span class="p">}</span>
						<span class="p">}</span>	
					<span class="p">}</span>
				<span class="p">}</span>
			<span class="p">}</span>

			<span class="c1"># print the data in json format, pretty if the parameter is set</span>
			<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
			<span class="k">my</span> <span class="nv">$json_printed</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /pretty/</span> <span class="p">)</span> <span class="p">{</span>
				<span class="nv">$json_printed</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">pretty</span><span class="o">-&gt;</span><span class="n">encode</span><span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">);</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nv">$json_printed</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">encode</span><span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">);</span>
			<span class="p">}</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$json_printed\n"</span><span class="p">);</span>

		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">);</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'An error happened\n'</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1"># Subroutine to retrieve data via a http GET</span>
<span class="k">sub </span><span class="nf">httpGet</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$httpHeaders_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="k">print</span><span class="p">(</span><span class="s">'Entering httpGet              :\n'</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

	<span class="c1"># local varables</span>
	<span class="k">my</span> <span class="nv">$response_body</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_code</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_content_type</span><span class="p">;</span>

	<span class="k">my</span> <span class="nv">$curl</span> <span class="o">=</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>

	<span class="c1"># set options for the curl http request</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="nv">$httpHeaders_ref</span> <span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_USERNAME</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">});</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_PASSWORD</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">});</span>

	<span class="c1"># A filehandle, reference to a scalar or reference to a typeglob can be used here.</span>
	<span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">'&gt;'</span><span class="p">,</span> <span class="o">\</span><span class="nv">$response_body</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">"$!"</span><span class="p">;</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_WRITEDATA</span><span class="p">,</span> <span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Do the actual curl http request</span>
	<span class="k">my</span> <span class="nv">$returncode</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">perform</span><span class="p">;</span>

	<span class="c1"># close file handle</span>
	<span class="nb">close</span><span class="p">(</span><span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="nv">$response_code</span>         <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_HTTP_CODE</span><span class="p">);</span>
		<span class="nv">$response_content_type</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_CONTENT_TYPE</span><span class="p">);</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response code        : $response_code\n"</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response content type: $response_content_type\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_body\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

			<span class="c1"># convert from json and put in correct place </span>
			<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
			<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$response_body</span><span class="p">);</span>

		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="c1"># Error code, type of error, error message</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"An error happened: $returncode "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">strerror</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">)</span><span class="o">.</span><span class="s">" "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">errbuf</span><span class="o">.</span><span class="s">"\n"</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">,</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="nv">$response_content_type</span> <span class="p">);</span>
<span class="p">}</span>

<span class="c1"># Subroutine to get and check all script arguments</span>
<span class="k">sub </span><span class="nf">get_arguments</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Define local variables</span>
	<span class="k">my</span> <span class="nv">%arguments</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$username</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$password</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$baseUri</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$pidUrl</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$credentials</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$handleData</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$type</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$returncode</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$message</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">@sources</span><span class="p">;</span>

	<span class="n">GetOptions</span><span class="p">(</span> <span class="s">'h|help'</span>    <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">},</span>
		<span class="s">'user=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$username</span><span class="p">,</span>
		<span class="s">'passwd=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$password</span><span class="p">,</span>
		<span class="s">'base=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$baseUri</span><span class="p">,</span>
		<span class="s">'pid=s'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$pidUrl</span><span class="p">,</span>
		<span class="s">'cred=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$credentials</span><span class="p">,</span>
		<span class="s">'data=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$handleData</span><span class="p">,</span>
		<span class="s">'type=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$type</span><span class="p">,</span>
		<span class="s">'header=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$header</span><span class="p">,</span>
		<span class="s">'get'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">},</span>
		<span class="s">'put'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">},</span>
		<span class="s">'delete'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">},</span>
		<span class="s">'post'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">},</span>
		<span class="s">'pretty'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">},</span>
		<span class="s">'d|debug'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">},</span>
	<span class="p">);</span>

	<span class="c1"># Check the help flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># Set the returncode</span>
		<span class="nv">$returncode</span><span class="o">=</span><span class="mi">255</span><span class="p">;</span>

		<span class="nv">$message</span> <span class="o">=</span> <span class="n">print_help</span><span class="p">();</span>
	<span class="p">}</span>
	
	<span class="c1"># Check the debug flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=</span> <span class="s">'True'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'debug is                      : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the pretty flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=</span> <span class="s">'pretty'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'pretty format printing is     : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the action flag's (get,put,delete,post,search,nagios)</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'get'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'put'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'delete'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'post'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the username</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$username</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$username</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the password</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$password</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$password</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the base uri</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$baseUri</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$baseUri</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the pid url</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$pidUrl</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$pidUrl</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The pid is                    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the handle data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$handleData</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$handleData</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The data is                   : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the type data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$type</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$type</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The type(s) to show is/are    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>
	
	<span class="c1"># check the header data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$header</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$header</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The extra header info is      : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the credentials data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$credentials</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># read the credentials from the file</span>
		<span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$credentials</span><span class="p">;</span>
		<span class="k">my</span> <span class="nv">$json_text</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span>
			<span class="nb">open</span><span class="p">(</span><span class="k">my</span> <span class="nv">$json_fh</span><span class="p">,</span> <span class="s">"&lt;:encoding(UTF-8)"</span><span class="p">,</span> <span class="nv">$filename</span><span class="p">)</span>  <span class="ow">or</span> <span class="nb">die</span><span class="p">(</span><span class="s">"Can't open $filename: $!\n"</span><span class="p">);</span>
			<span class="nb">local</span> <span class="vg">$/</span><span class="p">;</span>
			<span class="sr">&lt;$json_fh&gt;</span>
		<span class="p">};</span>

		<span class="c1"># convert from json and put in correct place </span>
		<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$json_text</span><span class="p">);</span>

		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="p">}</span>

	<span class="c1"># Print the message</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$message</span> <span class="p">)</span> <span class="p">{</span>

		<span class="k">print</span> <span class="s">"$message\n"</span><span class="p">;</span>
	<span class="p">};</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>

<span class="p">};</span></code></pre>


	 </div>
	
</div>
	
		
			<h3 id="the-response">The response:</h3>
<ul>
  <li>HTTP/1.1 200 OK: (Success)</li>
  <li>HTTP/1.1 401 Unauthorized: Your username or your password is wrong</li>
  <li>HTTP/1.1 404 NOT found: The url doesn‚Äôt exist</li>
</ul>

<p>After a successful request, the response consists of a list of PIDs </p>

<pre><code>
GRNET
66742AB2-5685-11E3-A413-1C6F65A666B5
305F66A9-3994-42D6-A9F6-8E629126DE14
B4CF7AEA-55BB-4DB5-9D85-EB2DAD821B07
0CEEA495-71FA-460B-97A4-81E7E597B636
</code></pre>


		
	

 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/glossary/">Glossary</a></h3></li>
          <li><h3><a href="#">API</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/api/">Getting Started</a></h3></li>
                <li><h3><a href="/guides/api-auth/">Authenticate</a></h3></li>
                <li><h3><a href="/guides/api-generation/">PID Generation</a></h3></li>
                <li><h3><a href="/guides/api-get/">Get a PID</a></h3></li>
                <li><h3><a href="/guides/api-list/">List all PID</a></h3></li>
                <li><h3><a href="/guides/api-search/">Search</a></h3></li>
                <li><h3><a href="/guides/api-create/">Create a PID</a></h3></li>
                <li><h3><a href="/guides/api-update/">Update a PID</a></h3></li>
                <li><h3><a href="/guides/api-delete/">Delete a PID</a></h3></li>
                <li><h3><a href="/guides/api-partial/">Part Identifiers</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:contact@pidconsortium.eu" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:contact@argodoc.eu" class="site-link" target='_blank'>ARGO Consurtium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I"‡
# API - List PID

This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.

## List PID - Description
You can retrieve the list of pids at once, by just supplying the Service Url with the prefix. 

| **Description** | GET a PID |
| **URL**         | The  API Service URL  |
| **HTTP Method** | GET                         |
| **Security**    | You must authenticate before actually getting all PID. |

Because collections can get very lange, they are rendered page by page.
By default, you'll only see the first page with at maximum 1000 results.
To modify this behaviour, use the following query parameters:

Parameter |Value| Description | Example value |
------|--------|-------------|----------|---------------|---------------|
limit | int: the limit of results | the maximum number of items to return. The default is 1000. As a special case, if you specify <code>limit=0</code>, <em>all</em> items will be returned, without limit.  |	https://epic.grnet.gr/api/v2/handles/11239/?limit=10
page | int: the page of results  | When using limit parameter the returned data are displayed on multiple pages. the number of the page to return. I.e., if you specify <code>limit=100&amp;page=3</code>, items 201 through 300 will be returned |https://epic.grnet.gr/api/v2/handles/11239/?limit=10&page=2


## Example

In this example we are going to retrieve the information of all PID in the 11239 prefix URL https://epic.grnet.gr/api/v2/handles/11239/


;T;
I"˝
<h1 id="api---list-pid">API - List PID</h1>

<p>This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.</p>

<h2 id="list-pid---description">List PID - Description</h2>
<p>You can retrieve the list of pids at once, by just supplying the Service Url with the prefix. </p>

<table>
  <tbody>
    <tr>
      <td><strong>Description</strong></td>
      <td>GET a PID</td>
    </tr>
    <tr>
      <td><strong>URL</strong></td>
      <td>The  API Service URL</td>
    </tr>
    <tr>
      <td><strong>HTTP Method</strong></td>
      <td>GET</td>
    </tr>
    <tr>
      <td><strong>Security</strong></td>
      <td>You must authenticate before actually getting all PID.</td>
    </tr>
  </tbody>
</table>

<p>Because collections can get very lange, they are rendered page by page.
By default, you‚Äôll only see the first page with at maximum 1000 results.
To modify this behaviour, use the following query parameters:</p>

<table>
  <thead>
    <tr>
      <th>Parameter</th>
      <th>Value</th>
      <th>Description</th>
      <th>Example value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>limit</td>
      <td>int: the limit of results</td>
      <td>the maximum number of items to return. The default is 1000. As a special case, if you specify <code>limit=0</code>, <em>all</em> items will be returned, without limit.</td>
      <td>https://epic.grnet.gr/api/v2/handles/11239/?limit=10</td>
    </tr>
    <tr>
      <td>page</td>
      <td>int: the page of results</td>
      <td>When using limit parameter the returned data are displayed on multiple pages. the number of the page to return. I.e., if you specify <code>limit=100&amp;page=3</code>, items 201 through 300 will be returned</td>
      <td>https://epic.grnet.gr/api/v2/handles/11239/?limit=10&amp;page=2</td>
    </tr>
  </tbody>
</table>

<h2 id="example">Example</h2>

<p>In this example we are going to retrieve the information of all PID in the 11239 prefix URL https://epic.grnet.gr/api/v2/handles/11239/</p>

;T;@6I"/guides/api-search/;T{;{	;I"ª <!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>API | Search a PID</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h1 id="api---search-a-pid">API - Search a PID</h1>

<p>This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.</p>

<h2 id="search-a-pid---description">Search a PID - Description</h2>
<p>You can search for a PID by using a term. </p>

<table>
  <tbody>
    <tr>
      <td><strong>Description</strong></td>
      <td>Search a PID</td>
    </tr>
    <tr>
      <td><strong>URL</strong></td>
      <td>The  EPIC API Url+?PARAMETER=*term*</td>
    </tr>
    <tr>
      <td><strong>HTTP Method</strong></td>
      <td>GET</td>
    </tr>
    <tr>
      <td><strong>Security</strong></td>
      <td>You must authenticate before actually getting this information.</td>
    </tr>
  </tbody>
</table>

<p>The parameters you may use for a search request are described in the following table:</p>

<table>
  <thead>
    <tr>
      <th>Parameter</th>
      <th>Value</th>
      <th>Description</th>
      <th>Example value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>INST</td>
      <td>string: name of the INST</td>
      <td>Search and get the list of PIDs registered by an institute</td>
      <td>https://epic.grnet.gr/api/v2/handles/11239/?INST=GRNET</td>
    </tr>
    <tr>
      <td>URL</td>
      <td>string: the url you are searching for</td>
      <td>Search and get the PID of an object with the selected url</td>
      <td>https://epic.grnet.gr/api/v2/handles/11239/?URL=http://www.grnet.gr</td>
    </tr>
    <tr>
      <td>limit</td>
      <td>int: the limit of results</td>
      <td>Limit your results</td>
      <td>https://epic.grnet.gr/api/v2/handles/11239/?URL=http://www.grnet.gr&amp;limit=10</td>
    </tr>
  </tbody>
</table>

<h4 id="you-may-also">You may also:</h4>
<ul>
  <li>combine the parameters to get the list of PIDs. (e.g. https://epic.grnet.gr/api/v2/handles/11239/?URL=http://www.grnet.gr&amp;INST=GRNET).</li>
  <li>use part of the term in the search parameter (e.g. search for PIDS that contain ‚Äúgrnet‚Äù in the URL https://epic.grnet.gr/api/v2/handles/11239/?URL=*grnet*).</li>
</ul>

<h2 id="example">Example</h2>

<p>In this example we are going to use the term  to retrieve the list of PIDs with the following URL https://epic.grnet.gr/api/v2/handles/11239/?URL=*GRNET*</p>




<ul class="nav nav-tabs">
	
	  
		  <li class="active"><a href="#tab-1" data-toggle="tab">Curl</a></li>
	  
	
	  
		  <li><a href="#tab-2" data-toggle="tab">Python</a></li>
	
	
	  
		  <li><a href="#tab-3" data-toggle="tab">PHP</a></li>
	
	
	  
		  <li><a href="#tab-4" data-toggle="tab">Perl</a></li>
	
	
</ul>
<div class="tab-content">
	
	 
	 <div class="tab-pane active" id="tab-1">
	  
		<p>The request in curl</p>

<pre><code>
curl -D- -u "YOURUSERNAME:YOURPASSWORD" -X GET -H "Content-Type: application/json" https://epic.grnet.gr/api/v2/handles/11239/?URL=*grnet*
</code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-2">
	
		
<p>The request in python</p>

<pre><code class="language-python"><span class="kn">import</span> <span class="nn">urllib2</span>

<span class="n">PIDSERVICE_URL</span><span class="o">=</span><span class="s">"THE_SERVICE_URL_WITH_PREFIX"</span>
<span class="n">PIDSERVICE_USER</span><span class="o">=</span><span class="s">"YOURUSERNAME"</span>
<span class="n">PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s">"YOURPASSWORD"</span>
<span class="n">URL_TO_OPEN</span><span class="o">=</span><span class="n">PIDSERVICE_URL</span><span class="o">+</span><span class="s">"?URL=*grnet*"</span>
<span class="n">DATAURL</span><span class="o">=</span><span class="s">""</span>

<span class="c"># create a password manager</span>
<span class="n">password_mgr</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPPasswordMgrWithDefaultRealm</span><span class="p">()</span>

<span class="c"># Add the username and password.</span>
<span class="n">password_mgr</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">PIDSERVICE_URL</span><span class="p">,</span> <span class="n">PIDSERVICE_USER</span><span class="p">,</span> <span class="n">PIDSERVICE_PASSWD</span><span class="p">)</span>

<span class="n">handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPBasicAuthHandler</span><span class="p">(</span><span class="n">password_mgr</span><span class="p">)</span>

<span class="c"># create "opener" (OpenerDirector instance)</span>
<span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>

<span class="c"># use the opener to fetch a URL</span>
<span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">PIDSERVICE_URL</span><span class="p">)</span>

<span class="c"># Install the opener.</span>
<span class="c"># Now all calls to urllib2.urlopen use the created opener.</span>
<span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>

<span class="n">REQUESTDATA</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">URL_TO_OPEN</span><span class="p">)</span>    
<span class="k">try</span><span class="p">:</span>
    <span class="n">DATAURL</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">REQUESTDATA</span><span class="p">)</span>
<span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"404-Not found"</span>
    <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">401</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"401-Authentication failed"</span>    

<span class="k">if</span> <span class="n">DATAURL</span><span class="p">:</span>
    <span class="c"># Getting the code</span>
    <span class="k">print</span> <span class="s">"This gets the code: "</span><span class="p">,</span> <span class="n">DATAURL</span><span class="o">.</span><span class="n">code</span></code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-3">
	
		
<p>The request in php </p>

<pre><code class="language-php5"><span class="nv">$PIDSERVICE_URL</span><span class="o">=</span><span class="s2">"THE_SERVICE_URL_WITH_PREFIX"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_USER</span><span class="o">=</span><span class="s2">"YOURUSERNAME"</span><span class="p">;</span>
<span class="nv">$PIDSERVICE_PASSWD</span><span class="o">=</span><span class="s2">"YOURPASSWORD"</span><span class="p">;</span>
<span class="nv">$SEARCHTERM</span> <span class="o">=</span> <span class="s2">"grnet"</span><span class="p">;</span>
<span class="nv">$GETPIDURL</span> <span class="o">=</span><span class="nv">$PIDSERVICE_URL</span><span class="o">.</span><span class="s2">"?URL=*"</span><span class="o">.</span><span class="nv">$SEARCHTERM</span><span class="o">.</span><span class="s2">"*"</span><span class="p">;</span>

<span class="c1">// Get cURL resource</span>
<span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
<span class="c1">// Set some options - we are passing in a useragent too here</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span><span class="nx">CURLOPT_URL</span><span class="p">,</span><span class="nv">$GETPIDURL</span><span class="p">);</span>
<span class="c1">// Set the authentication options</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_USERPWD</span><span class="p">,</span> <span class="nv">$PIDSERVICE_USER</span><span class="o">.</span><span class="s2">":"</span><span class="o">.</span><span class="nv">$PIDSERVICE_PASSWD</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HTTPAUTH</span><span class="p">,</span> <span class="nx">CURLAUTH_BASIC</span><span class="p">);</span>

<span class="c1">// Include header in result? (0 = yes, 1 = no)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="c1">// Should cURL return or print out the data? (true = return, false = print)</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">// Download the given URL, and return output</span>
<span class="nv">$output</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>

<span class="nv">$info</span> <span class="o">=</span> <span class="nb">curl_getinfo</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">200</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"PID DATA"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">401</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Authorization problem"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">'http_code'</span><span class="p">]</span><span class="o">==</span><span class="mi">404</span><span class="p">)</span> <span class="k">echo</span> <span class="s2">"Not found"</span><span class="p">;</span>

<span class="c1">// Close the cURL resource, and free system resources</span>
<span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span></code></pre>


	 </div>
	
	 
	 <div class="tab-pane" id="tab-4">
	
		
<p>The request in perl</p>

<pre><code class="language-perl"><span class="c1">#!/usr/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Getopt::</span><span class="n">Long</span><span class="p">;</span>
<span class="k">use</span> <span class="n">Switch</span> <span class="s">'Perl5'</span><span class="p">,</span> <span class="s">'Perl6'</span><span class="p">;</span>
<span class="k">use</span> <span class="n">JSON</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$fullargv0</span> <span class="o">=</span> <span class="nv">$0</span><span class="p">;</span>
<span class="k">my</span> <span class="p">(</span><span class="nv">$argv0</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$fullargv0</span> <span class="o">=~</span><span class="sr"> /([^\/\\]+)$/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">%settings</span> <span class="o">=</span> <span class="p">(</span>
<span class="s">'debug'</span> <span class="o">=&gt;</span> <span class="s">'False'</span><span class="p">,</span>
<span class="s">'handle'</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="s">'action'</span> <span class="o">=&gt;</span><span class="s">'get'</span><span class="p">,</span>
	<span class="s">'credentials'</span> 	<span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'username'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'password'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
		<span class="s">'baseuri'</span>	<span class="o">=&gt;</span> <span class="s">'empty'</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'data'</span>	<span class="o">=&gt;</span><span class="p">{</span>
		<span class="s">'get'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
		<span class="s">'putpost'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="p">},</span>
	<span class="s">'format'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'headerextra'</span>	<span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
	<span class="s">'type'</span> <span class="o">=&gt;</span> <span class="s">'none'</span><span class="p">,</span>
	<span class="s">'url'</span><span class="o">=&gt;</span>	<span class="p">{</span>
		<span class="s">'pid'</span><span class="o">=&gt;</span> <span class="s">''</span><span class="p">,</span>
		<span class="s">'searchby'</span><span class="o">=&gt;</span> <span class="s">'url=*grnet*'</span><span class="p">,</span>
	<span class="p">},</span>
<span class="p">},</span>
<span class="p">);</span>

<span class="c1"># Main subroutine</span>
<span class="k">sub </span><span class="nf">main</span> <span class="p">{</span>

	<span class="c1">#Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Get the script arguments</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">)</span> <span class="o">=</span> <span class="n">get_arguments</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span>

	<span class="k">if</span><span class="p">(</span> <span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> 
		<span class="n">performGet</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">);</span> 

	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>
<span class="p">}</span>
 
<span class="c1"># Subroutine to perform a GET action</span>
<span class="k">sub </span><span class="nf">performGet</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1">#construct url and headers</span>
	<span class="k">my</span> <span class="nv">$url</span><span class="o">=</span><span class="s">"$settings_ref-&gt;{handle}-&gt;{credentials}-&gt;{baseuri}$settings_ref-&gt;{handle}-&gt;{credentials}-&gt;{url}-&gt;{searchby}"</span><span class="p">;</span>
	<span class="nb">printf</span><span class="p">(</span><span class="s">"The constructed url is        : %s\n"</span><span class="p">,</span><span class="nv">$url</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="k">my</span> <span class="nv">@httpHeaders</span> <span class="o">=</span> <span class="p">(</span><span class="s">'Accept: application/json'</span> <span class="p">)</span> <span class="p">;</span>
	<span class="nb">push</span><span class="p">(</span><span class="nv">@httpHeaders</span><span class="p">,</span> <span class="s">"$settings_ref-&gt;{handle}-&gt;{headerextra}"</span> <span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="p">;</span>

	<span class="c1"># perform action</span>
	<span class="p">(</span><span class="k">my</span> <span class="nv">$returncode</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="k">my</span> <span class="nv">$response_content_type</span> <span class="p">)</span> <span class="o">=</span> <span class="n">httpGet</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="p">,</span> <span class="nv">$url</span><span class="p">,</span> <span class="o">\</span><span class="nv">@httpHeaders</span><span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

			<span class="c1"># show only types we want to show. implicit is that we than only show type and parsed_data</span>
			<span class="k">unless</span> <span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /none/</span> <span class="p">)</span> <span class="p">{</span>

				<span class="k">if</span> <span class="p">(</span><span class="nb">ref</span><span class="p">(</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">})</span> <span class="ow">eq</span> <span class="s">'ARRAY'</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">print</span> <span class="s">"We have an array of hashes \n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># grep so we have only the hashes with the selected fields</span>
					<span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span><span class="nv">$_</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /$settings_ref-&gt;{handle}-&gt;{type}/</span> <span class="p">}</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="p">;</span> 
					<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># delete items from retrieved handle which are not type and parsed_data</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$hash</span> <span class="p">(</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}})</span> <span class="p">{</span>
						<span class="k">foreach</span> <span class="k">my</span> <span class="nv">$key</span> <span class="p">(</span> <span class="nb">keys</span> <span class="nv">%$hash</span> <span class="p">)</span> <span class="p">{</span>			
							<span class="k">print</span> <span class="s">"key: $key, value: $hash-&gt;{$key}\n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
							<span class="k">unless</span> <span class="p">(</span> <span class="nv">$key</span> <span class="o">=~</span><span class="sr"> /^type|^parsed_data/</span> <span class="p">)</span> <span class="p">{</span>
								<span class="nb">delete</span> <span class="nv">$hash</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$key</span><span class="p">};</span>
							<span class="p">}</span>
						<span class="p">}</span>	
					<span class="p">}</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="k">print</span> <span class="s">"We have a hash of arrays of hashes \n"</span> <span class="k">if</span>  <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
					<span class="c1"># grep so we have only the hashes with the selected fields</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$array</span> <span class="p">(</span><span class="nb">values</span><span class="p">(</span><span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}))</span> <span class="p">{</span> 
						<span class="nv">@$array</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span><span class="nv">$_</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /$settings_ref-&gt;{handle}-&gt;{type}/</span> <span class="p">}</span> <span class="nv">@$array</span> <span class="p">;</span>
					<span class="p">}</span> 
					<span class="k">print</span> <span class="n">Dumper</span> <span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

					<span class="c1"># delete items from retrieved handle which are not type and parsed_data</span>
					<span class="k">for</span> <span class="k">my</span> <span class="nv">$array</span> <span class="p">(</span><span class="nb">values</span><span class="p">(</span><span class="nv">%</span><span class="p">{</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}}))</span> <span class="p">{</span> 
						<span class="k">for</span> <span class="k">my</span> <span class="nv">$hash</span> <span class="p">(</span> <span class="nv">@$array</span> <span class="p">)</span> <span class="p">{</span>
							<span class="k">foreach</span> <span class="k">my</span> <span class="nv">$key</span> <span class="p">(</span> <span class="nb">keys</span> <span class="nv">%$hash</span> <span class="p">)</span> <span class="p">{</span>			
								<span class="k">print</span> <span class="s">"key: $key, value: $hash-&gt;{$key}\n"</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
								<span class="k">unless</span> <span class="p">(</span> <span class="nv">$key</span> <span class="o">=~</span><span class="sr"> /^type|^parsed_data/</span> <span class="p">)</span> <span class="p">{</span>
									<span class="nb">delete</span> <span class="nv">$hash</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$key</span><span class="p">};</span>
								<span class="p">}</span>
							<span class="p">}</span>
						<span class="p">}</span>	
					<span class="p">}</span>
				<span class="p">}</span>
			<span class="p">}</span>

			<span class="c1"># print the data in json format, pretty if the parameter is set</span>
			<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
			<span class="k">my</span> <span class="nv">$json_printed</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /pretty/</span> <span class="p">)</span> <span class="p">{</span>
				<span class="nv">$json_printed</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">pretty</span><span class="o">-&gt;</span><span class="n">encode</span><span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">);</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nv">$json_printed</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">encode</span><span class="p">(</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">);</span>
			<span class="p">}</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$json_printed\n"</span><span class="p">);</span>

		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">);</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'An error happened\n'</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1"># Subroutine to retrieve data via a http GET</span>
<span class="k">sub </span><span class="nf">httpGet</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$httpHeaders_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="k">print</span><span class="p">(</span><span class="s">'Entering httpGet              :\n'</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

	<span class="c1"># local varables</span>
	<span class="k">my</span> <span class="nv">$response_body</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_code</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$response_content_type</span><span class="p">;</span>

	<span class="k">my</span> <span class="nv">$curl</span> <span class="o">=</span> <span class="nn">WWW::Curl::</span><span class="n">Easy</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>

	<span class="c1"># set options for the curl http request</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="nv">$httpHeaders_ref</span> <span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_USERNAME</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">});</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_PASSWORD</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">});</span>

	<span class="c1"># A filehandle, reference to a scalar or reference to a typeglob can be used here.</span>
	<span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">'&gt;'</span><span class="p">,</span> <span class="o">\</span><span class="nv">$response_body</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">"$!"</span><span class="p">;</span>
	<span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">setopt</span><span class="p">(</span><span class="n">CURLOPT_WRITEDATA</span><span class="p">,</span> <span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Do the actual curl http request</span>
	<span class="k">my</span> <span class="nv">$returncode</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">perform</span><span class="p">;</span>

	<span class="c1"># close file handle</span>
	<span class="nb">close</span><span class="p">(</span><span class="nv">$fh</span><span class="p">);</span>

	<span class="c1"># Looking at the results of the curl request</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span><span class="p">(</span><span class="s">'Transfer went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

		<span class="nv">$response_code</span>         <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_HTTP_CODE</span><span class="p">);</span>
		<span class="nv">$response_content_type</span> <span class="o">=</span> <span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">getinfo</span><span class="p">(</span><span class="n">CURLINFO_CONTENT_TYPE</span><span class="p">);</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response code        : $response_code\n"</span><span class="p">)</span>         <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"Received response content type: $response_content_type\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

		<span class="c1"># judge result and next action based on $response_code</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$response_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nv">$response_code</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_body\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>

			<span class="c1"># convert from json and put in correct place </span>
			<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
			<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$response_body</span><span class="p">);</span>

		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span><span class="p">(</span><span class="s">'The request went NOT ok\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"$response_code\n"</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span><span class="p">;</span>
		<span class="p">}</span> 

	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="c1"># Error code, type of error, error message</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"An error happened: $returncode "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">strerror</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">)</span><span class="o">.</span><span class="s">" "</span><span class="o">.</span><span class="nv">$curl</span><span class="o">-&gt;</span><span class="n">errbuf</span><span class="o">.</span><span class="s">"\n"</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">,</span> <span class="nv">$response_code</span><span class="p">,</span> <span class="nv">$response_content_type</span> <span class="p">);</span>
<span class="p">}</span>

<span class="c1"># Subroutine to get and check all script arguments</span>
<span class="k">sub </span><span class="nf">get_arguments</span> <span class="p">{</span>

	<span class="c1"># Get the subroutine arguments</span>
	<span class="k">my</span> <span class="nv">$settings_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

	<span class="c1"># Define local variables</span>
	<span class="k">my</span> <span class="nv">%arguments</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$username</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$password</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$baseUri</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$pidUrl</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$credentials</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$handleData</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$type</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$header</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$returncode</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">$message</span><span class="p">;</span>
	<span class="k">my</span> <span class="nv">@sources</span><span class="p">;</span>

	<span class="n">GetOptions</span><span class="p">(</span> <span class="s">'h|help'</span>    <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">},</span>
		<span class="s">'user=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$username</span><span class="p">,</span>
		<span class="s">'passwd=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$password</span><span class="p">,</span>
		<span class="s">'base=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$baseUri</span><span class="p">,</span>
		<span class="s">'pid=s'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$pidUrl</span><span class="p">,</span>
		<span class="s">'cred=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$credentials</span><span class="p">,</span>
		<span class="s">'data=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$handleData</span><span class="p">,</span>
		<span class="s">'type=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$type</span><span class="p">,</span>
		<span class="s">'header=s'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$header</span><span class="p">,</span>
		<span class="s">'get'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">},</span>
		<span class="s">'put'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">},</span>
		<span class="s">'delete'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">},</span>
		<span class="s">'post'</span>			<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">},</span>
		<span class="s">'pretty'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">},</span>
		<span class="s">'d|debug'</span>		<span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">},</span>
	<span class="p">);</span>

	<span class="c1"># Check the help flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">help</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># Set the returncode</span>
		<span class="nv">$returncode</span><span class="o">=</span><span class="mi">255</span><span class="p">;</span>

		<span class="nv">$message</span> <span class="o">=</span> <span class="n">print_help</span><span class="p">();</span>
	<span class="p">}</span>
	
	<span class="c1"># Check the debug flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=</span> <span class="s">'True'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'debug is                      : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the pretty flag</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">pretty</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="nb">format</span><span class="p">}</span> <span class="o">=</span> <span class="s">'pretty'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">'pretty format printing is     : on\n'</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># Check the action flag's (get,put,delete,post,search,nagios)</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">get</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'get'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">put</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'put'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="nb">delete</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'delete'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$arguments</span><span class="p">{</span><span class="n">post</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">}</span> <span class="o">=</span> <span class="s">'post'</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The action is                 : %s\n"</span><span class="p">,</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">action</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the username</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$username</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$username</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the password</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$password</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$password</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the base uri</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$baseUri</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$baseUri</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>

	<span class="c1"># check the pid url</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$pidUrl</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$pidUrl</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The pid is                    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">url</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pid</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the handle data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$handleData</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$handleData</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The data is                   : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">putpost</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the type data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$type</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$type</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The type(s) to show is/are    : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">type</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>

	<span class="p">}</span>
	
	<span class="c1"># check the header data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$header</span> <span class="p">)</span> <span class="p">{</span>

		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$header</span><span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The extra header info is      : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">headerextra</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	
	<span class="p">}</span>

	<span class="c1"># check the credentials data</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$credentials</span> <span class="p">)</span> <span class="p">{</span>

		<span class="c1"># read the credentials from the file</span>
		<span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$credentials</span><span class="p">;</span>
		<span class="k">my</span> <span class="nv">$json_text</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span>
			<span class="nb">open</span><span class="p">(</span><span class="k">my</span> <span class="nv">$json_fh</span><span class="p">,</span> <span class="s">"&lt;:encoding(UTF-8)"</span><span class="p">,</span> <span class="nv">$filename</span><span class="p">)</span>  <span class="ow">or</span> <span class="nb">die</span><span class="p">(</span><span class="s">"Can't open $filename: $!\n"</span><span class="p">);</span>
			<span class="nb">local</span> <span class="vg">$/</span><span class="p">;</span>
			<span class="sr">&lt;$json_fh&gt;</span>
		<span class="p">};</span>

		<span class="c1"># convert from json and put in correct place </span>
		<span class="k">my</span> <span class="nv">$json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
		<span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$json</span><span class="o">-&gt;</span><span class="n">decode</span><span class="p">(</span><span class="nv">$json_text</span><span class="p">);</span>

		<span class="nb">printf</span><span class="p">(</span><span class="s">"The username is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">username</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The password is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">password</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
		<span class="nb">printf</span><span class="p">(</span><span class="s">"The base uri is               : %s\n"</span><span class="p">,</span><span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">handle</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">credentials</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">baseuri</span><span class="p">})</span> <span class="k">if</span> <span class="nv">$settings_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">debug</span><span class="p">}</span> <span class="o">=~</span><span class="sr"> /True/</span> <span class="p">;</span>
	<span class="p">}</span>

	<span class="c1"># Print the message</span>
	<span class="k">if</span><span class="p">(</span> <span class="nv">$message</span> <span class="p">)</span> <span class="p">{</span>

		<span class="k">print</span> <span class="s">"$message\n"</span><span class="p">;</span>
	<span class="p">};</span>

	<span class="c1"># Return the results</span>
	<span class="k">return</span><span class="p">(</span><span class="nv">$returncode</span><span class="p">);</span>

<span class="p">};</span></code></pre>


	 </div>
	
</div>
	
		
			
<h3 id="the-response">The response:</h3>

<ul>
  <li>HTTP/1.1 200 OK: (Success)</li>
  <li>HTTP/1.1 401 Unauthorized: Your username or your password is wrong</li>
  <li>HTTP/1.1 404 NOT found: The url doesn‚Äôt exist</li>
</ul>

<p>After a successful request, the response consists of a list of PIDs containing this term.</p>

<pre><code>
GRNET
66742AB2-5685-11E3-A413-1C6F65A666B5
305F66A9-3994-42D6-A9F6-8E629126DE14
B4CF7AEA-55BB-4DB5-9D85-EB2DAD821B07
0CEEA495-71FA-460B-97A4-81E7E597B636
</code></pre>


		
	

 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/glossary/">Glossary</a></h3></li>
          <li><h3><a href="#">API</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/api/">Getting Started</a></h3></li>
                <li><h3><a href="/guides/api-auth/">Authenticate</a></h3></li>
                <li><h3><a href="/guides/api-generation/">PID Generation</a></h3></li>
                <li><h3><a href="/guides/api-get/">Get a PID</a></h3></li>
                <li><h3><a href="/guides/api-list/">List all PID</a></h3></li>
                <li><h3><a href="/guides/api-search/">Search</a></h3></li>
                <li><h3><a href="/guides/api-create/">Create a PID</a></h3></li>
                <li><h3><a href="/guides/api-update/">Update a PID</a></h3></li>
                <li><h3><a href="/guides/api-delete/">Delete a PID</a></h3></li>
                <li><h3><a href="/guides/api-partial/">Part Identifiers</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:contact@pidconsortium.eu" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:contact@argodoc.eu" class="site-link" target='_blank'>ARGO Consurtium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I"<
# API - Search a PID

This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.

## Search a PID - Description
You can search for a PID by using a term. 

| **Description** | Search a PID |
| **URL**         | The  EPIC API Url+?PARAMETER=\*term\*  |
| **HTTP Method** | GET                         |
| **Security**    | You must authenticate before actually getting this information.|

The parameters you may use for a search request are described in the following table:

Parameter |Value| Description | Example value |
------|--------|-------------|----------|---------------|---------------|
INST | string: name of the INST| Search and get the list of PIDs registered by an institute| https://epic.grnet.gr/api/v2/handles/11239/?INST=GRNET
URL | string: the url you are searching for | Search and get the PID of an object with the selected url | https://epic.grnet.gr/api/v2/handles/11239/?URL=http://www.grnet.gr
limit | int: the limit of results | Limit your results | https://epic.grnet.gr/api/v2/handles/11239/?URL=http://www.grnet.gr&limit=10

####You may also:
- combine the parameters to get the list of PIDs. (e.g. https://epic.grnet.gr/api/v2/handles/11239/?URL=http://www.grnet.gr&INST=GRNET).
- use part of the term in the search parameter (e.g. search for PIDS that contain "grnet" in the URL https://epic.grnet.gr/api/v2/handles/11239/?URL=\*grnet\*).


## Example

In this example we are going to use the term  to retrieve the list of PIDs with the following URL https://epic.grnet.gr/api/v2/handles/11239/?URL=\*GRNET\*

;T;
I"„
<h1 id="api---search-a-pid">API - Search a PID</h1>

<p>This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.</p>

<h2 id="search-a-pid---description">Search a PID - Description</h2>
<p>You can search for a PID by using a term. </p>

<table>
  <tbody>
    <tr>
      <td><strong>Description</strong></td>
      <td>Search a PID</td>
    </tr>
    <tr>
      <td><strong>URL</strong></td>
      <td>The  EPIC API Url+?PARAMETER=*term*</td>
    </tr>
    <tr>
      <td><strong>HTTP Method</strong></td>
      <td>GET</td>
    </tr>
    <tr>
      <td><strong>Security</strong></td>
      <td>You must authenticate before actually getting this information.</td>
    </tr>
  </tbody>
</table>

<p>The parameters you may use for a search request are described in the following table:</p>

<table>
  <thead>
    <tr>
      <th>Parameter</th>
      <th>Value</th>
      <th>Description</th>
      <th>Example value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>INST</td>
      <td>string: name of the INST</td>
      <td>Search and get the list of PIDs registered by an institute</td>
      <td>https://epic.grnet.gr/api/v2/handles/11239/?INST=GRNET</td>
    </tr>
    <tr>
      <td>URL</td>
      <td>string: the url you are searching for</td>
      <td>Search and get the PID of an object with the selected url</td>
      <td>https://epic.grnet.gr/api/v2/handles/11239/?URL=http://www.grnet.gr</td>
    </tr>
    <tr>
      <td>limit</td>
      <td>int: the limit of results</td>
      <td>Limit your results</td>
      <td>https://epic.grnet.gr/api/v2/handles/11239/?URL=http://www.grnet.gr&amp;limit=10</td>
    </tr>
  </tbody>
</table>

<h4 id="you-may-also">You may also:</h4>
<ul>
  <li>combine the parameters to get the list of PIDs. (e.g. https://epic.grnet.gr/api/v2/handles/11239/?URL=http://www.grnet.gr&amp;INST=GRNET).</li>
  <li>use part of the term in the search parameter (e.g. search for PIDS that contain ‚Äúgrnet‚Äù in the URL https://epic.grnet.gr/api/v2/handles/11239/?URL=*grnet*).</li>
</ul>

<h2 id="example">Example</h2>

<p>In this example we are going to use the term  to retrieve the list of PIDs with the following URL https://epic.grnet.gr/api/v2/handles/11239/?URL=*GRNET*</p>

;T;@<I"+/static/shared/images/argo-banner.png/;T{;{ I"+/static/shared/images/argo-header.png/;T{;{ I")/static/shared/images/argo-logo.png/;T{;{ I"/guides/compute/;T{;{	;I"e<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>Compute Engine documentation | ARGO</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h1 id="compute-engine">Compute Engine</h1>



 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/installation">Installation</a></h3></li>
          <li><h3><a href="#">Components</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/sync/">Sync Components</a></h3></li>
                <li><h3><a href="/guides/consumer/">Consumer</a></h3></li>
                <li><h3><a href="/guides/compute/">Compute Engine</a></h3></li>
                <li><h3><a href="/guides/api/">API</a></h3></li>
                <li><h3><a href="/guides/webui/">Web UI</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<!--
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
-->
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:argo-ggus-support@grnet.gr" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:argo-ggus-support@grnet.gr" class="site-link" target='_blank'>ARGO Consortium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I"
# Compute Engine

;T;
I"3
<h1 id="compute-engine">Compute Engine</h1>

;T;@KI"/guides/consumer/;T{;{	;I"r<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>Consumer | ARGO</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h1 id="consumer-service">Consumer service</h1>

<p>Data is collected using an ActiveMQ message broker network. The message consumer connects to one of the brokers in the network and subscribes to defined topics.</p>

<p>The consumer has # configuration files that define which messages and what data is logged in the log files.</p>



 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/installation">Installation</a></h3></li>
          <li><h3><a href="#">Components</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/sync/">Sync Components</a></h3></li>
                <li><h3><a href="/guides/consumer/">Consumer</a></h3></li>
                <li><h3><a href="/guides/compute/">Compute Engine</a></h3></li>
                <li><h3><a href="/guides/api/">API</a></h3></li>
                <li><h3><a href="/guides/webui/">Web UI</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<!--
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
-->
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:argo-ggus-support@grnet.gr" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:argo-ggus-support@grnet.gr" class="site-link" target='_blank'>ARGO Consortium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I"$
# Consumer service

Data is collected using an ActiveMQ message broker network. The message consumer connects to one of the brokers in the network and subscribes to defined topics.

The consumer has # configuration files that define which messages and what data is logged in the log files.

;T;
I"O
<h1 id="consumer-service">Consumer service</h1>

<p>Data is collected using an ActiveMQ message broker network. The message consumer connects to one of the brokers in the network and subscribes to defined topics.</p>

<p>The consumer has # configuration files that define which messages and what data is logged in the log files.</p>

;T;@QI"/guides/sync/;T{;{	;I"„<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>Sync compoments | ARGO</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h1 id="sync-compoments">Sync compoments</h1>

<p>This document describe the sync compoments.</p>

<h2 id="poem-profiles-sync">Poem profiles sync</h2>

<p>The poem profiles sync download the current poem profiles and stores them to a file.</p>

<p>There are four (4) config files: </p>

<ul>
  <li>
<code>/etc/ar-sync/poem.conf</code>, </li>
  <li>
<code>/etc/ar-sync/poem-profile.conf</code>, </li>
  <li>
<code>/etc/ar-sync/poem-server.conf</code> and</li>
  <li><code>/etc/ar-sync/poem-sync.conf</code></li>
</ul>

<p>This application requires host certificates and expects the certificate file to be installed at:
<code>/etc/grid-security/hostkey.pem</code>
<code>/etc/grid-security/hostcert.pem</code></p>

<p>The <code>poem.conf</code> config file look like this:</p>

<p><code>
mon.egi.eu;ops
</code></p>

<p>Each line in the <code>poem.conf</code> file defines a poem server from which to load profiles and a list of VOs to define which profiles are used.</p>

<p>In the deafult configuration profiles are loaded from one poem server: <code>mon.egi.eu</code>, and only ops VO‚Äôs profile are used.</p>

<p>The <code>poem-profile.conf</code> config file looks like this:</p>

<p><code>
CH.CERN.SAM.ROC
CH.CERN.SAM.ROC_OPERATORS
CH.CERN.SAM.ROC_CRITICAL
CH.CERN.SAM.OPS_MONITOR
CH.CERN.SAM.OPS_MONITOR_CRITICAL
CH.CERN.SAM.GLEXEC
CH.CERN.SAM.CLOUD-MON
</code></p>

<p>Each line in the <code>poem-profile.conf</code> file defines full name of filtered profiles list. So the list of profiles loaded form the servers are filtered according to this list.</p>

<p>The <code>poem-server.conf</code> config file looks like this:</p>

<p><code>
URL=http://gridops.cern.ch/config/nagios-roles.conf;ch.cern.sam.ROC,ch.cern.sam.ROC_OPERATORS,ch.cern.sam.ROC_CRITICAL,ch.cern.sam.GLEXEC
ALL:ops-monitor.cern.ch;ch.cern.sam.OPS_MONITOR,ch.cern.sam.OPS_MONITOR_CRITICAL
</code></p>

<p>Finally, the <code>poem-sync.conf</code> file contains all the information regarding the configurations themselves:</p>

<p>```</p>

<p>poemFile = ‚Äò/etc/ar-sync/poem.conf‚Äô
poemProfileFile = ‚Äò/etc/ar-sync/poem-profile.conf‚Äô
poemServerFile = ‚Äò/etc/ar-sync/poem-server.conf‚Äô
poemRequest = ‚Äò%s/poem/api/0.2/json/metrics_in_profiles/?vo_name=%s‚Äô
hostKey = ‚Äò/etc/grid-security/hostkey.pem‚Äô
hostCert = ‚Äò/etc/grid-security/hostcert.pem‚Äô</p>

<p>outputDir = ‚Äò/var/lib/ar-sync‚Äô
avroOutputDir = ‚Äò/var/lib/ar-sync‚Äô
avroOutputSchema = ‚Äò/etc/ar-sync/metric_profiles.avsc‚Äô</p>

<p>```</p>


 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/installation">Installation</a></h3></li>
          <li><h3><a href="#">Components</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/sync/">Sync Components</a></h3></li>
                <li><h3><a href="/guides/consumer/">Consumer</a></h3></li>
                <li><h3><a href="/guides/compute/">Compute Engine</a></h3></li>
                <li><h3><a href="/guides/api/">API</a></h3></li>
                <li><h3><a href="/guides/webui/">Web UI</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<!--
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
-->
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:argo-ggus-support@grnet.gr" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:argo-ggus-support@grnet.gr" class="site-link" target='_blank'>ARGO Consortium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I"
# Sync compoments

This document describe the sync compoments.

##  Poem profiles sync

The poem profiles sync download the current poem profiles and stores them to a file.

There are four (4) config files: 

- `/etc/ar-sync/poem.conf`, 
- `/etc/ar-sync/poem-profile.conf`, 
- `/etc/ar-sync/poem-server.conf` and
- `/etc/ar-sync/poem-sync.conf`

This application requires host certificates and expects the certificate file to be installed at:
`/etc/grid-security/hostkey.pem`
`/etc/grid-security/hostcert.pem`

The `poem.conf` config file look like this:

```
mon.egi.eu;ops
```

Each line in the `poem.conf` file defines a poem server from which to load profiles and a list of VOs to define which profiles are used.

In the deafult configuration profiles are loaded from one poem server: `mon.egi.eu`, and only ops VO's profile are used.

The `poem-profile.conf` config file looks like this:

```
CH.CERN.SAM.ROC
CH.CERN.SAM.ROC_OPERATORS
CH.CERN.SAM.ROC_CRITICAL
CH.CERN.SAM.OPS_MONITOR
CH.CERN.SAM.OPS_MONITOR_CRITICAL
CH.CERN.SAM.GLEXEC
CH.CERN.SAM.CLOUD-MON
```

Each line in the `poem-profile.conf` file defines full name of filtered profiles list. So the list of profiles loaded form the servers are filtered according to this list.

The `poem-server.conf` config file looks like this:

```
URL=http://gridops.cern.ch/config/nagios-roles.conf;ch.cern.sam.ROC,ch.cern.sam.ROC_OPERATORS,ch.cern.sam.ROC_CRITICAL,ch.cern.sam.GLEXEC
ALL:ops-monitor.cern.ch;ch.cern.sam.OPS_MONITOR,ch.cern.sam.OPS_MONITOR_CRITICAL
```

Finally, the `poem-sync.conf` file contains all the information regarding the configurations themselves:

```

poemFile = '/etc/ar-sync/poem.conf'
poemProfileFile = '/etc/ar-sync/poem-profile.conf'
poemServerFile = '/etc/ar-sync/poem-server.conf'
poemRequest = '%s/poem/api/0.2/json/metrics_in_profiles/?vo_name=%s'
hostKey = '/etc/grid-security/hostkey.pem'
hostCert = '/etc/grid-security/hostcert.pem'

outputDir = '/var/lib/ar-sync'
avroOutputDir = '/var/lib/ar-sync'
avroOutputSchema = '/etc/ar-sync/metric_profiles.avsc'


```
;T;
I"π	
<h1 id="sync-compoments">Sync compoments</h1>

<p>This document describe the sync compoments.</p>

<h2 id="poem-profiles-sync">Poem profiles sync</h2>

<p>The poem profiles sync download the current poem profiles and stores them to a file.</p>

<p>There are four (4) config files: </p>

<ul>
  <li>
<code>/etc/ar-sync/poem.conf</code>, </li>
  <li>
<code>/etc/ar-sync/poem-profile.conf</code>, </li>
  <li>
<code>/etc/ar-sync/poem-server.conf</code> and</li>
  <li><code>/etc/ar-sync/poem-sync.conf</code></li>
</ul>

<p>This application requires host certificates and expects the certificate file to be installed at:
<code>/etc/grid-security/hostkey.pem</code>
<code>/etc/grid-security/hostcert.pem</code></p>

<p>The <code>poem.conf</code> config file look like this:</p>

<p><code>
mon.egi.eu;ops
</code></p>

<p>Each line in the <code>poem.conf</code> file defines a poem server from which to load profiles and a list of VOs to define which profiles are used.</p>

<p>In the deafult configuration profiles are loaded from one poem server: <code>mon.egi.eu</code>, and only ops VO‚Äôs profile are used.</p>

<p>The <code>poem-profile.conf</code> config file looks like this:</p>

<p><code>
CH.CERN.SAM.ROC
CH.CERN.SAM.ROC_OPERATORS
CH.CERN.SAM.ROC_CRITICAL
CH.CERN.SAM.OPS_MONITOR
CH.CERN.SAM.OPS_MONITOR_CRITICAL
CH.CERN.SAM.GLEXEC
CH.CERN.SAM.CLOUD-MON
</code></p>

<p>Each line in the <code>poem-profile.conf</code> file defines full name of filtered profiles list. So the list of profiles loaded form the servers are filtered according to this list.</p>

<p>The <code>poem-server.conf</code> config file looks like this:</p>

<p><code>
URL=http://gridops.cern.ch/config/nagios-roles.conf;ch.cern.sam.ROC,ch.cern.sam.ROC_OPERATORS,ch.cern.sam.ROC_CRITICAL,ch.cern.sam.GLEXEC
ALL:ops-monitor.cern.ch;ch.cern.sam.OPS_MONITOR,ch.cern.sam.OPS_MONITOR_CRITICAL
</code></p>

<p>Finally, the <code>poem-sync.conf</code> file contains all the information regarding the configurations themselves:</p>

<p>```</p>

<p>poemFile = ‚Äò/etc/ar-sync/poem.conf‚Äô
poemProfileFile = ‚Äò/etc/ar-sync/poem-profile.conf‚Äô
poemServerFile = ‚Äò/etc/ar-sync/poem-server.conf‚Äô
poemRequest = ‚Äò%s/poem/api/0.2/json/metrics_in_profiles/?vo_name=%s‚Äô
hostKey = ‚Äò/etc/grid-security/hostkey.pem‚Äô
hostCert = ‚Äò/etc/grid-security/hostcert.pem‚Äô</p>

<p>outputDir = ‚Äò/var/lib/ar-sync‚Äô
avroOutputDir = ‚Äò/var/lib/ar-sync‚Äô
avroOutputSchema = ‚Äò/etc/ar-sync/metric_profiles.avsc‚Äô</p>

<p>```</p>
;T;@WI"/guides/webui/;T{;{	;I"“<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>Web UI | ARGO</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h1 id="web-ui">Web UI</h1>

<p>This document describes the Web UI installation and configuration process. </p>

<p>Web UI module for the ARGO Framework :</p>

<ul>
  <li>based on Lavoisier Framework - http://software.in2p3.fr/lavoisier</li>
  <li>prerequisites : a server certificate and java</li>
</ul>

<p>Installation - the $HOME_LAVOISIER is the directory where do you install the service
* cd $HOME_LAVOISIER
* wget https://github.com/ARGOeu/argo-ui/archive/master.zip
* unzip master.zip
* mkdir certificate
* put your certificate in p12 format in this directory
* cd $HOME_LAVOISIER/argo-ui-master/etc
* vi lavoisier-hidden.properties
* complete certificate.password and certificate.password</p>

<p>Start the service </p>

<ul>
  <li>./bin/lavoisier.sh console</li>
  <li>check the logs and access to the interface : http://yourmachine:8080/lavoisier</li>
  <li>if everything goes well </li>
  <li>./bin/lavoisier.sh restart</li>
</ul>


 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/installation">Installation</a></h3></li>
          <li><h3><a href="#">Components</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/sync/">Sync Components</a></h3></li>
                <li><h3><a href="/guides/consumer/">Consumer</a></h3></li>
                <li><h3><a href="/guides/compute/">Compute Engine</a></h3></li>
                <li><h3><a href="/guides/api/">API</a></h3></li>
                <li><h3><a href="/guides/webui/">Web UI</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<!--
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
-->
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:argo-ggus-support@grnet.gr" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:argo-ggus-support@grnet.gr" class="site-link" target='_blank'>ARGO Consortium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I":
# Web UI

This document describes the Web UI installation and configuration process. 


Web UI module for the ARGO Framework :

* based on Lavoisier Framework - http://software.in2p3.fr/lavoisier
* prerequisites : a server certificate and java


Installation - the $HOME_LAVOISIER is the directory where do you install the service
* cd $HOME_LAVOISIER
* wget https://github.com/ARGOeu/argo-ui/archive/master.zip
* unzip master.zip
* mkdir certificate
* put your certificate in p12 format in this directory
* cd $HOME_LAVOISIER/argo-ui-master/etc
* vi lavoisier-hidden.properties
* complete certificate.password and certificate.password


Start the service 

* ./bin/lavoisier.sh console
* check the logs and access to the interface : http://yourmachine:8080/lavoisier
* if everything goes well 
*  ./bin/lavoisier.sh restart
;T;
I"±
<h1 id="web-ui">Web UI</h1>

<p>This document describes the Web UI installation and configuration process. </p>

<p>Web UI module for the ARGO Framework :</p>

<ul>
  <li>based on Lavoisier Framework - http://software.in2p3.fr/lavoisier</li>
  <li>prerequisites : a server certificate and java</li>
</ul>

<p>Installation - the $HOME_LAVOISIER is the directory where do you install the service
* cd $HOME_LAVOISIER
* wget https://github.com/ARGOeu/argo-ui/archive/master.zip
* unzip master.zip
* mkdir certificate
* put your certificate in p12 format in this directory
* cd $HOME_LAVOISIER/argo-ui-master/etc
* vi lavoisier-hidden.properties
* complete certificate.password and certificate.password</p>

<p>Start the service </p>

<ul>
  <li>./bin/lavoisier.sh console</li>
  <li>check the logs and access to the interface : http://yourmachine:8080/lavoisier</li>
  <li>if everything goes well </li>
  <li>./bin/lavoisier.sh restart</li>
</ul>
;T;@]I"/guides/installation/;T{;{	;I"x%<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>Installation | ARGO</title>
  <link rel="alternate" type="application/atom+xml" title="API Changes" href="/changes.atom" />
  <link href="/css/reset.css" rel="stylesheet" type="text/css" />
  <link href="/css/960.css" rel="stylesheet" type="text/css" />
  <link href="/css/uv_active4d.css" rel="stylesheet" type="text/css" />
  <link href="/shared/css/documentation.css" media="screen" rel="stylesheet" type="text/css">
  <link href="/shared/css/pygments.css" media="screen" rel="stylesheet" type="text/css">
  <script src="/shared/js/jquery.js" type="text/javascript"></script>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300,300italic' rel='stylesheet' type='text/css'>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#myTab a:last').tab('show')
  })
</script>


<body class="api">
  <header itemtype="http://schema.org/WPHeader" itemscope="itemscope" role="banner" class="site-header" id="header">
	<div class="container">
		<div class="title-area">
			<div class="site-title" itemtype="http://schema.org/Organization" itemscope="">
					<img src="/shared/images/argo-logo.png" itemprop="logo">
			</div>
		</div>
	</div>
</header>

<nav role="navigation" class="navbar navbar-default">
  <div class="container">
    <div class="navbar-header">
      <button data-target=".bs-navbar-collapse" data-toggle="collapse" type="button" class="navbar-toggle">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>

    <nav role="navigation" class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
<!--
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
-->
      </ul>
    </nav>
  </div>
</nav>
<!--<div id="header-wrapper">
-->
<!--  <div id="header">
    <div>
      <a class="logo" href="/">GRNET PID Service</a>
      <ul class="nav">
        <li><a href="/guides/overview" class="nav-overview">Overview</a></li>
        <li><a href="/guides/api/" class="nav-api">API</a></li>
        <li><a href="/guides/glossary/" class="nav-blog">Glossary</a></li>
      </ul>
    </div>
    </div>
    </div>
-->


  <div id="wrapper">
    <div class="content">
      
<h1 id="installation">Installation</h1>

<p>This document will guide you through the installation process. The ARGO A/R components include the following items:</p>

<ul>
  <li>Sync Components</li>
  <li>Consumer service</li>
  <li>Compute Engine</li>
  <li>API service</li>
  <li>Web UI service</li>
</ul>

<p>These can be co-located on a single machine or more. Note that with respect to the Compute Engine Component there are two options, either to use the standalone version or the distributed version. The latter one requires interconnection with a Hadoop cluster. </p>

<p>The minimum requirements to meet in case of a single machine (standalone version) are the following:</p>

<ul>
  <li>4 CPUs</li>
  <li>8 GB RAM</li>
  <li>200 GB Disk</li>
</ul>

<p>For a production scale environment we propose two machines and a Hadoop cluster (distributed version). This is the setup that is used in production for EGI purposes and needs. In this case the minimum requirements are</p>

<ul>
  <li>Node 1 (Sync components, Consumer service and Hadoop client)</li>
  <li>2 CPUs</li>
  <li>4GB RAM</li>
  <li>100 GB Disk</li>
  <li>Node 2 (API and Web UI services)</li>
  <li>2 CPUs</li>
  <li>4GB RAM</li>
  <li>100 GB Disk</li>
</ul>

<p>Instructions on setting up follow:</p>

<h2 id="standalone-mode">Standalone mode</h2>

<p>You will need a RHEL 6.x or similar (base installation) to proceed. As a first step make sure that on your host an ntp client service is configured properly. </p>

<h3 id="software-repositories">Software Repositories</h3>

<p>On your host the next step is to install (as root user) the ar-release package via yum:</p>

<pre><code># yum install http://rpm.hellasgrid.gr/mash/centos6-arstats/x86_64/ar-release-1.0.0-3.21.el6.noarch.rpm
</code></pre>

<p>This package will configure on the host(s) the repository files under <code>/etc/yum.repos.d</code>.</p>

<p>Also install the EPEL repository. This can be done by installing the epel-release package for the appropriate OS. For example:</p>

<pre><code># yum install http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm 
</code></pre>

<p>You will also need to install the cloudera repository for Hadoop components to be retrieved (although you will not install any Hadoop cluster, some libraries from the Hadoop ecosystem are needed). Under a file named <code>/etc/yum.repos.d/cloudera-cdh4.repo</code> place the following contents:</p>

<pre><code>[cloudera-cdh4]
name=Cloudera's Distribution for Hadoop, Version 4
baseurl=http://archive.cloudera.com/cdh4/redhat/6/$basearch/cdh/4/
gpgkey = http://archive.cloudera.com/cdh4/redhat/6/$basearch/cdh/RPM-GPG-KEY-cloudera
gpgcheck = 1
enabled = 1
</code></pre>

<p>You will also need to install the EGI trust anchors repository (this is needed on the host for communicating with GOCDB PI service). Under a file named <code>/etc/yum.repos.d/EGI-trustanchors.repo</code> place the following contents:</p>

<pre><code>[EGI-trustanchors]
name=EGI-trustanchors
baseurl=http://repository.egi.eu/sw/production/cas/1/current/
enabled=1
gpgcheck=1
gpgkey=http://repository.egi.eu/sw/production/cas/1/GPG-KEY-EUGridPMA-RPM-3
</code></pre>

<p>You will finally need to add a MongoDB repository. The name of the file should be <code>/etc/yum.repos.d/mongodb.repo</code>) and its contents should be:</p>

<pre><code>[mongodb]
name=MongoDB Repository
baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/
gpgcheck=0
enabled=1
</code></pre>

<h3 id="sync-components-and-consumer-service">Sync Components and Consumer Service</h3>

<p>First of all install the ca_bundle meta-rpm with the following command:</p>

<pre><code># yum install ca-policy-egi-core
</code></pre>

<p>As a next step you should request and obtain an x509 host certificate from your national IGTF (Grid-related) approved CA and place the key/certificate pair under <code>/etc/grid-security/</code> folder with the following names and permissions:</p>

<ul>
  <li>Key file: <code>/etc/grid-security/hostkey.pem</code> and permissions: 0400</li>
  <li>Certificate file: <code>/etc/grid-security/hostcert.pem</code> and permissions: 0644</li>
</ul>

<p>Next, as root user install the following packages via yum:</p>

<pre><code># yum install ar-consumer
# yum install ar-sync
</code></pre>

<p>The ar-sync package installs components needed for refreshing the current status of the monitored system.</p>

<p>The ar-consumer service can be configured to connect to a pool of EGI message brokers. By default the config is set to <code>mq.afroditi.hellasgrid.gr</code> and <code>mq.cro-ngi.hr</code>. </p>

<p>This configuration is suggested as it will allow the consumer service to cycle to the next broker in the case the one it is connected to fails for some reason. </p>

<p>Start consumer service and make sure to add it to appropriate run levels:</p>

<pre><code># chkconfig ar-consumer on
# service ar-consumer start
</code></pre>


 <!--end item[:slug]-->
 </div>


    <div id="js-sidebar" class="sidebar-shell">
      <div class="sidebar-module">
        <ul>
          <li><h3><a href="/guides/overview">Overview</a></h3></li>
          <li><h3><a href="/guides/installation">Installation</a></h3></li>
          <li><h3><a href="#">Components</a></h3></li>
          <li><ul>
                <li><h3><a href="/guides/sync/">Sync Components</a></h3></li>
                <li><h3><a href="/guides/consumer/">Consumer</a></h3></li>
                <li><h3><a href="/guides/compute/">Compute Engine</a></h3></li>
                <li><h3><a href="/guides/api/">API</a></h3></li>
                <li><h3><a href="/guides/webui/">Web UI</a></h3></li>
          </ul></li>
        </ul> 
      </div>
      
<!--
<div class="sidebar-module notice padding10">
  <strong>API Url:</strong>
  <span>  The API URL (https://epic.grnet.gr/api/v2/handles/) is used as an example in these page. Each EPIC provider has each own EPIC API endpoint(s)</span>
</div>
-->
      <div class="sidebar-module padding10">
          <strong>Contact Us:</strong>
           <a href="mailto:argo-ggus-support@grnet.gr" target='blank'>Contact Us</a>
      </div><!--sidebar-module-->
	</div>
  </div><!-- #wrapper -->

  <footer itemtype="http://schema.org/WPFooter" itemscope="itemscope" role="contentinfo" class="site-footer" id="footer">
	<div class="wrap">
		<p>&nbsp;</p>
		<div class="footer-content footer-insert">
		<p class="copyright">Copyright &copy; 2014 <a rel="home" href="mailto:argo-ggus-support@grnet.gr" class="site-link" target='_blank'>ARGO Consortium</a>.</p>
		</div>
	</div>
</footer>

</body>
</html>


;T;	I"∂
# Installation

This document will guide you through the installation process. The ARGO A/R components include the following items:

- Sync Components
- Consumer service
- Compute Engine
- API service
- Web UI service

These can be co-located on a single machine or more. Note that with respect to the Compute Engine Component there are two options, either to use the standalone version or the distributed version. The latter one requires interconnection with a Hadoop cluster. 

The minimum requirements to meet in case of a single machine (standalone version) are the following:

- 4 CPUs
- 8 GB RAM
- 200 GB Disk

For a production scale environment we propose two machines and a Hadoop cluster (distributed version). This is the setup that is used in production for EGI purposes and needs. In this case the minimum requirements are

- Node 1 (Sync components, Consumer service and Hadoop client)
 - 2 CPUs
 - 4GB RAM
 - 100 GB Disk
- Node 2 (API and Web UI services)
 - 2 CPUs
 - 4GB RAM
 - 100 GB Disk

Instructions on setting up follow:

## Standalone mode

You will need a RHEL 6.x or similar (base installation) to proceed. As a first step make sure that on your host an ntp client service is configured properly. 

### Software Repositories

On your host the next step is to install (as root user) the ar-release package via yum:

    # yum install http://rpm.hellasgrid.gr/mash/centos6-arstats/x86_64/ar-release-1.0.0-3.21.el6.noarch.rpm

This package will configure on the host(s) the repository files under `/etc/yum.repos.d`.

Also install the EPEL repository. This can be done by installing the epel-release package for the appropriate OS. For example:

    # yum install http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm 

You will also need to install the cloudera repository for Hadoop components to be retrieved (although you will not install any Hadoop cluster, some libraries from the Hadoop ecosystem are needed). Under a file named `/etc/yum.repos.d/cloudera-cdh4.repo` place the following contents:

    [cloudera-cdh4]
    name=Cloudera's Distribution for Hadoop, Version 4
    baseurl=http://archive.cloudera.com/cdh4/redhat/6/$basearch/cdh/4/
    gpgkey = http://archive.cloudera.com/cdh4/redhat/6/$basearch/cdh/RPM-GPG-KEY-cloudera
    gpgcheck = 1
    enabled = 1

You will also need to install the EGI trust anchors repository (this is needed on the host for communicating with GOCDB PI service). Under a file named `/etc/yum.repos.d/EGI-trustanchors.repo` place the following contents:

    [EGI-trustanchors]
    name=EGI-trustanchors
    baseurl=http://repository.egi.eu/sw/production/cas/1/current/
    enabled=1
    gpgcheck=1
    gpgkey=http://repository.egi.eu/sw/production/cas/1/GPG-KEY-EUGridPMA-RPM-3

You will finally need to add a MongoDB repository. The name of the file should be `/etc/yum.repos.d/mongodb.repo`) and its contents should be:

    [mongodb]
    name=MongoDB Repository
    baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/
    gpgcheck=0
    enabled=1

### Sync Components and Consumer Service

First of all install the ca_bundle meta-rpm with the following command:

    # yum install ca-policy-egi-core

As a next step you should request and obtain an x509 host certificate from your national IGTF (Grid-related) approved CA and place the key/certificate pair under `/etc/grid-security/` folder with the following names and permissions:

* Key file: `/etc/grid-security/hostkey.pem` and permissions: 0400
* Certificate file: `/etc/grid-security/hostcert.pem` and permissions: 0644

Next, as root user install the following packages via yum:

    # yum install ar-consumer
    # yum install ar-sync

The ar-sync package installs components needed for refreshing the current status of the monitored system.

The ar-consumer service can be configured to connect to a pool of EGI message brokers. By default the config is set to `mq.afroditi.hellasgrid.gr` and `mq.cro-ngi.hr`. 

This configuration is suggested as it will allow the consumer service to cycle to the next broker in the case the one it is connected to fails for some reason. 

Start consumer service and make sure to add it to appropriate run levels:

    # chkconfig ar-consumer on
    # service ar-consumer start
;T;
I"Q
<h1 id="installation">Installation</h1>

<p>This document will guide you through the installation process. The ARGO A/R components include the following items:</p>

<ul>
  <li>Sync Components</li>
  <li>Consumer service</li>
  <li>Compute Engine</li>
  <li>API service</li>
  <li>Web UI service</li>
</ul>

<p>These can be co-located on a single machine or more. Note that with respect to the Compute Engine Component there are two options, either to use the standalone version or the distributed version. The latter one requires interconnection with a Hadoop cluster. </p>

<p>The minimum requirements to meet in case of a single machine (standalone version) are the following:</p>

<ul>
  <li>4 CPUs</li>
  <li>8 GB RAM</li>
  <li>200 GB Disk</li>
</ul>

<p>For a production scale environment we propose two machines and a Hadoop cluster (distributed version). This is the setup that is used in production for EGI purposes and needs. In this case the minimum requirements are</p>

<ul>
  <li>Node 1 (Sync components, Consumer service and Hadoop client)</li>
  <li>2 CPUs</li>
  <li>4GB RAM</li>
  <li>100 GB Disk</li>
  <li>Node 2 (API and Web UI services)</li>
  <li>2 CPUs</li>
  <li>4GB RAM</li>
  <li>100 GB Disk</li>
</ul>

<p>Instructions on setting up follow:</p>

<h2 id="standalone-mode">Standalone mode</h2>

<p>You will need a RHEL 6.x or similar (base installation) to proceed. As a first step make sure that on your host an ntp client service is configured properly. </p>

<h3 id="software-repositories">Software Repositories</h3>

<p>On your host the next step is to install (as root user) the ar-release package via yum:</p>

<pre><code># yum install http://rpm.hellasgrid.gr/mash/centos6-arstats/x86_64/ar-release-1.0.0-3.21.el6.noarch.rpm
</code></pre>

<p>This package will configure on the host(s) the repository files under <code>/etc/yum.repos.d</code>.</p>

<p>Also install the EPEL repository. This can be done by installing the epel-release package for the appropriate OS. For example:</p>

<pre><code># yum install http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm 
</code></pre>

<p>You will also need to install the cloudera repository for Hadoop components to be retrieved (although you will not install any Hadoop cluster, some libraries from the Hadoop ecosystem are needed). Under a file named <code>/etc/yum.repos.d/cloudera-cdh4.repo</code> place the following contents:</p>

<pre><code>[cloudera-cdh4]
name=Cloudera's Distribution for Hadoop, Version 4
baseurl=http://archive.cloudera.com/cdh4/redhat/6/$basearch/cdh/4/
gpgkey = http://archive.cloudera.com/cdh4/redhat/6/$basearch/cdh/RPM-GPG-KEY-cloudera
gpgcheck = 1
enabled = 1
</code></pre>

<p>You will also need to install the EGI trust anchors repository (this is needed on the host for communicating with GOCDB PI service). Under a file named <code>/etc/yum.repos.d/EGI-trustanchors.repo</code> place the following contents:</p>

<pre><code>[EGI-trustanchors]
name=EGI-trustanchors
baseurl=http://repository.egi.eu/sw/production/cas/1/current/
enabled=1
gpgcheck=1
gpgkey=http://repository.egi.eu/sw/production/cas/1/GPG-KEY-EUGridPMA-RPM-3
</code></pre>

<p>You will finally need to add a MongoDB repository. The name of the file should be <code>/etc/yum.repos.d/mongodb.repo</code>) and its contents should be:</p>

<pre><code>[mongodb]
name=MongoDB Repository
baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/
gpgcheck=0
enabled=1
</code></pre>

<h3 id="sync-components-and-consumer-service">Sync Components and Consumer Service</h3>

<p>First of all install the ca_bundle meta-rpm with the following command:</p>

<pre><code># yum install ca-policy-egi-core
</code></pre>

<p>As a next step you should request and obtain an x509 host certificate from your national IGTF (Grid-related) approved CA and place the key/certificate pair under <code>/etc/grid-security/</code> folder with the following names and permissions:</p>

<ul>
  <li>Key file: <code>/etc/grid-security/hostkey.pem</code> and permissions: 0400</li>
  <li>Certificate file: <code>/etc/grid-security/hostcert.pem</code> and permissions: 0644</li>
</ul>

<p>Next, as root user install the following packages via yum:</p>

<pre><code># yum install ar-consumer
# yum install ar-sync
</code></pre>

<p>The ar-sync package installs components needed for refreshing the current status of the monitored system.</p>

<p>The ar-consumer service can be configured to connect to a pool of EGI message brokers. By default the config is set to <code>mq.afroditi.hellasgrid.gr</code> and <code>mq.cro-ngi.hr</code>. </p>

<p>This configuration is suggested as it will allow the consumer service to cycle to the next broker in the case the one it is connected to fails for some reason. </p>

<p>Start consumer service and make sure to add it to appropriate run levels:</p>

<pre><code># chkconfig ar-consumer on
# service ar-consumer start
</code></pre>
;T;@cI"2/static/shared/images/argo-arch-overview.png/;T{;{ :versioni